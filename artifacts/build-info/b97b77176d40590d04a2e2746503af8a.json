{"id":"b97b77176d40590d04a2e2746503af8a","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@ensdomains/ens-contracts/contracts/registry/ENS.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ENS {\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(bytes32 indexed node, address owner);\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(bytes32 indexed node, address resolver);\n\n  // Logged when the TTL of a node changes\n  event NewTTL(bytes32 indexed node, uint64 ttl);\n\n  // Logged when an operator is added or removed.\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n  function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\n\n  function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\n\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns (bytes32);\n\n  function setResolver(bytes32 node, address resolver) external;\n\n  function setOwner(bytes32 node, address owner) external;\n\n  function setTTL(bytes32 node, uint64 ttl) external;\n\n  function setApprovalForAll(address operator, bool approved) external;\n\n  function owner(bytes32 node) external view returns (address);\n\n  function resolver(bytes32 node) external view returns (address);\n\n  function ttl(bytes32 node) external view returns (uint64);\n\n  function recordExists(bytes32 node) external view returns (bool);\n\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IABIResolver {\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n\n  /**\n   * Returns the ABI associated with an ENS node.\n   * Defined in EIP205.\n   * @param node The ENS node to query\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n   * @return contentType The content type of the return value\n   * @return data The ABI data\n   */\n  function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the new (multicoin) addr function.\n */\ninterface IAddressResolver {\n  event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress);\n\n  function addr(bytes32 node, uint256 coinType) external view returns (bytes memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the legacy (ETH-only) addr function.\n */\ninterface IAddrResolver {\n  event AddrChanged(bytes32 indexed node, address a);\n\n  /**\n   * Returns the address associated with an ENS node.\n   * @param node The ENS node to query.\n   * @return The associated address.\n   */\n  function addr(bytes32 node) external view returns (address payable);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IContentHashResolver {\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n  /**\n   * Returns the contenthash associated with an ENS node.\n   * @param node The ENS node to query.\n   * @return The associated contenthash.\n   */\n  function contenthash(bytes32 node) external view returns (bytes memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSRecordResolver {\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\n  event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\n\n  /**\n   * Obtain a DNS record.\n   * @param node the namehash of the node for which to fetch the record\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n   * @return the DNS record in wire format if present, otherwise empty\n   */\n  function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSZoneResolver {\n  // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\n  event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\n\n  /**\n   * zonehash obtains the hash for the zone.\n   * @param node The ENS node to query.\n   * @return The associated contenthash.\n   */\n  function zonehash(bytes32 node) external view returns (bytes memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IExtendedResolver {\n  function resolve(bytes memory name, bytes memory data) external view returns (bytes memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IInterfaceResolver {\n  event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\n\n  /**\n   * Returns the address of a contract that implements the specified interface for this name.\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n   * contract implements EIP165 and returns `true` for the specified interfaceID, its address\n   * will be returned.\n   * @param node The ENS node to query.\n   * @param interfaceID The EIP 165 interface ID to check for.\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\n   */\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface INameResolver {\n  event NameChanged(bytes32 indexed node, string name);\n\n  /**\n   * Returns the name associated with an ENS node, for reverse records.\n   * Defined in EIP181.\n   * @param node The ENS node to query.\n   * @return The associated name.\n   */\n  function name(bytes32 node) external view returns (string memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPubkeyResolver {\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n\n  /**\n   * Returns the SECP256k1 public key associated with an ENS node.\n   * Defined in EIP 619.\n   * @param node The ENS node to query\n   * @return x The X coordinate of the curve point for the public key.\n   * @return y The Y coordinate of the curve point for the public key.\n   */\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\n\n  /**\n   * Returns the text data associated with an ENS node and key.\n   * @param node The ENS node to query.\n   * @param key The text data key to query.\n   * @return The associated text data.\n   */\n  function text(bytes32 node, string calldata key) external view returns (string memory);\n}\n"},"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./profiles/IABIResolver.sol\";\nimport \"./profiles/IAddressResolver.sol\";\nimport \"./profiles/IAddrResolver.sol\";\nimport \"./profiles/IContentHashResolver.sol\";\nimport \"./profiles/IDNSRecordResolver.sol\";\nimport \"./profiles/IDNSZoneResolver.sol\";\nimport \"./profiles/IInterfaceResolver.sol\";\nimport \"./profiles/INameResolver.sol\";\nimport \"./profiles/IPubkeyResolver.sol\";\nimport \"./profiles/ITextResolver.sol\";\nimport \"./profiles/IExtendedResolver.sol\";\n\n/**\n * A generic resolver interface which includes all the functions including the ones deprecated\n */\ninterface Resolver is\n  IERC165,\n  IABIResolver,\n  IAddressResolver,\n  IAddrResolver,\n  IContentHashResolver,\n  IDNSRecordResolver,\n  IDNSZoneResolver,\n  IInterfaceResolver,\n  INameResolver,\n  IPubkeyResolver,\n  ITextResolver,\n  IExtendedResolver\n{\n  /* Deprecated events */\n  event ContentChanged(bytes32 indexed node, bytes32 hash);\n\n  function setApprovalForAll(address, bool) external;\n\n  function approve(bytes32 node, address delegate, bool approved) external;\n\n  function isApprovedForAll(address account, address operator) external;\n\n  function isApprovedFor(address owner, bytes32 node, address delegate) external;\n\n  function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\n\n  function setAddr(bytes32 node, address addr) external;\n\n  function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\n\n  function setContenthash(bytes32 node, bytes calldata hash) external;\n\n  function setDnsrr(bytes32 node, bytes calldata data) external;\n\n  function setName(bytes32 node, string calldata _name) external;\n\n  function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\n\n  function setText(bytes32 node, string calldata key, string calldata value) external;\n\n  function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\n\n  function multicall(bytes[] calldata data) external returns (bytes[] memory results);\n\n  function multicallWithNodeCheck(bytes32 nodehash, bytes[] calldata data) external returns (bytes[] memory results);\n\n  /* Deprecated functions */\n  function content(bytes32 node) external view returns (bytes32);\n\n  function multihash(bytes32 node) external view returns (bytes memory);\n\n  function setContent(bytes32 node, bytes32 hash) external;\n\n  function setMultihash(bytes32 node, bytes calldata hash) external;\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/Common.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror DeadlineExpired();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/// @notice A struct representing ECDSA signature data.\nstruct Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/// @notice A struct representing a single attestation.\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n\n/// @notice A helper function to work with unchecked iterators in loops.\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { ISemver } from \"./ISemver.sol\";\nimport { Attestation, Signature } from \"./Common.sol\";\n\n/// @notice A struct representing the arguments of the attestation request.\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the attestation request.\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    Signature signature; // The ECDSA signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi attestation request.\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the revocation request.\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the revocation request.\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    Signature signature; // The ECDSA signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi revocation request.\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title IEAS\n/// @notice EAS - Ethereum Attestation Service interface.\ninterface IEAS is ISemver {\n    /// @notice Emitted when an attestation has been made.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param uid The UID the revoked attestation.\n    /// @param schemaUID The UID of the schema.\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\n\n    /// @notice Emitted when an attestation has been revoked.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param schemaUID The UID of the schema.\n    /// @param uid The UID the revoked attestation.\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\n\n    /// @notice Emitted when a data has been timestamped.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /// @notice Emitted when a data has been revoked.\n    /// @param revoker The address of the revoker.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\n\n    /// @notice Returns the address of the global schema registry.\n    /// @return The address of the global schema registry.\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /// @notice Attests to a specific schema.\n    /// @param request The arguments of the attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attest({\n    ///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n    ///         data: {\n    ///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    ///             data: \"0xF00D\",\n    ///             value: 0\n    ///         }\n    ///     })\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\n\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attestByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n    ///         deadline: 1673891048\n    ///     })\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to multiple schemas.\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttest([{\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n    ///             data: '0x12345678',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\n\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttestByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         {\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Revokes an existing attestation to a specific schema.\n    /// @param request The arguments of the revocation request.\n    ///\n    /// Example:\n    ///     revoke({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n    ///             value: 0\n    ///         }\n    ///     })\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated revocation request.\n    ///\n    /// Example:\n    ///     revokeByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 27,\n    ///             r: '0xb593...7142',\n    ///             s: '0x0f5b...2cce'\n    ///         },\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     })\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas.\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevoke([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevokeByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /// @notice Timestamps the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /// @notice Timestamps the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Revokes the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /// @notice Revokes the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Returns an existing attestation by UID.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return The attestation data members.\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\n\n    /// @notice Checks whether an attestation exists.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return Whether an attestation exists.\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISemver } from \"./ISemver.sol\";\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\n/// @notice A struct representing a record for a submitted schema.\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\ninterface ISchemaRegistry is ISemver {\n    /// @notice Emitted when a new schema has been registered\n    /// @param uid The schema UID.\n    /// @param registerer The address of the account used to register the schema.\n    /// @param schema The schema data.\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\n\n    /// @notice Submits and reserves a new schema\n    /// @param schema The schema data schema.\n    /// @param resolver An optional schema resolver.\n    /// @param revocable Whether the schema allows revocations explicitly.\n    /// @return The UID of the new schema.\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\n\n    /// @notice Returns an existing schema by UID\n    /// @param uid The UID of the schema to retrieve.\n    /// @return The schema data members.\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title ISemver\n/// @notice A semver interface.\ninterface ISemver {\n    /// @notice Returns the full semver contract version.\n    /// @return Semver contract version as a string.\n    function version() external view returns (string memory);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISemver } from \"../ISemver.sol\";\nimport { Attestation } from \"../Common.sol\";\n\n/// @title ISchemaResolver\n/// @notice The interface of an optional schema resolver.\ninterface ISchemaResolver is ISemver {\n    /// @notice Checks if the resolver can be sent ETH.\n    /// @return Whether the resolver supports ETH transfers.\n    function isPayable() external pure returns (bool);\n\n    /// @notice Processes an attestation and verifies whether it's valid.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation is valid.\n    function attest(Attestation calldata attestation) external payable returns (bool);\n\n    /// @notice Processes multiple attestations and verifies whether they are valid.\n    /// @param attestations The new attestations.\n    /// @param values Explicit ETH amounts which were sent with each attestation.\n    /// @return Whether all the attestations are valid.\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\n    /// @param attestation The existing attestation to be revoked.\n    /// @return Whether the attestation can be revoked.\n    function revoke(Attestation calldata attestation) external payable returns (bool);\n\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\n    /// @param attestations The existing attestations to be revoked.\n    /// @param values Explicit ETH amounts which were sent with each revocation.\n    /// @return Whether the attestations can be revoked.\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/AttestationService.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\nimport \"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\";\nimport \"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {Attestation} from \"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\";\n\ncontract AttestationService is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\n    IEAS private eas;\n    ISchemaRegistry private schemaRegistry;\n\n    bytes32 private _missionEnrollmentSchema;\n    bytes32 public constant ATTESTATION_CREATOR_ROLE = keccak256(\"ATTESTATION_CREATOR_ROLE\");\n    address private constant MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS = 0xF0bC5CC2B4866dAAeCb069430c60b24520077037;\n\n    mapping(address => bool) private approvedAttestationCreators;\n\n    event SchemaCreated(bytes32 indexed schemaId);\n    event AttestationCreated(bytes32 indexed attestationId, address indexed recipient, address indexed attester);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _eas, address _schemaRegistry) public initializer {\n        require(_eas != address(0) && _schemaRegistry != address(0), \"Invalid address\");\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n\n        eas = IEAS(_eas);\n        schemaRegistry = ISchemaRegistry(_schemaRegistry);\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        approvedAttestationCreators[MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS] = true;\n    }\n\n    function createMissionEnrollmentSchema() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_missionEnrollmentSchema == bytes32(0), \"Schema already created\");\n        string memory schema = \"address userAddress,uint256 tokenId,uint256 timestamp,address attester\";\n        bytes32 schemaId = schemaRegistry.register(schema, ISchemaResolver(address(0)), true);\n        _missionEnrollmentSchema = schemaId;\n        emit SchemaCreated(schemaId);\n    }\n\n    function createMissionEnrollmentAttestation(address recipient, uint256 tokenId) external returns (bytes32) {\n        require(approvedAttestationCreators[msg.sender], \"Not authorized to create attestations\");\n        require(_missionEnrollmentSchema != bytes32(0), \"Schema not created\");\n        require(recipient != address(0), \"Invalid recipient\");\n        require(tokenId != 0, \"Invalid token ID\");\n\n        bytes memory data = abi.encode(recipient, tokenId, block.timestamp, msg.sender);\n\n        AttestationRequest memory request = AttestationRequest({\n            schema: _missionEnrollmentSchema,\n            data: AttestationRequestData({\n                recipient: recipient,\n                expirationTime: 0,\n                revocable: true,\n                refUID: bytes32(0),\n                data: data,\n                value: 0\n            })\n        });\n\n        bytes32 attestationId = eas.attest(request);\n        emit AttestationCreated(attestationId, recipient, msg.sender);\n        return attestationId;\n    }\n\n    function verifyAttestation(bytes32 attestationId) external view returns (bool) {\n        require(attestationId != bytes32(0), \"Invalid attestation ID\");\n        Attestation memory attestation = eas.getAttestation(attestationId);\n        return attestation.uid == attestationId && approvedAttestationCreators[attestation.attester];\n    }\n\n    function grantAttestationCreatorRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        approvedAttestationCreators[account] = true;\n    }\n\n    function revokeAttestationCreatorRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(account != MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS, \"Cannot revoke role from main attestation creator\");\n        approvedAttestationCreators[account] = false;\n    }\n\n    function isApprovedAttestationCreator(address account) external view returns (bool) {\n        return approvedAttestationCreators[account];\n    }\n\n    function getMissionEnrollmentSchema() external view returns (bytes32) {\n        return _missionEnrollmentSchema;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\n}\n"},"contracts/Client.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@ensdomains/ens-contracts/contracts/registry/ENS.sol\";\nimport \"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\";\n\nbytes4 constant EVM_EXTRA_ARGS_V1_TAG = 0x12345678;\nbytes4 constant EVM_EXTRA_ARGS_V2_TAG = 0x87654321;\n\n// End consumer library.\nlibrary Client {\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n  struct EVMTokenAmount {\n    address token; // token address on the local chain.\n    uint256 amount; // Amount of tokens.\n  }\n\n  // Cross-chain functionality removed\n\n  // If extraArgs is empty bytes, the default is 200k gas limit.\n  struct EVM2AnyMessage {\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\n    bytes data; // Data payload\n    EVMTokenAmount[] tokenAmounts; // Token transfers\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\n  }\n\n  struct EVMExtraArgsV1 {\n    uint256 gasLimit;\n  }\n\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n\n\n\n  /// @param gasLimit: gas limit for the callback on the destination chain.\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\n  /// is not set, the message request will revert.\n  struct EVMExtraArgsV2 {\n    uint256 gasLimit;\n    bool allowOutOfOrderExecution;\n  }\n\n  function _argsToBytes(EVMExtraArgsV2 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\n  }\n\n  /// @notice Verifies if an address has a valid ENS name associated with it\n  /// @param addr The address to verify\n  /// @param ensRegistry The address of the ENS registry contract\n  /// @return bool Returns true if the address has a valid ENS name, false otherwise\n  function verifyOnchainIdentity(address addr, address ensRegistry) internal view returns (bool) {\n    ENS ens = ENS(ensRegistry);\n    bytes32 node = reverseNode(addr);\n    address resolver = ens.resolver(node);\n    if (resolver == address(0)) {\n      return false;\n    }\n    Resolver resolverContract = Resolver(resolver);\n    string memory name = resolverContract.name(node);\n    return bytes(name).length > 0;\n  }\n\n  function reverseNode(address addr) internal pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encodePacked(\n          bytes32(0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2),\n          keccak256(abi.encodePacked(addr))\n        )\n      );\n  }\n\n  function namehash(bytes memory name) internal pure returns (bytes32) {\n    bytes32 node = 0x0000000000000000000000000000000000000000000000000000000000000000;\n    uint i = 0;\n    while (i < name.length) {\n      uint labelLen = uint8(name[i]);\n      i++;\n      if (i + labelLen > name.length) break;\n      bytes32 labelHash = keccak256(abi.encodePacked(slice(name, i, labelLen)));\n      node = keccak256(abi.encodePacked(node, labelHash));\n      i += labelLen;\n    }\n    return node;\n  }\n\n  function slice(bytes memory data, uint start, uint len) internal pure returns (bytes memory) {\n    bytes memory b = new bytes(len);\n    for (uint i = 0; i < len; i++) {\n      b[i] = data[i + start];\n    }\n    return b;\n  }\n}\n"},"contracts/utils/AttestationUtils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\nimport \"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\";\n\nlibrary AttestationUtils {\n  struct EAS {\n    IEAS eas;\n    ISchemaRegistry schemaRegistry;\n  }\n\n  error InvalidSchema();\n  error InvalidReceiver();\n  error InvalidTokenId();\n  error InvalidSignature();\n\n  function submitAttestation(\n    EAS memory eas,\n    bytes32 schema,\n    address receiver,\n    uint256 tokenId,\n    bytes calldata signature\n  ) internal returns (bytes32) {\n    if (schema == bytes32(0)) revert InvalidSchema();\n    if (receiver == address(0)) revert InvalidReceiver();\n    if (tokenId == 0) revert InvalidTokenId();\n    if (signature.length == 0) revert InvalidSignature();\n\n    bytes memory data = abi.encodePacked(tokenId, signature);\n\n    AttestationRequest memory request = AttestationRequest({\n      schema: schema,\n      data: AttestationRequestData({\n        recipient: receiver,\n        expirationTime: 0,\n        revocable: true,\n        refUID: bytes32(0),\n        data: data,\n        value: 0\n      })\n    });\n\n    return eas.eas.attest(request);\n  }\n\n  function createENSSchema(EAS memory eas) internal returns (bytes32) {\n    string memory schema = \"address userAddress,string ensName,uint256 registrationDate\";\n    return _registerSchema(eas, schema);\n  }\n\n  function createPOAPSchema(EAS memory eas) internal returns (bytes32) {\n    string memory schema = \"address userAddress,uint256 poapTokenId,string eventName,uint256 eventDate\";\n    return _registerSchema(eas, schema);\n  }\n\n  function _registerSchema(EAS memory eas, string memory schema) private returns (bytes32) {\n    return eas.schemaRegistry.register(schema, ISchemaResolver(address(0)), true);\n  }\n}\n"},"contracts/utils/EthereumProviderUtils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary EthereumProviderUtils {\n  // This function is a placeholder and should be implemented with actual logic\n  function convertProviderToSigner(address provider) internal pure returns (address) {\n    // TODO: Implement the logic to convert a provider to a signer\n    return provider; // Placeholder return\n  }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@ensdomains/ens-contracts/contracts/registry/ENS.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/registry/ENS.sol","exportedSymbols":{"ENS":[136]},"id":137,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"31:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"ENS","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":136,"linearizedBaseContracts":[136],"name":"ENS","nameLocation":"67:3:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"ce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82","id":9,"name":"NewOwner","nameLocation":"152:8:0","nodeType":"EventDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"177:4:0","nodeType":"VariableDeclaration","scope":9,"src":"161:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2,"name":"bytes32","nodeType":"ElementaryTypeName","src":"161:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5,"indexed":true,"mutability":"mutable","name":"label","nameLocation":"199:5:0","nodeType":"VariableDeclaration","scope":9,"src":"183:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4,"name":"bytes32","nodeType":"ElementaryTypeName","src":"183:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"214:5:0","nodeType":"VariableDeclaration","scope":9,"src":"206:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"206:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"160:60:0"},"src":"146:75:0"},{"anonymous":false,"eventSelector":"d4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d266","id":15,"name":"Transfer","nameLocation":"306:8:0","nodeType":"EventDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"331:4:0","nodeType":"VariableDeclaration","scope":15,"src":"315:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":10,"name":"bytes32","nodeType":"ElementaryTypeName","src":"315:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":13,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"345:5:0","nodeType":"VariableDeclaration","scope":15,"src":"337:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"337:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"314:37:0"},"src":"300:52:0"},{"anonymous":false,"eventSelector":"335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0","id":21,"name":"NewResolver","nameLocation":"412:11:0","nodeType":"EventDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"440:4:0","nodeType":"VariableDeclaration","scope":21,"src":"424:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":16,"name":"bytes32","nodeType":"ElementaryTypeName","src":"424:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":19,"indexed":false,"mutability":"mutable","name":"resolver","nameLocation":"454:8:0","nodeType":"VariableDeclaration","scope":21,"src":"446:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"446:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"423:40:0"},"src":"406:58:0"},{"anonymous":false,"eventSelector":"1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68","id":27,"name":"NewTTL","nameLocation":"517:6:0","nodeType":"EventDefinition","parameters":{"id":26,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"540:4:0","nodeType":"VariableDeclaration","scope":27,"src":"524:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"524:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":25,"indexed":false,"mutability":"mutable","name":"ttl","nameLocation":"553:3:0","nodeType":"VariableDeclaration","scope":27,"src":"546:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":24,"name":"uint64","nodeType":"ElementaryTypeName","src":"546:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"523:34:0"},"src":"511:47:0"},{"anonymous":false,"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":35,"name":"ApprovalForAll","nameLocation":"618:14:0","nodeType":"EventDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"649:5:0","nodeType":"VariableDeclaration","scope":35,"src":"633:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"633:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":31,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"672:8:0","nodeType":"VariableDeclaration","scope":35,"src":"656:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"656:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"687:8:0","nodeType":"VariableDeclaration","scope":35,"src":"682:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":32,"name":"bool","nodeType":"ElementaryTypeName","src":"682:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"632:64:0"},"src":"612:85:0"},{"functionSelector":"cf408823","id":46,"implemented":false,"kind":"function","modifiers":[],"name":"setRecord","nameLocation":"710:9:0","nodeType":"FunctionDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"node","nameLocation":"728:4:0","nodeType":"VariableDeclaration","scope":46,"src":"720:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":36,"name":"bytes32","nodeType":"ElementaryTypeName","src":"720:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"owner","nameLocation":"742:5:0","nodeType":"VariableDeclaration","scope":46,"src":"734:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"734:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":41,"mutability":"mutable","name":"resolver","nameLocation":"757:8:0","nodeType":"VariableDeclaration","scope":46,"src":"749:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":40,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":43,"mutability":"mutable","name":"ttl","nameLocation":"774:3:0","nodeType":"VariableDeclaration","scope":46,"src":"767:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":42,"name":"uint64","nodeType":"ElementaryTypeName","src":"767:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"719:59:0"},"returnParameters":{"id":45,"nodeType":"ParameterList","parameters":[],"src":"787:0:0"},"scope":136,"src":"701:87:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5ef2c7f0","id":59,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeRecord","nameLocation":"801:16:0","nodeType":"FunctionDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"node","nameLocation":"826:4:0","nodeType":"VariableDeclaration","scope":59,"src":"818:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":47,"name":"bytes32","nodeType":"ElementaryTypeName","src":"818:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":50,"mutability":"mutable","name":"label","nameLocation":"840:5:0","nodeType":"VariableDeclaration","scope":59,"src":"832:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":49,"name":"bytes32","nodeType":"ElementaryTypeName","src":"832:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":52,"mutability":"mutable","name":"owner","nameLocation":"855:5:0","nodeType":"VariableDeclaration","scope":59,"src":"847:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51,"name":"address","nodeType":"ElementaryTypeName","src":"847:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":54,"mutability":"mutable","name":"resolver","nameLocation":"870:8:0","nodeType":"VariableDeclaration","scope":59,"src":"862:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"862:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"ttl","nameLocation":"887:3:0","nodeType":"VariableDeclaration","scope":59,"src":"880:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":55,"name":"uint64","nodeType":"ElementaryTypeName","src":"880:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"817:74:0"},"returnParameters":{"id":58,"nodeType":"ParameterList","parameters":[],"src":"900:0:0"},"scope":136,"src":"792:109:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06ab5923","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeOwner","nameLocation":"914:15:0","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"node","nameLocation":"938:4:0","nodeType":"VariableDeclaration","scope":70,"src":"930:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":60,"name":"bytes32","nodeType":"ElementaryTypeName","src":"930:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":63,"mutability":"mutable","name":"label","nameLocation":"952:5:0","nodeType":"VariableDeclaration","scope":70,"src":"944:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"944:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"owner","nameLocation":"967:5:0","nodeType":"VariableDeclaration","scope":70,"src":"959:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"959:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:44:0"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"992:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":67,"name":"bytes32","nodeType":"ElementaryTypeName","src":"992:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"991:9:0"},"scope":136,"src":"905:96:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1896f70a","id":77,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"1014:11:0","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"node","nameLocation":"1034:4:0","nodeType":"VariableDeclaration","scope":77,"src":"1026:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":71,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1026:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"resolver","nameLocation":"1048:8:0","nodeType":"VariableDeclaration","scope":77,"src":"1040:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"1040:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1025:32:0"},"returnParameters":{"id":76,"nodeType":"ParameterList","parameters":[],"src":"1066:0:0"},"scope":136,"src":"1005:62:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5b0fc9c3","id":84,"implemented":false,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"1080:8:0","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"node","nameLocation":"1097:4:0","nodeType":"VariableDeclaration","scope":84,"src":"1089:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":78,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1089:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"owner","nameLocation":"1111:5:0","nodeType":"VariableDeclaration","scope":84,"src":"1103:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80,"name":"address","nodeType":"ElementaryTypeName","src":"1103:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1088:29:0"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"1126:0:0"},"scope":136,"src":"1071:56:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"14ab9038","id":91,"implemented":false,"kind":"function","modifiers":[],"name":"setTTL","nameLocation":"1140:6:0","nodeType":"FunctionDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"node","nameLocation":"1155:4:0","nodeType":"VariableDeclaration","scope":91,"src":"1147:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":85,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1147:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":88,"mutability":"mutable","name":"ttl","nameLocation":"1168:3:0","nodeType":"VariableDeclaration","scope":91,"src":"1161:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":87,"name":"uint64","nodeType":"ElementaryTypeName","src":"1161:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1146:26:0"},"returnParameters":{"id":90,"nodeType":"ParameterList","parameters":[],"src":"1181:0:0"},"scope":136,"src":"1131:51:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a22cb465","id":98,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1195:17:0","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"operator","nameLocation":"1221:8:0","nodeType":"VariableDeclaration","scope":98,"src":"1213:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"1213:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"approved","nameLocation":"1236:8:0","nodeType":"VariableDeclaration","scope":98,"src":"1231:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":94,"name":"bool","nodeType":"ElementaryTypeName","src":"1231:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1212:33:0"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[],"src":"1254:0:0"},"scope":136,"src":"1186:69:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"02571be3","id":105,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1268:5:0","nodeType":"FunctionDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"node","nameLocation":"1282:4:0","nodeType":"VariableDeclaration","scope":105,"src":"1274:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1273:14:0"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":105,"src":"1311:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"1311:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1310:9:0"},"scope":136,"src":"1259:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0178b8bf","id":112,"implemented":false,"kind":"function","modifiers":[],"name":"resolver","nameLocation":"1333:8:0","nodeType":"FunctionDefinition","parameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"node","nameLocation":"1350:4:0","nodeType":"VariableDeclaration","scope":112,"src":"1342:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1341:14:0"},"returnParameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":112,"src":"1379:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":109,"name":"address","nodeType":"ElementaryTypeName","src":"1379:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1378:9:0"},"scope":136,"src":"1324:64:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"16a25cbd","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"ttl","nameLocation":"1401:3:0","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"node","nameLocation":"1413:4:0","nodeType":"VariableDeclaration","scope":119,"src":"1405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1405:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1404:14:0"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":119,"src":"1442:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":116,"name":"uint64","nodeType":"ElementaryTypeName","src":"1442:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1441:8:0"},"scope":136,"src":"1392:58:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f79fe538","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"recordExists","nameLocation":"1463:12:0","nodeType":"FunctionDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"node","nameLocation":"1484:4:0","nodeType":"VariableDeclaration","scope":126,"src":"1476:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1476:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1475:14:0"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":126,"src":"1513:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":123,"name":"bool","nodeType":"ElementaryTypeName","src":"1513:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1512:6:0"},"scope":136,"src":"1454:65:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e985e9c5","id":135,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1532:16:0","nodeType":"FunctionDefinition","parameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"owner","nameLocation":"1557:5:0","nodeType":"VariableDeclaration","scope":135,"src":"1549:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":127,"name":"address","nodeType":"ElementaryTypeName","src":"1549:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":130,"mutability":"mutable","name":"operator","nameLocation":"1572:8:0","nodeType":"VariableDeclaration","scope":135,"src":"1564:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"1564:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1548:33:0"},"returnParameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":135,"src":"1605:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":132,"name":"bool","nodeType":"ElementaryTypeName","src":"1605:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1604:6:0"},"scope":136,"src":"1523:88:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":137,"src":"57:1556:0","usedErrors":[],"usedEvents":[9,15,21,27,35]}],"src":"31:1583:0"},"id":0},"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol","exportedSymbols":{"IABIResolver":[356],"IAddrResolver":[374],"IAddressResolver":[395],"IContentHashResolver":[412],"IDNSRecordResolver":[445],"IDNSZoneResolver":[464],"IERC165":[2975],"IExtendedResolver":[476],"IInterfaceResolver":[497],"INameResolver":[514],"IPubkeyResolver":[535],"ITextResolver":[558],"Resolver":[335]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":138,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"31:24:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2976,"src":"57:65:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol","file":"./profiles/IABIResolver.sol","id":140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":357,"src":"123:37:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol","file":"./profiles/IAddressResolver.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":396,"src":"161:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol","file":"./profiles/IAddrResolver.sol","id":142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":375,"src":"203:38:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol","file":"./profiles/IContentHashResolver.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":413,"src":"242:45:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol","file":"./profiles/IDNSRecordResolver.sol","id":144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":446,"src":"288:43:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol","file":"./profiles/IDNSZoneResolver.sol","id":145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":465,"src":"332:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol","file":"./profiles/IInterfaceResolver.sol","id":146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":498,"src":"374:43:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol","file":"./profiles/INameResolver.sol","id":147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":515,"src":"418:38:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol","file":"./profiles/IPubkeyResolver.sol","id":148,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":536,"src":"457:40:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol","file":"./profiles/ITextResolver.sol","id":149,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":559,"src":"498:38:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol","file":"./profiles/IExtendedResolver.sol","id":150,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":477,"src":"537:42:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":152,"name":"IERC165","nameLocations":["708:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2975,"src":"708:7:1"},"id":153,"nodeType":"InheritanceSpecifier","src":"708:7:1"},{"baseName":{"id":154,"name":"IABIResolver","nameLocations":["719:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":356,"src":"719:12:1"},"id":155,"nodeType":"InheritanceSpecifier","src":"719:12:1"},{"baseName":{"id":156,"name":"IAddressResolver","nameLocations":["735:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"735:16:1"},"id":157,"nodeType":"InheritanceSpecifier","src":"735:16:1"},{"baseName":{"id":158,"name":"IAddrResolver","nameLocations":["755:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":374,"src":"755:13:1"},"id":159,"nodeType":"InheritanceSpecifier","src":"755:13:1"},{"baseName":{"id":160,"name":"IContentHashResolver","nameLocations":["772:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":412,"src":"772:20:1"},"id":161,"nodeType":"InheritanceSpecifier","src":"772:20:1"},{"baseName":{"id":162,"name":"IDNSRecordResolver","nameLocations":["796:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":445,"src":"796:18:1"},"id":163,"nodeType":"InheritanceSpecifier","src":"796:18:1"},{"baseName":{"id":164,"name":"IDNSZoneResolver","nameLocations":["818:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":464,"src":"818:16:1"},"id":165,"nodeType":"InheritanceSpecifier","src":"818:16:1"},{"baseName":{"id":166,"name":"IInterfaceResolver","nameLocations":["838:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":497,"src":"838:18:1"},"id":167,"nodeType":"InheritanceSpecifier","src":"838:18:1"},{"baseName":{"id":168,"name":"INameResolver","nameLocations":["860:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":514,"src":"860:13:1"},"id":169,"nodeType":"InheritanceSpecifier","src":"860:13:1"},{"baseName":{"id":170,"name":"IPubkeyResolver","nameLocations":["877:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":535,"src":"877:15:1"},"id":171,"nodeType":"InheritanceSpecifier","src":"877:15:1"},{"baseName":{"id":172,"name":"ITextResolver","nameLocations":["896:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":558,"src":"896:13:1"},"id":173,"nodeType":"InheritanceSpecifier","src":"896:13:1"},{"baseName":{"id":174,"name":"IExtendedResolver","nameLocations":["913:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":476,"src":"913:17:1"},"id":175,"nodeType":"InheritanceSpecifier","src":"913:17:1"}],"canonicalName":"Resolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"581:102:1","text":" A generic resolver interface which includes all the functions including the ones deprecated"},"fullyImplemented":false,"id":335,"linearizedBaseContracts":[335,476,558,535,514,497,464,445,412,374,395,356,2975],"name":"Resolver","nameLocation":"694:8:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"0424b6fe0d9c3bdbece0e7879dc241bb0c22e900be8b6c168b4ee08bd9bf83bc","id":181,"name":"ContentChanged","nameLocation":"967:14:1","nodeType":"EventDefinition","parameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"998:4:1","nodeType":"VariableDeclaration","scope":181,"src":"982:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":176,"name":"bytes32","nodeType":"ElementaryTypeName","src":"982:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":179,"indexed":false,"mutability":"mutable","name":"hash","nameLocation":"1012:4:1","nodeType":"VariableDeclaration","scope":181,"src":"1004:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"981:36:1"},"src":"961:57:1"},{"functionSelector":"a22cb465","id":188,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1031:17:1","nodeType":"FunctionDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":188,"src":"1049:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"1049:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":188,"src":"1058:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":184,"name":"bool","nodeType":"ElementaryTypeName","src":"1058:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1048:15:1"},"returnParameters":{"id":187,"nodeType":"ParameterList","parameters":[],"src":"1072:0:1"},"scope":335,"src":"1022:51:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a4b91a01","id":197,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1086:7:1","nodeType":"FunctionDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"node","nameLocation":"1102:4:1","nodeType":"VariableDeclaration","scope":197,"src":"1094:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":189,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1094:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"delegate","nameLocation":"1116:8:1","nodeType":"VariableDeclaration","scope":197,"src":"1108:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"1108:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"approved","nameLocation":"1131:8:1","nodeType":"VariableDeclaration","scope":197,"src":"1126:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":193,"name":"bool","nodeType":"ElementaryTypeName","src":"1126:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1093:47:1"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"1149:0:1"},"scope":335,"src":"1077:73:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e985e9c5","id":204,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1163:16:1","nodeType":"FunctionDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"account","nameLocation":"1188:7:1","nodeType":"VariableDeclaration","scope":204,"src":"1180:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":198,"name":"address","nodeType":"ElementaryTypeName","src":"1180:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"operator","nameLocation":"1205:8:1","nodeType":"VariableDeclaration","scope":204,"src":"1197:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":200,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1179:35:1"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[],"src":"1223:0:1"},"scope":335,"src":"1154:70:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9784b3e","id":213,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedFor","nameLocation":"1237:13:1","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"owner","nameLocation":"1259:5:1","nodeType":"VariableDeclaration","scope":213,"src":"1251:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1251:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"node","nameLocation":"1274:4:1","nodeType":"VariableDeclaration","scope":213,"src":"1266:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1266:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"delegate","nameLocation":"1288:8:1","nodeType":"VariableDeclaration","scope":213,"src":"1280:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":209,"name":"address","nodeType":"ElementaryTypeName","src":"1280:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1250:47:1"},"returnParameters":{"id":212,"nodeType":"ParameterList","parameters":[],"src":"1306:0:1"},"scope":335,"src":"1228:79:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"623195b0","id":222,"implemented":false,"kind":"function","modifiers":[],"name":"setABI","nameLocation":"1320:6:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"node","nameLocation":"1335:4:1","nodeType":"VariableDeclaration","scope":222,"src":"1327:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1327:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"contentType","nameLocation":"1349:11:1","nodeType":"VariableDeclaration","scope":222,"src":"1341:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":216,"name":"uint256","nodeType":"ElementaryTypeName","src":"1341:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":219,"mutability":"mutable","name":"data","nameLocation":"1377:4:1","nodeType":"VariableDeclaration","scope":222,"src":"1362:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":218,"name":"bytes","nodeType":"ElementaryTypeName","src":"1362:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1326:56:1"},"returnParameters":{"id":221,"nodeType":"ParameterList","parameters":[],"src":"1391:0:1"},"scope":335,"src":"1311:81:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d5fa2b00","id":229,"implemented":false,"kind":"function","modifiers":[],"name":"setAddr","nameLocation":"1405:7:1","nodeType":"FunctionDefinition","parameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":224,"mutability":"mutable","name":"node","nameLocation":"1421:4:1","nodeType":"VariableDeclaration","scope":229,"src":"1413:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1413:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":226,"mutability":"mutable","name":"addr","nameLocation":"1435:4:1","nodeType":"VariableDeclaration","scope":229,"src":"1427:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":225,"name":"address","nodeType":"ElementaryTypeName","src":"1427:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1412:28:1"},"returnParameters":{"id":228,"nodeType":"ParameterList","parameters":[],"src":"1449:0:1"},"scope":335,"src":"1396:54:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8b95dd71","id":238,"implemented":false,"kind":"function","modifiers":[],"name":"setAddr","nameLocation":"1463:7:1","nodeType":"FunctionDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"node","nameLocation":"1479:4:1","nodeType":"VariableDeclaration","scope":238,"src":"1471:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1471:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"coinType","nameLocation":"1493:8:1","nodeType":"VariableDeclaration","scope":238,"src":"1485:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"1485:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"a","nameLocation":"1518:1:1","nodeType":"VariableDeclaration","scope":238,"src":"1503:16:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":234,"name":"bytes","nodeType":"ElementaryTypeName","src":"1503:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1470:50:1"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"1529:0:1"},"scope":335,"src":"1454:76:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"304e6ade","id":245,"implemented":false,"kind":"function","modifiers":[],"name":"setContenthash","nameLocation":"1543:14:1","nodeType":"FunctionDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"node","nameLocation":"1566:4:1","nodeType":"VariableDeclaration","scope":245,"src":"1558:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1558:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":242,"mutability":"mutable","name":"hash","nameLocation":"1587:4:1","nodeType":"VariableDeclaration","scope":245,"src":"1572:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":241,"name":"bytes","nodeType":"ElementaryTypeName","src":"1572:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1557:35:1"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[],"src":"1601:0:1"},"scope":335,"src":"1534:68:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"76196c88","id":252,"implemented":false,"kind":"function","modifiers":[],"name":"setDnsrr","nameLocation":"1615:8:1","nodeType":"FunctionDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"node","nameLocation":"1632:4:1","nodeType":"VariableDeclaration","scope":252,"src":"1624:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1624:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"data","nameLocation":"1653:4:1","nodeType":"VariableDeclaration","scope":252,"src":"1638:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":248,"name":"bytes","nodeType":"ElementaryTypeName","src":"1638:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1623:35:1"},"returnParameters":{"id":251,"nodeType":"ParameterList","parameters":[],"src":"1667:0:1"},"scope":335,"src":"1606:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"77372213","id":259,"implemented":false,"kind":"function","modifiers":[],"name":"setName","nameLocation":"1681:7:1","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"node","nameLocation":"1697:4:1","nodeType":"VariableDeclaration","scope":259,"src":"1689:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1689:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"_name","nameLocation":"1719:5:1","nodeType":"VariableDeclaration","scope":259,"src":"1703:21:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":255,"name":"string","nodeType":"ElementaryTypeName","src":"1703:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1688:37:1"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"1734:0:1"},"scope":335,"src":"1672:63:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"29cd62ea","id":268,"implemented":false,"kind":"function","modifiers":[],"name":"setPubkey","nameLocation":"1748:9:1","nodeType":"FunctionDefinition","parameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"node","nameLocation":"1766:4:1","nodeType":"VariableDeclaration","scope":268,"src":"1758:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1758:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":263,"mutability":"mutable","name":"x","nameLocation":"1780:1:1","nodeType":"VariableDeclaration","scope":268,"src":"1772:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1772:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":265,"mutability":"mutable","name":"y","nameLocation":"1791:1:1","nodeType":"VariableDeclaration","scope":268,"src":"1783:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1783:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1757:36:1"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"1802:0:1"},"scope":335,"src":"1739:64:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"10f13a8c","id":277,"implemented":false,"kind":"function","modifiers":[],"name":"setText","nameLocation":"1816:7:1","nodeType":"FunctionDefinition","parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"node","nameLocation":"1832:4:1","nodeType":"VariableDeclaration","scope":277,"src":"1824:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":269,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1824:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":272,"mutability":"mutable","name":"key","nameLocation":"1854:3:1","nodeType":"VariableDeclaration","scope":277,"src":"1838:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":271,"name":"string","nodeType":"ElementaryTypeName","src":"1838:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":274,"mutability":"mutable","name":"value","nameLocation":"1875:5:1","nodeType":"VariableDeclaration","scope":277,"src":"1859:21:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":273,"name":"string","nodeType":"ElementaryTypeName","src":"1859:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1823:58:1"},"returnParameters":{"id":276,"nodeType":"ParameterList","parameters":[],"src":"1890:0:1"},"scope":335,"src":"1807:84:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e59d895d","id":286,"implemented":false,"kind":"function","modifiers":[],"name":"setInterface","nameLocation":"1904:12:1","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"node","nameLocation":"1925:4:1","nodeType":"VariableDeclaration","scope":286,"src":"1917:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1917:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"interfaceID","nameLocation":"1938:11:1","nodeType":"VariableDeclaration","scope":286,"src":"1931:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":280,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1931:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"implementer","nameLocation":"1959:11:1","nodeType":"VariableDeclaration","scope":286,"src":"1951:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"1951:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1916:55:1"},"returnParameters":{"id":285,"nodeType":"ParameterList","parameters":[],"src":"1980:0:1"},"scope":335,"src":"1895:86:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ac9650d8","id":295,"implemented":false,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"1994:9:1","nodeType":"FunctionDefinition","parameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"data","nameLocation":"2021:4:1","nodeType":"VariableDeclaration","scope":295,"src":"2004:21:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":287,"name":"bytes","nodeType":"ElementaryTypeName","src":"2004:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":288,"nodeType":"ArrayTypeName","src":"2004:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2003:23:1"},"returnParameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"results","nameLocation":"2060:7:1","nodeType":"VariableDeclaration","scope":295,"src":"2045:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":291,"name":"bytes","nodeType":"ElementaryTypeName","src":"2045:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":292,"nodeType":"ArrayTypeName","src":"2045:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2044:24:1"},"scope":335,"src":"1985:84:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e32954eb","id":306,"implemented":false,"kind":"function","modifiers":[],"name":"multicallWithNodeCheck","nameLocation":"2082:22:1","nodeType":"FunctionDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"nodehash","nameLocation":"2113:8:1","nodeType":"VariableDeclaration","scope":306,"src":"2105:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2105:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":300,"mutability":"mutable","name":"data","nameLocation":"2140:4:1","nodeType":"VariableDeclaration","scope":306,"src":"2123:21:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":298,"name":"bytes","nodeType":"ElementaryTypeName","src":"2123:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":299,"nodeType":"ArrayTypeName","src":"2123:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2104:41:1"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"results","nameLocation":"2179:7:1","nodeType":"VariableDeclaration","scope":306,"src":"2164:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":302,"name":"bytes","nodeType":"ElementaryTypeName","src":"2164:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":303,"nodeType":"ArrayTypeName","src":"2164:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2163:24:1"},"scope":335,"src":"2073:115:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2dff6941","id":313,"implemented":false,"kind":"function","modifiers":[],"name":"content","nameLocation":"2230:7:1","nodeType":"FunctionDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"node","nameLocation":"2246:4:1","nodeType":"VariableDeclaration","scope":313,"src":"2238:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2238:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2237:14:1"},"returnParameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":313,"src":"2275:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2275:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2274:9:1"},"scope":335,"src":"2221:63:1","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e89401a1","id":320,"implemented":false,"kind":"function","modifiers":[],"name":"multihash","nameLocation":"2297:9:1","nodeType":"FunctionDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"node","nameLocation":"2315:4:1","nodeType":"VariableDeclaration","scope":320,"src":"2307:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2307:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2306:14:1"},"returnParameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":320,"src":"2344:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":317,"name":"bytes","nodeType":"ElementaryTypeName","src":"2344:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2343:14:1"},"scope":335,"src":"2288:70:1","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c3d014d6","id":327,"implemented":false,"kind":"function","modifiers":[],"name":"setContent","nameLocation":"2371:10:1","nodeType":"FunctionDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"node","nameLocation":"2390:4:1","nodeType":"VariableDeclaration","scope":327,"src":"2382:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2382:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":324,"mutability":"mutable","name":"hash","nameLocation":"2404:4:1","nodeType":"VariableDeclaration","scope":327,"src":"2396:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2396:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2381:28:1"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"2418:0:1"},"scope":335,"src":"2362:57:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"aa4cb547","id":334,"implemented":false,"kind":"function","modifiers":[],"name":"setMultihash","nameLocation":"2432:12:1","nodeType":"FunctionDefinition","parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"node","nameLocation":"2453:4:1","nodeType":"VariableDeclaration","scope":334,"src":"2445:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2445:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"hash","nameLocation":"2474:4:1","nodeType":"VariableDeclaration","scope":334,"src":"2459:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":330,"name":"bytes","nodeType":"ElementaryTypeName","src":"2459:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2444:35:1"},"returnParameters":{"id":333,"nodeType":"ParameterList","parameters":[],"src":"2488:0:1"},"scope":335,"src":"2423:66:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":336,"src":"684:1807:1","usedErrors":[],"usedEvents":[181,343,365,385,403,424,432,455,486,505,524,547]}],"src":"31:2461:1"},"id":1},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol","exportedSymbols":{"IABIResolver":[356]},"id":357,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IABIResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":356,"linearizedBaseContracts":[356],"name":"IABIResolver","nameLocation":"68:12:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"aa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3","id":343,"name":"ABIChanged","nameLocation":"91:10:2","nodeType":"EventDefinition","parameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"118:4:2","nodeType":"VariableDeclaration","scope":343,"src":"102:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"102:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"contentType","nameLocation":"140:11:2","nodeType":"VariableDeclaration","scope":343,"src":"124:27:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":340,"name":"uint256","nodeType":"ElementaryTypeName","src":"124:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"101:51:2"},"src":"85:68:2"},{"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"157:296:2","text":" Returns the ABI associated with an ENS node.\n Defined in EIP205.\n @param node The ENS node to query\n @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n @return contentType The content type of the return value\n @return data The ABI data"},"functionSelector":"2203ab56","id":355,"implemented":false,"kind":"function","modifiers":[],"name":"ABI","nameLocation":"465:3:2","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"node","nameLocation":"477:4:2","nodeType":"VariableDeclaration","scope":355,"src":"469:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"469:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"contentTypes","nameLocation":"491:12:2","nodeType":"VariableDeclaration","scope":355,"src":"483:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":347,"name":"uint256","nodeType":"ElementaryTypeName","src":"483:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"468:36:2"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"528:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":350,"name":"uint256","nodeType":"ElementaryTypeName","src":"528:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"537:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":352,"name":"bytes","nodeType":"ElementaryTypeName","src":"537:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"527:23:2"},"scope":356,"src":"456:95:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":357,"src":"58:495:2","usedErrors":[],"usedEvents":[343]}],"src":"32:522:2"},"id":2},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol","exportedSymbols":{"IAddrResolver":[374]},"id":375,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":358,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IAddrResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"58:61:3","text":" Interface for the legacy (ETH-only) addr function."},"fullyImplemented":false,"id":374,"linearizedBaseContracts":[374],"name":"IAddrResolver","nameLocation":"130:13:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2","id":365,"name":"AddrChanged","nameLocation":"154:11:3","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"182:4:3","nodeType":"VariableDeclaration","scope":365,"src":"166:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"166:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":false,"mutability":"mutable","name":"a","nameLocation":"196:1:3","nodeType":"VariableDeclaration","scope":365,"src":"188:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"188:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"165:33:3"},"src":"148:51:3"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"203:140:3","text":" Returns the address associated with an ENS node.\n @param node The ENS node to query.\n @return The associated address."},"functionSelector":"3b3b57de","id":373,"implemented":false,"kind":"function","modifiers":[],"name":"addr","nameLocation":"355:4:3","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"node","nameLocation":"368:4:3","nodeType":"VariableDeclaration","scope":373,"src":"360:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"360:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"359:14:3"},"returnParameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":373,"src":"397:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"397:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"396:17:3"},"scope":374,"src":"346:68:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":375,"src":"120:296:3","usedErrors":[],"usedEvents":[365]}],"src":"32:385:3"},"id":3},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol","exportedSymbols":{"IAddressResolver":[395]},"id":396,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":376,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IAddressResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":377,"nodeType":"StructuredDocumentation","src":"58:59:4","text":" Interface for the new (multicoin) addr function."},"fullyImplemented":false,"id":395,"linearizedBaseContracts":[395],"name":"IAddressResolver","nameLocation":"128:16:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752","id":385,"name":"AddressChanged","nameLocation":"155:14:4","nodeType":"EventDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"186:4:4","nodeType":"VariableDeclaration","scope":385,"src":"170:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"170:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":381,"indexed":false,"mutability":"mutable","name":"coinType","nameLocation":"200:8:4","nodeType":"VariableDeclaration","scope":385,"src":"192:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":380,"name":"uint256","nodeType":"ElementaryTypeName","src":"192:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":383,"indexed":false,"mutability":"mutable","name":"newAddress","nameLocation":"216:10:4","nodeType":"VariableDeclaration","scope":385,"src":"210:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":382,"name":"bytes","nodeType":"ElementaryTypeName","src":"210:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"169:58:4"},"src":"149:79:4"},{"functionSelector":"f1cb7e06","id":394,"implemented":false,"kind":"function","modifiers":[],"name":"addr","nameLocation":"241:4:4","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"node","nameLocation":"254:4:4","nodeType":"VariableDeclaration","scope":394,"src":"246:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":386,"name":"bytes32","nodeType":"ElementaryTypeName","src":"246:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"coinType","nameLocation":"268:8:4","nodeType":"VariableDeclaration","scope":394,"src":"260:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"260:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"245:32:4"},"returnParameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":394,"src":"301:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":391,"name":"bytes","nodeType":"ElementaryTypeName","src":"301:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"300:14:4"},"scope":395,"src":"232:83:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":396,"src":"118:199:4","usedErrors":[],"usedEvents":[385]}],"src":"32:286:4"},"id":4},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol","exportedSymbols":{"IContentHashResolver":[412]},"id":413,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":397,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IContentHashResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":412,"linearizedBaseContracts":[412],"name":"IContentHashResolver","nameLocation":"68:20:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"e379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578","id":403,"name":"ContenthashChanged","nameLocation":"99:18:5","nodeType":"EventDefinition","parameters":{"id":402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"134:4:5","nodeType":"VariableDeclaration","scope":403,"src":"118:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"118:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":401,"indexed":false,"mutability":"mutable","name":"hash","nameLocation":"146:4:5","nodeType":"VariableDeclaration","scope":403,"src":"140:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":400,"name":"bytes","nodeType":"ElementaryTypeName","src":"140:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"117:34:5"},"src":"93:59:5"},{"documentation":{"id":404,"nodeType":"StructuredDocumentation","src":"156:148:5","text":" Returns the contenthash associated with an ENS node.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"bc1c58d1","id":411,"implemented":false,"kind":"function","modifiers":[],"name":"contenthash","nameLocation":"316:11:5","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"node","nameLocation":"336:4:5","nodeType":"VariableDeclaration","scope":411,"src":"328:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":405,"name":"bytes32","nodeType":"ElementaryTypeName","src":"328:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"327:14:5"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":411,"src":"365:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":408,"name":"bytes","nodeType":"ElementaryTypeName","src":"365:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"364:14:5"},"scope":412,"src":"307:72:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":413,"src":"58:323:5","usedErrors":[],"usedEvents":[403]}],"src":"32:350:5"},"id":5},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol","exportedSymbols":{"IDNSRecordResolver":[445]},"id":446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":414,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IDNSRecordResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":445,"linearizedBaseContracts":[445],"name":"IDNSRecordResolver","nameLocation":"68:18:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b","id":424,"name":"DNSRecordChanged","nameLocation":"186:16:6","nodeType":"EventDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"219:4:6","nodeType":"VariableDeclaration","scope":424,"src":"203:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"203:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":418,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"231:4:6","nodeType":"VariableDeclaration","scope":424,"src":"225:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":417,"name":"bytes","nodeType":"ElementaryTypeName","src":"225:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":420,"indexed":false,"mutability":"mutable","name":"resource","nameLocation":"244:8:6","nodeType":"VariableDeclaration","scope":424,"src":"237:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":419,"name":"uint16","nodeType":"ElementaryTypeName","src":"237:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":422,"indexed":false,"mutability":"mutable","name":"record","nameLocation":"260:6:6","nodeType":"VariableDeclaration","scope":424,"src":"254:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":421,"name":"bytes","nodeType":"ElementaryTypeName","src":"254:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"202:65:6"},"src":"180:88:6"},{"anonymous":false,"eventSelector":"03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a1207","id":432,"name":"DNSRecordDeleted","nameLocation":"366:16:6","nodeType":"EventDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"399:4:6","nodeType":"VariableDeclaration","scope":432,"src":"383:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"383:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":428,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"411:4:6","nodeType":"VariableDeclaration","scope":432,"src":"405:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":427,"name":"bytes","nodeType":"ElementaryTypeName","src":"405:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":430,"indexed":false,"mutability":"mutable","name":"resource","nameLocation":"424:8:6","nodeType":"VariableDeclaration","scope":432,"src":"417:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":429,"name":"uint16","nodeType":"ElementaryTypeName","src":"417:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"382:51:6"},"src":"360:74:6"},{"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"438:379:6","text":" Obtain a DNS record.\n @param node the namehash of the node for which to fetch the record\n @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n @return the DNS record in wire format if present, otherwise empty"},"functionSelector":"a8fa5682","id":444,"implemented":false,"kind":"function","modifiers":[],"name":"dnsRecord","nameLocation":"829:9:6","nodeType":"FunctionDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"node","nameLocation":"847:4:6","nodeType":"VariableDeclaration","scope":444,"src":"839:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"839:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"name","nameLocation":"861:4:6","nodeType":"VariableDeclaration","scope":444,"src":"853:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"853:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"resource","nameLocation":"874:8:6","nodeType":"VariableDeclaration","scope":444,"src":"867:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":438,"name":"uint16","nodeType":"ElementaryTypeName","src":"867:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"838:45:6"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":444,"src":"907:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":441,"name":"bytes","nodeType":"ElementaryTypeName","src":"907:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"906:14:6"},"scope":445,"src":"820:101:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":446,"src":"58:865:6","usedErrors":[],"usedEvents":[424,432]}],"src":"32:892:6"},"id":6},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol","exportedSymbols":{"IDNSZoneResolver":[464]},"id":465,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":447,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IDNSZoneResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":464,"linearizedBaseContracts":[464],"name":"IDNSZoneResolver","nameLocation":"68:16:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85","id":455,"name":"DNSZonehashChanged","nameLocation":"176:18:7","nodeType":"EventDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"211:4:7","nodeType":"VariableDeclaration","scope":455,"src":"195:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"195:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":451,"indexed":false,"mutability":"mutable","name":"lastzonehash","nameLocation":"223:12:7","nodeType":"VariableDeclaration","scope":455,"src":"217:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":450,"name":"bytes","nodeType":"ElementaryTypeName","src":"217:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":453,"indexed":false,"mutability":"mutable","name":"zonehash","nameLocation":"243:8:7","nodeType":"VariableDeclaration","scope":455,"src":"237:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":452,"name":"bytes","nodeType":"ElementaryTypeName","src":"237:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"194:58:7"},"src":"170:83:7"},{"documentation":{"id":456,"nodeType":"StructuredDocumentation","src":"257:135:7","text":" zonehash obtains the hash for the zone.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"5c98042b","id":463,"implemented":false,"kind":"function","modifiers":[],"name":"zonehash","nameLocation":"404:8:7","nodeType":"FunctionDefinition","parameters":{"id":459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"node","nameLocation":"421:4:7","nodeType":"VariableDeclaration","scope":463,"src":"413:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"413:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"412:14:7"},"returnParameters":{"id":462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"450:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":460,"name":"bytes","nodeType":"ElementaryTypeName","src":"450:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"449:14:7"},"scope":464,"src":"395:69:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":465,"src":"58:408:7","usedErrors":[],"usedEvents":[455]}],"src":"32:435:7"},"id":7},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol","exportedSymbols":{"IExtendedResolver":[476]},"id":477,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":466,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IExtendedResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":476,"linearizedBaseContracts":[476],"name":"IExtendedResolver","nameLocation":"67:17:8","nodeType":"ContractDefinition","nodes":[{"functionSelector":"9061b923","id":475,"implemented":false,"kind":"function","modifiers":[],"name":"resolve","nameLocation":"98:7:8","nodeType":"FunctionDefinition","parameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"name","nameLocation":"119:4:8","nodeType":"VariableDeclaration","scope":475,"src":"106:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":467,"name":"bytes","nodeType":"ElementaryTypeName","src":"106:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":470,"mutability":"mutable","name":"data","nameLocation":"138:4:8","nodeType":"VariableDeclaration","scope":475,"src":"125:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":469,"name":"bytes","nodeType":"ElementaryTypeName","src":"125:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"105:38:8"},"returnParameters":{"id":474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":475,"src":"167:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":472,"name":"bytes","nodeType":"ElementaryTypeName","src":"167:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"166:14:8"},"scope":476,"src":"89:92:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":477,"src":"57:126:8","usedErrors":[],"usedEvents":[]}],"src":"32:152:8"},"id":8},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol","exportedSymbols":{"IInterfaceResolver":[497]},"id":498,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":478,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IInterfaceResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":497,"linearizedBaseContracts":[497],"name":"IInterfaceResolver","nameLocation":"68:18:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa","id":486,"name":"InterfaceChanged","nameLocation":"97:16:9","nodeType":"EventDefinition","parameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"130:4:9","nodeType":"VariableDeclaration","scope":486,"src":"114:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"114:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":482,"indexed":true,"mutability":"mutable","name":"interfaceID","nameLocation":"151:11:9","nodeType":"VariableDeclaration","scope":486,"src":"136:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":481,"name":"bytes4","nodeType":"ElementaryTypeName","src":"136:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":484,"indexed":false,"mutability":"mutable","name":"implementer","nameLocation":"172:11:9","nodeType":"VariableDeclaration","scope":486,"src":"164:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"164:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"113:71:9"},"src":"91:94:9"},{"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"189:608:9","text":" Returns the address of a contract that implements the specified interface for this name.\n If an implementer has not been set for this interfaceID and name, the resolver will query\n the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n contract implements EIP165 and returns `true` for the specified interfaceID, its address\n will be returned.\n @param node The ENS node to query.\n @param interfaceID The EIP 165 interface ID to check for.\n @return The address that implements this interface, or 0 if the interface is unsupported."},"functionSelector":"124a319c","id":496,"implemented":false,"kind":"function","modifiers":[],"name":"interfaceImplementer","nameLocation":"809:20:9","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"node","nameLocation":"838:4:9","nodeType":"VariableDeclaration","scope":496,"src":"830:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"830:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"interfaceID","nameLocation":"851:11:9","nodeType":"VariableDeclaration","scope":496,"src":"844:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":490,"name":"bytes4","nodeType":"ElementaryTypeName","src":"844:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"829:34:9"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"887:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":493,"name":"address","nodeType":"ElementaryTypeName","src":"887:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"886:9:9"},"scope":497,"src":"800:96:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":498,"src":"58:840:9","usedErrors":[],"usedEvents":[486]}],"src":"32:867:9"},"id":9},"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol","exportedSymbols":{"INameResolver":[514]},"id":515,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":499,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"INameResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":514,"linearizedBaseContracts":[514],"name":"INameResolver","nameLocation":"68:13:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"b7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7","id":505,"name":"NameChanged","nameLocation":"92:11:10","nodeType":"EventDefinition","parameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"120:4:10","nodeType":"VariableDeclaration","scope":505,"src":"104:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"104:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":503,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"133:4:10","nodeType":"VariableDeclaration","scope":505,"src":"126:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":502,"name":"string","nodeType":"ElementaryTypeName","src":"126:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"103:35:10"},"src":"86:53:10"},{"documentation":{"id":506,"nodeType":"StructuredDocumentation","src":"143:179:10","text":" Returns the name associated with an ENS node, for reverse records.\n Defined in EIP181.\n @param node The ENS node to query.\n @return The associated name."},"functionSelector":"691f3431","id":513,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"334:4:10","nodeType":"FunctionDefinition","parameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"node","nameLocation":"347:4:10","nodeType":"VariableDeclaration","scope":513,"src":"339:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"339:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"338:14:10"},"returnParameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":513,"src":"376:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":510,"name":"string","nodeType":"ElementaryTypeName","src":"376:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"375:15:10"},"scope":514,"src":"325:66:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":515,"src":"58:335:10","usedErrors":[],"usedEvents":[505]}],"src":"32:362:10"},"id":10},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol","exportedSymbols":{"IPubkeyResolver":[535]},"id":536,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":516,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IPubkeyResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":535,"linearizedBaseContracts":[535],"name":"IPubkeyResolver","nameLocation":"68:15:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46","id":524,"name":"PubkeyChanged","nameLocation":"94:13:11","nodeType":"EventDefinition","parameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"124:4:11","nodeType":"VariableDeclaration","scope":524,"src":"108:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"108:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":520,"indexed":false,"mutability":"mutable","name":"x","nameLocation":"138:1:11","nodeType":"VariableDeclaration","scope":524,"src":"130:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"130:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":522,"indexed":false,"mutability":"mutable","name":"y","nameLocation":"149:1:11","nodeType":"VariableDeclaration","scope":524,"src":"141:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"141:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"107:44:11"},"src":"88:64:11"},{"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"156:282:11","text":" Returns the SECP256k1 public key associated with an ENS node.\n Defined in EIP 619.\n @param node The ENS node to query\n @return x The X coordinate of the curve point for the public key.\n @return y The Y coordinate of the curve point for the public key."},"functionSelector":"c8690233","id":534,"implemented":false,"kind":"function","modifiers":[],"name":"pubkey","nameLocation":"450:6:11","nodeType":"FunctionDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"node","nameLocation":"465:4:11","nodeType":"VariableDeclaration","scope":534,"src":"457:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"457:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"456:14:11"},"returnParameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"x","nameLocation":"502:1:11","nodeType":"VariableDeclaration","scope":534,"src":"494:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"494:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":532,"mutability":"mutable","name":"y","nameLocation":"513:1:11","nodeType":"VariableDeclaration","scope":534,"src":"505:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":531,"name":"bytes32","nodeType":"ElementaryTypeName","src":"505:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"493:22:11"},"scope":535,"src":"441:75:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":536,"src":"58:460:11","usedErrors":[],"usedEvents":[524]}],"src":"32:487:11"},"id":11},"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol":{"ast":{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol","exportedSymbols":{"ITextResolver":[558]},"id":559,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":537,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:12"},{"abstract":false,"baseContracts":[],"canonicalName":"ITextResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":558,"linearizedBaseContracts":[558],"name":"ITextResolver","nameLocation":"68:13:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a1","id":547,"name":"TextChanged","nameLocation":"92:11:12","nodeType":"EventDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"120:4:12","nodeType":"VariableDeclaration","scope":547,"src":"104:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"104:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":541,"indexed":true,"mutability":"mutable","name":"indexedKey","nameLocation":"141:10:12","nodeType":"VariableDeclaration","scope":547,"src":"126:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":540,"name":"string","nodeType":"ElementaryTypeName","src":"126:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":543,"indexed":false,"mutability":"mutable","name":"key","nameLocation":"160:3:12","nodeType":"VariableDeclaration","scope":547,"src":"153:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":542,"name":"string","nodeType":"ElementaryTypeName","src":"153:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":545,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"172:5:12","nodeType":"VariableDeclaration","scope":547,"src":"165:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":544,"name":"string","nodeType":"ElementaryTypeName","src":"165:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"103:75:12"},"src":"86:93:12"},{"documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"183:196:12","text":" Returns the text data associated with an ENS node and key.\n @param node The ENS node to query.\n @param key The text data key to query.\n @return The associated text data."},"functionSelector":"59d1d43c","id":557,"implemented":false,"kind":"function","modifiers":[],"name":"text","nameLocation":"391:4:12","nodeType":"FunctionDefinition","parameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"mutability":"mutable","name":"node","nameLocation":"404:4:12","nodeType":"VariableDeclaration","scope":557,"src":"396:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"396:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":552,"mutability":"mutable","name":"key","nameLocation":"426:3:12","nodeType":"VariableDeclaration","scope":557,"src":"410:19:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":551,"name":"string","nodeType":"ElementaryTypeName","src":"410:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"395:35:12"},"returnParameters":{"id":556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":557,"src":"454:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":554,"name":"string","nodeType":"ElementaryTypeName","src":"454:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"453:15:12"},"scope":558,"src":"382:87:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":559,"src":"58:413:12","usedErrors":[],"usedEvents":[547]}],"src":"32:440:12"},"id":12},"@ethereum-attestation-service/eas-contracts/contracts/Common.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","exportedSymbols":{"AccessDenied":[568],"Attestation":[608],"DeadlineExpired":[570],"EMPTY_UID":[563],"InvalidEAS":[572],"InvalidLength":[574],"InvalidSignature":[576],"NO_EXPIRATION_TIME":[566],"NotFound":[578],"Signature":[586],"uncheckedInc":[624]},"id":625,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":560,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:13"},{"constant":true,"id":563,"mutability":"constant","name":"EMPTY_UID","nameLocation":"126:9:13","nodeType":"VariableDeclaration","scope":625,"src":"109:30:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"109:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30","id":562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"138:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":566,"mutability":"constant","name":"NO_EXPIRATION_TIME","nameLocation":"219:18:13","nodeType":"VariableDeclaration","scope":625,"src":"203:38:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":564,"name":"uint64","nodeType":"ElementaryTypeName","src":"203:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"30","id":565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"240:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"errorSelector":"4ca88867","id":568,"name":"AccessDenied","nameLocation":"250:12:13","nodeType":"ErrorDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[],"src":"262:2:13"},"src":"244:21:13"},{"errorSelector":"1ab7da6b","id":570,"name":"DeadlineExpired","nameLocation":"272:15:13","nodeType":"ErrorDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[],"src":"287:2:13"},"src":"266:24:13"},{"errorSelector":"83780ffe","id":572,"name":"InvalidEAS","nameLocation":"297:10:13","nodeType":"ErrorDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[],"src":"307:2:13"},"src":"291:19:13"},{"errorSelector":"947d5a84","id":574,"name":"InvalidLength","nameLocation":"317:13:13","nodeType":"ErrorDefinition","parameters":{"id":573,"nodeType":"ParameterList","parameters":[],"src":"330:2:13"},"src":"311:22:13"},{"errorSelector":"8baa579f","id":576,"name":"InvalidSignature","nameLocation":"340:16:13","nodeType":"ErrorDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[],"src":"356:2:13"},"src":"334:25:13"},{"errorSelector":"c5723b51","id":578,"name":"NotFound","nameLocation":"366:8:13","nodeType":"ErrorDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[],"src":"374:2:13"},"src":"360:17:13"},{"canonicalName":"Signature","documentation":{"id":579,"nodeType":"StructuredDocumentation","src":"379:56:13","text":"@notice A struct representing ECDSA signature data."},"id":586,"members":[{"constant":false,"id":581,"mutability":"mutable","name":"v","nameLocation":"464:1:13","nodeType":"VariableDeclaration","scope":586,"src":"458:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":580,"name":"uint8","nodeType":"ElementaryTypeName","src":"458:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"r","nameLocation":"499:1:13","nodeType":"VariableDeclaration","scope":586,"src":"491:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"491:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":585,"mutability":"mutable","name":"s","nameLocation":"550:1:13","nodeType":"VariableDeclaration","scope":586,"src":"542:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":584,"name":"bytes32","nodeType":"ElementaryTypeName","src":"542:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Signature","nameLocation":"442:9:13","nodeType":"StructDefinition","scope":625,"src":"435:142:13","visibility":"public"},{"canonicalName":"Attestation","documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"579:56:13","text":"@notice A struct representing a single attestation."},"id":608,"members":[{"constant":false,"id":589,"mutability":"mutable","name":"uid","nameLocation":"668:3:13","nodeType":"VariableDeclaration","scope":608,"src":"660:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"660:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"schema","nameLocation":"728:6:13","nodeType":"VariableDeclaration","scope":608,"src":"720:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":590,"name":"bytes32","nodeType":"ElementaryTypeName","src":"720:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"time","nameLocation":"787:4:13","nodeType":"VariableDeclaration","scope":608,"src":"780:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":592,"name":"uint64","nodeType":"ElementaryTypeName","src":"780:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":595,"mutability":"mutable","name":"expirationTime","nameLocation":"867:14:13","nodeType":"VariableDeclaration","scope":608,"src":"860:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":594,"name":"uint64","nodeType":"ElementaryTypeName","src":"860:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":597,"mutability":"mutable","name":"revocationTime","nameLocation":"953:14:13","nodeType":"VariableDeclaration","scope":608,"src":"946:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":596,"name":"uint64","nodeType":"ElementaryTypeName","src":"946:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":599,"mutability":"mutable","name":"refUID","nameLocation":"1044:6:13","nodeType":"VariableDeclaration","scope":608,"src":"1036:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1036:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":601,"mutability":"mutable","name":"recipient","nameLocation":"1103:9:13","nodeType":"VariableDeclaration","scope":608,"src":"1095:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":600,"name":"address","nodeType":"ElementaryTypeName","src":"1095:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":603,"mutability":"mutable","name":"attester","nameLocation":"1163:8:13","nodeType":"VariableDeclaration","scope":608,"src":"1155:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"revocable","nameLocation":"1225:9:13","nodeType":"VariableDeclaration","scope":608,"src":"1220:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":604,"name":"bool","nodeType":"ElementaryTypeName","src":"1220:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"data","nameLocation":"1287:4:13","nodeType":"VariableDeclaration","scope":608,"src":"1281:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":606,"name":"bytes","nodeType":"ElementaryTypeName","src":"1281:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Attestation","nameLocation":"642:11:13","nodeType":"StructDefinition","scope":625,"src":"635:687:13","visibility":"public"},{"body":{"id":623,"nodeType":"Block","src":"1455:44:13","statements":[{"id":622,"nodeType":"UncheckedBlock","src":"1461:36:13","statements":[{"expression":{"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":616,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"1481:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":617,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"1485:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1489:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1485:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1481:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":621,"nodeType":"ExpressionStatement","src":"1481:9:13"}]}]},"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"1324:73:13","text":"@notice A helper function to work with unchecked iterators in loops."},"id":624,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"uncheckedInc","nameLocation":"1406:12:13","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":611,"mutability":"mutable","name":"i","nameLocation":"1427:1:13","nodeType":"VariableDeclaration","scope":624,"src":"1419:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":610,"name":"uint256","nodeType":"ElementaryTypeName","src":"1419:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1418:11:13"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"j","nameLocation":"1452:1:13","nodeType":"VariableDeclaration","scope":624,"src":"1444:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"1444:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1443:11:13"},"scope":625,"src":"1397:102:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"33:1467:13"},"id":13},"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","exportedSymbols":{"Attestation":[608],"AttestationRequest":[654],"AttestationRequestData":[647],"DelegatedAttestationRequest":[668],"DelegatedRevocationRequest":[719],"IEAS":[931],"ISchemaRegistry":[984],"ISemver":[994],"MultiAttestationRequest":[676],"MultiDelegatedAttestationRequest":[692],"MultiDelegatedRevocationRequest":[743],"MultiRevocationRequest":[727],"RevocationRequest":[705],"RevocationRequestData":[698],"Signature":[586]},"id":932,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":626,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:14"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","file":"./ISchemaRegistry.sol","id":628,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":932,"sourceUnit":985,"src":"58:56:14","symbolAliases":[{"foreign":{"id":627,"name":"ISchemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"67:15:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol","file":"./ISemver.sol","id":630,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":932,"sourceUnit":995,"src":"115:40:14","symbolAliases":[{"foreign":{"id":629,"name":"ISemver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"124:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"./Common.sol","id":633,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":932,"sourceUnit":625,"src":"156:54:14","symbolAliases":[{"foreign":{"id":631,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"165:11:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":632,"name":"Signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"178:9:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"AttestationRequestData","documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"212:76:14","text":"@notice A struct representing the arguments of the attestation request."},"id":647,"members":[{"constant":false,"id":636,"mutability":"mutable","name":"recipient","nameLocation":"332:9:14","nodeType":"VariableDeclaration","scope":647,"src":"324:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":635,"name":"address","nodeType":"ElementaryTypeName","src":"324:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"expirationTime","nameLocation":"391:14:14","nodeType":"VariableDeclaration","scope":647,"src":"384:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":637,"name":"uint64","nodeType":"ElementaryTypeName","src":"384:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"revocable","nameLocation":"475:9:14","nodeType":"VariableDeclaration","scope":647,"src":"470:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":639,"name":"bool","nodeType":"ElementaryTypeName","src":"470:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"refUID","nameLocation":"539:6:14","nodeType":"VariableDeclaration","scope":647,"src":"531:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":641,"name":"bytes32","nodeType":"ElementaryTypeName","src":"531:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"data","nameLocation":"596:4:14","nodeType":"VariableDeclaration","scope":647,"src":"590:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":643,"name":"bytes","nodeType":"ElementaryTypeName","src":"590:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":646,"mutability":"mutable","name":"value","nameLocation":"642:5:14","nodeType":"VariableDeclaration","scope":647,"src":"634:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":645,"name":"uint256","nodeType":"ElementaryTypeName","src":"634:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AttestationRequestData","nameLocation":"295:22:14","nodeType":"StructDefinition","scope":932,"src":"288:466:14","visibility":"public"},{"canonicalName":"AttestationRequest","documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"756:81:14","text":"@notice A struct representing the full arguments of the attestation request."},"id":654,"members":[{"constant":false,"id":650,"mutability":"mutable","name":"schema","nameLocation":"877:6:14","nodeType":"VariableDeclaration","scope":654,"src":"869:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"869:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"data","nameLocation":"952:4:14","nodeType":"VariableDeclaration","scope":654,"src":"929:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":652,"nodeType":"UserDefinedTypeName","pathNode":{"id":651,"name":"AttestationRequestData","nameLocations":["929:22:14"],"nodeType":"IdentifierPath","referencedDeclaration":647,"src":"929:22:14"},"referencedDeclaration":647,"src":"929:22:14","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"}],"name":"AttestationRequest","nameLocation":"844:18:14","nodeType":"StructDefinition","scope":932,"src":"837:167:14","visibility":"public"},{"canonicalName":"DelegatedAttestationRequest","documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"1006:96:14","text":"@notice A struct representing the full arguments of the full delegated attestation request."},"id":668,"members":[{"constant":false,"id":657,"mutability":"mutable","name":"schema","nameLocation":"1151:6:14","nodeType":"VariableDeclaration","scope":668,"src":"1143:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":656,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1143:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":660,"mutability":"mutable","name":"data","nameLocation":"1226:4:14","nodeType":"VariableDeclaration","scope":668,"src":"1203:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":659,"nodeType":"UserDefinedTypeName","pathNode":{"id":658,"name":"AttestationRequestData","nameLocations":["1203:22:14"],"nodeType":"IdentifierPath","referencedDeclaration":647,"src":"1203:22:14"},"referencedDeclaration":647,"src":"1203:22:14","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"},{"constant":false,"id":663,"mutability":"mutable","name":"signature","nameLocation":"1291:9:14","nodeType":"VariableDeclaration","scope":668,"src":"1281:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$586_storage_ptr","typeString":"struct Signature"},"typeName":{"id":662,"nodeType":"UserDefinedTypeName","pathNode":{"id":661,"name":"Signature","nameLocations":["1281:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"1281:9:14"},"referencedDeclaration":586,"src":"1281:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$586_storage_ptr","typeString":"struct Signature"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"attester","nameLocation":"1343:8:14","nodeType":"VariableDeclaration","scope":668,"src":"1335:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":664,"name":"address","nodeType":"ElementaryTypeName","src":"1335:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":667,"mutability":"mutable","name":"deadline","nameLocation":"1390:8:14","nodeType":"VariableDeclaration","scope":668,"src":"1383:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":666,"name":"uint64","nodeType":"ElementaryTypeName","src":"1383:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"DelegatedAttestationRequest","nameLocation":"1109:27:14","nodeType":"StructDefinition","scope":932,"src":"1102:341:14","visibility":"public"},{"canonicalName":"MultiAttestationRequest","documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"1445:87:14","text":"@notice A struct representing the full arguments of the multi attestation request."},"id":676,"members":[{"constant":false,"id":671,"mutability":"mutable","name":"schema","nameLocation":"1577:6:14","nodeType":"VariableDeclaration","scope":676,"src":"1569:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1569:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":675,"mutability":"mutable","name":"data","nameLocation":"1654:4:14","nodeType":"VariableDeclaration","scope":676,"src":"1629:29:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$647_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":673,"nodeType":"UserDefinedTypeName","pathNode":{"id":672,"name":"AttestationRequestData","nameLocations":["1629:22:14"],"nodeType":"IdentifierPath","referencedDeclaration":647,"src":"1629:22:14"},"referencedDeclaration":647,"src":"1629:22:14","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_storage_ptr","typeString":"struct AttestationRequestData"}},"id":674,"nodeType":"ArrayTypeName","src":"1629:24:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$647_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"}],"name":"MultiAttestationRequest","nameLocation":"1539:23:14","nodeType":"StructDefinition","scope":932,"src":"1532:174:14","visibility":"public"},{"canonicalName":"MultiDelegatedAttestationRequest","documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"1708:97:14","text":"@notice A struct representing the full arguments of the delegated multi attestation request."},"id":692,"members":[{"constant":false,"id":679,"mutability":"mutable","name":"schema","nameLocation":"1859:6:14","nodeType":"VariableDeclaration","scope":692,"src":"1851:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":678,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1851:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":683,"mutability":"mutable","name":"data","nameLocation":"1936:4:14","nodeType":"VariableDeclaration","scope":692,"src":"1911:29:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$647_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":681,"nodeType":"UserDefinedTypeName","pathNode":{"id":680,"name":"AttestationRequestData","nameLocations":["1911:22:14"],"nodeType":"IdentifierPath","referencedDeclaration":647,"src":"1911:22:14"},"referencedDeclaration":647,"src":"1911:22:14","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_storage_ptr","typeString":"struct AttestationRequestData"}},"id":682,"nodeType":"ArrayTypeName","src":"1911:24:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$647_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":687,"mutability":"mutable","name":"signatures","nameLocation":"2004:10:14","nodeType":"VariableDeclaration","scope":692,"src":"1992:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$586_storage_$dyn_storage_ptr","typeString":"struct Signature[]"},"typeName":{"baseType":{"id":685,"nodeType":"UserDefinedTypeName","pathNode":{"id":684,"name":"Signature","nameLocations":["1992:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"1992:9:14"},"referencedDeclaration":586,"src":"1992:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$586_storage_ptr","typeString":"struct Signature"}},"id":686,"nodeType":"ArrayTypeName","src":"1992:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$586_storage_$dyn_storage_ptr","typeString":"struct Signature[]"}},"visibility":"internal"},{"constant":false,"id":689,"mutability":"mutable","name":"attester","nameLocation":"2139:8:14","nodeType":"VariableDeclaration","scope":692,"src":"2131:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":688,"name":"address","nodeType":"ElementaryTypeName","src":"2131:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":691,"mutability":"mutable","name":"deadline","nameLocation":"2186:8:14","nodeType":"VariableDeclaration","scope":692,"src":"2179:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":690,"name":"uint64","nodeType":"ElementaryTypeName","src":"2179:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"MultiDelegatedAttestationRequest","nameLocation":"1812:32:14","nodeType":"StructDefinition","scope":932,"src":"1805:434:14","visibility":"public"},{"canonicalName":"RevocationRequestData","documentation":{"id":693,"nodeType":"StructuredDocumentation","src":"2241:75:14","text":"@notice A struct representing the arguments of the revocation request."},"id":698,"members":[{"constant":false,"id":695,"mutability":"mutable","name":"uid","nameLocation":"2359:3:14","nodeType":"VariableDeclaration","scope":698,"src":"2351:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2351:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":697,"mutability":"mutable","name":"value","nameLocation":"2417:5:14","nodeType":"VariableDeclaration","scope":698,"src":"2409:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":696,"name":"uint256","nodeType":"ElementaryTypeName","src":"2409:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RevocationRequestData","nameLocation":"2323:21:14","nodeType":"StructDefinition","scope":932,"src":"2316:213:14","visibility":"public"},{"canonicalName":"RevocationRequest","documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"2531:80:14","text":"@notice A struct representing the full arguments of the revocation request."},"id":705,"members":[{"constant":false,"id":701,"mutability":"mutable","name":"schema","nameLocation":"2650:6:14","nodeType":"VariableDeclaration","scope":705,"src":"2642:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2642:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"data","nameLocation":"2724:4:14","nodeType":"VariableDeclaration","scope":705,"src":"2702:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$698_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":703,"nodeType":"UserDefinedTypeName","pathNode":{"id":702,"name":"RevocationRequestData","nameLocations":["2702:21:14"],"nodeType":"IdentifierPath","referencedDeclaration":698,"src":"2702:21:14"},"referencedDeclaration":698,"src":"2702:21:14","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$698_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"}],"name":"RevocationRequest","nameLocation":"2618:17:14","nodeType":"StructDefinition","scope":932,"src":"2611:164:14","visibility":"public"},{"canonicalName":"DelegatedRevocationRequest","documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"2777:90:14","text":"@notice A struct representing the arguments of the full delegated revocation request."},"id":719,"members":[{"constant":false,"id":708,"mutability":"mutable","name":"schema","nameLocation":"2915:6:14","nodeType":"VariableDeclaration","scope":719,"src":"2907:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2907:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":711,"mutability":"mutable","name":"data","nameLocation":"2989:4:14","nodeType":"VariableDeclaration","scope":719,"src":"2967:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$698_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":710,"nodeType":"UserDefinedTypeName","pathNode":{"id":709,"name":"RevocationRequestData","nameLocations":["2967:21:14"],"nodeType":"IdentifierPath","referencedDeclaration":698,"src":"2967:21:14"},"referencedDeclaration":698,"src":"2967:21:14","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$698_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"signature","nameLocation":"3053:9:14","nodeType":"VariableDeclaration","scope":719,"src":"3043:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$586_storage_ptr","typeString":"struct Signature"},"typeName":{"id":713,"nodeType":"UserDefinedTypeName","pathNode":{"id":712,"name":"Signature","nameLocations":["3043:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"3043:9:14"},"referencedDeclaration":586,"src":"3043:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$586_storage_ptr","typeString":"struct Signature"}},"visibility":"internal"},{"constant":false,"id":716,"mutability":"mutable","name":"revoker","nameLocation":"3105:7:14","nodeType":"VariableDeclaration","scope":719,"src":"3097:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"3097:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":718,"mutability":"mutable","name":"deadline","nameLocation":"3150:8:14","nodeType":"VariableDeclaration","scope":719,"src":"3143:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":717,"name":"uint64","nodeType":"ElementaryTypeName","src":"3143:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"DelegatedRevocationRequest","nameLocation":"2874:26:14","nodeType":"StructDefinition","scope":932,"src":"2867:336:14","visibility":"public"},{"canonicalName":"MultiRevocationRequest","documentation":{"id":720,"nodeType":"StructuredDocumentation","src":"3205:86:14","text":"@notice A struct representing the full arguments of the multi revocation request."},"id":727,"members":[{"constant":false,"id":722,"mutability":"mutable","name":"schema","nameLocation":"3335:6:14","nodeType":"VariableDeclaration","scope":727,"src":"3327:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3327:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"data","nameLocation":"3411:4:14","nodeType":"VariableDeclaration","scope":727,"src":"3387:28:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$698_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":724,"nodeType":"UserDefinedTypeName","pathNode":{"id":723,"name":"RevocationRequestData","nameLocations":["3387:21:14"],"nodeType":"IdentifierPath","referencedDeclaration":698,"src":"3387:21:14"},"referencedDeclaration":698,"src":"3387:21:14","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$698_storage_ptr","typeString":"struct RevocationRequestData"}},"id":725,"nodeType":"ArrayTypeName","src":"3387:23:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$698_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"}],"name":"MultiRevocationRequest","nameLocation":"3298:22:14","nodeType":"StructDefinition","scope":932,"src":"3291:171:14","visibility":"public"},{"canonicalName":"MultiDelegatedRevocationRequest","documentation":{"id":728,"nodeType":"StructuredDocumentation","src":"3464:96:14","text":"@notice A struct representing the full arguments of the delegated multi revocation request."},"id":743,"members":[{"constant":false,"id":730,"mutability":"mutable","name":"schema","nameLocation":"3613:6:14","nodeType":"VariableDeclaration","scope":743,"src":"3605:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":729,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3605:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"data","nameLocation":"3689:4:14","nodeType":"VariableDeclaration","scope":743,"src":"3665:28:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$698_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":732,"nodeType":"UserDefinedTypeName","pathNode":{"id":731,"name":"RevocationRequestData","nameLocations":["3665:21:14"],"nodeType":"IdentifierPath","referencedDeclaration":698,"src":"3665:21:14"},"referencedDeclaration":698,"src":"3665:21:14","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$698_storage_ptr","typeString":"struct RevocationRequestData"}},"id":733,"nodeType":"ArrayTypeName","src":"3665:23:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$698_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":738,"mutability":"mutable","name":"signatures","nameLocation":"3756:10:14","nodeType":"VariableDeclaration","scope":743,"src":"3744:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$586_storage_$dyn_storage_ptr","typeString":"struct Signature[]"},"typeName":{"baseType":{"id":736,"nodeType":"UserDefinedTypeName","pathNode":{"id":735,"name":"Signature","nameLocations":["3744:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"3744:9:14"},"referencedDeclaration":586,"src":"3744:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$586_storage_ptr","typeString":"struct Signature"}},"id":737,"nodeType":"ArrayTypeName","src":"3744:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$586_storage_$dyn_storage_ptr","typeString":"struct Signature[]"}},"visibility":"internal"},{"constant":false,"id":740,"mutability":"mutable","name":"revoker","nameLocation":"3891:7:14","nodeType":"VariableDeclaration","scope":743,"src":"3883:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"3883:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":742,"mutability":"mutable","name":"deadline","nameLocation":"3936:8:14","nodeType":"VariableDeclaration","scope":743,"src":"3929:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":741,"name":"uint64","nodeType":"ElementaryTypeName","src":"3929:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"MultiDelegatedRevocationRequest","nameLocation":"3567:31:14","nodeType":"StructDefinition","scope":932,"src":"3560:429:14","visibility":"public"},{"abstract":false,"baseContracts":[{"baseName":{"id":745,"name":"ISemver","nameLocations":["4083:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":994,"src":"4083:7:14"},"id":746,"nodeType":"InheritanceSpecifier","src":"4083:7:14"}],"canonicalName":"IEAS","contractDependencies":[],"contractKind":"interface","documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"3991:74:14","text":"@title IEAS\n @notice EAS - Ethereum Attestation Service interface."},"fullyImplemented":false,"id":931,"linearizedBaseContracts":[931,994],"name":"IEAS","nameLocation":"4075:4:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"4097:260:14","text":"@notice Emitted when an attestation has been made.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param uid The UID the revoked attestation.\n @param schemaUID The UID of the schema."},"eventSelector":"8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b35","id":757,"name":"Attested","nameLocation":"4368:8:14","nodeType":"EventDefinition","parameters":{"id":756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4393:9:14","nodeType":"VariableDeclaration","scope":757,"src":"4377:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"4377:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":751,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4420:8:14","nodeType":"VariableDeclaration","scope":757,"src":"4404:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":750,"name":"address","nodeType":"ElementaryTypeName","src":"4404:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":753,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4438:3:14","nodeType":"VariableDeclaration","scope":757,"src":"4430:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4430:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":755,"indexed":true,"mutability":"mutable","name":"schemaUID","nameLocation":"4459:9:14","nodeType":"VariableDeclaration","scope":757,"src":"4443:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4443:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4376:93:14"},"src":"4362:108:14"},{"anonymous":false,"documentation":{"id":758,"nodeType":"StructuredDocumentation","src":"4476:263:14","text":"@notice Emitted when an attestation has been revoked.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param schemaUID The UID of the schema.\n @param uid The UID the revoked attestation."},"eventSelector":"f930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615","id":768,"name":"Revoked","nameLocation":"4750:7:14","nodeType":"EventDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4774:9:14","nodeType":"VariableDeclaration","scope":768,"src":"4758:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"4758:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":762,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4801:8:14","nodeType":"VariableDeclaration","scope":768,"src":"4785:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"4785:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":764,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4819:3:14","nodeType":"VariableDeclaration","scope":768,"src":"4811:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":763,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4811:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":766,"indexed":true,"mutability":"mutable","name":"schemaUID","nameLocation":"4840:9:14","nodeType":"VariableDeclaration","scope":768,"src":"4824:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":765,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4824:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4757:93:14"},"src":"4744:107:14"},{"anonymous":false,"documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"4857:123:14","text":"@notice Emitted when a data has been timestamped.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f","id":775,"name":"Timestamped","nameLocation":"4991:11:14","nodeType":"EventDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"5019:4:14","nodeType":"VariableDeclaration","scope":775,"src":"5003:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5003:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":773,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"5040:9:14","nodeType":"VariableDeclaration","scope":775,"src":"5025:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":772,"name":"uint64","nodeType":"ElementaryTypeName","src":"5025:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5002:48:14"},"src":"4985:66:14"},{"anonymous":false,"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"5057:170:14","text":"@notice Emitted when a data has been revoked.\n @param revoker The address of the revoker.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a2229","id":784,"name":"RevokedOffchain","nameLocation":"5238:15:14","nodeType":"EventDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"indexed":true,"mutability":"mutable","name":"revoker","nameLocation":"5270:7:14","nodeType":"VariableDeclaration","scope":784,"src":"5254:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"5254:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":780,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"5295:4:14","nodeType":"VariableDeclaration","scope":784,"src":"5279:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":779,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5279:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":782,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"5316:9:14","nodeType":"VariableDeclaration","scope":784,"src":"5301:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":781,"name":"uint64","nodeType":"ElementaryTypeName","src":"5301:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5253:73:14"},"src":"5232:95:14"},{"documentation":{"id":785,"nodeType":"StructuredDocumentation","src":"5333:121:14","text":"@notice Returns the address of the global schema registry.\n @return The address of the global schema registry."},"functionSelector":"f10b5cc8","id":791,"implemented":false,"kind":"function","modifiers":[],"name":"getSchemaRegistry","nameLocation":"5468:17:14","nodeType":"FunctionDefinition","parameters":{"id":786,"nodeType":"ParameterList","parameters":[],"src":"5485:2:14"},"returnParameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":791,"src":"5511:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"},"typeName":{"id":788,"nodeType":"UserDefinedTypeName","pathNode":{"id":787,"name":"ISchemaRegistry","nameLocations":["5511:15:14"],"nodeType":"IdentifierPath","referencedDeclaration":984,"src":"5511:15:14"},"referencedDeclaration":984,"src":"5511:15:14","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"visibility":"internal"}],"src":"5510:17:14"},"scope":931,"src":"5459:69:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":792,"nodeType":"StructuredDocumentation","src":"5534:665:14","text":"@notice Attests to a specific schema.\n @param request The arguments of the attestation request.\n @return The UID of the new attestation.\n Example:\n     attest({\n         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n         data: {\n             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n             expirationTime: 0,\n             revocable: true,\n             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n             data: \"0xF00D\",\n             value: 0\n         }\n     })"},"functionSelector":"f17325e7","id":800,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"6213:6:14","nodeType":"FunctionDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"request","nameLocation":"6248:7:14","nodeType":"VariableDeclaration","scope":800,"src":"6220:35:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_calldata_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":794,"nodeType":"UserDefinedTypeName","pathNode":{"id":793,"name":"AttestationRequest","nameLocations":["6220:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":654,"src":"6220:18:14"},"referencedDeclaration":654,"src":"6220:18:14","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"}],"src":"6219:37:14"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":800,"src":"6283:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6283:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6282:9:14"},"scope":931,"src":"6204:88:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"6298:1004:14","text":"@notice Attests to a specific schema via the provided ECDSA signature.\n @param delegatedRequest The arguments of the delegated attestation request.\n @return The UID of the new attestation.\n Example:\n     attestByDelegation({\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: {\n             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n             expirationTime: 1673891048,\n             revocable: true,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x1234',\n             value: 0\n         },\n         signature: {\n             v: 28,\n             r: '0x148c...b25b',\n             s: '0x5a72...be22'\n         },\n         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n         deadline: 1673891048\n     })"},"functionSelector":"3c042715","id":809,"implemented":false,"kind":"function","modifiers":[],"name":"attestByDelegation","nameLocation":"7316:18:14","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"delegatedRequest","nameLocation":"7381:16:14","nodeType":"VariableDeclaration","scope":809,"src":"7344:53:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$668_calldata_ptr","typeString":"struct DelegatedAttestationRequest"},"typeName":{"id":803,"nodeType":"UserDefinedTypeName","pathNode":{"id":802,"name":"DelegatedAttestationRequest","nameLocations":["7344:27:14"],"nodeType":"IdentifierPath","referencedDeclaration":668,"src":"7344:27:14"},"referencedDeclaration":668,"src":"7344:27:14","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$668_storage_ptr","typeString":"struct DelegatedAttestationRequest"}},"visibility":"internal"}],"src":"7334:69:14"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":809,"src":"7430:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":806,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7430:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7429:9:14"},"scope":931,"src":"7307:132:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"7445:1656:14","text":"@notice Attests to multiple schemas.\n @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n     schema ids to benefit from the best batching optimization.\n @return The UIDs of the new attestations.\n Example:\n     multiAttest([{\n         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n         data: [{\n             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n             expirationTime: 1673891048,\n             revocable: true,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x1234',\n             value: 1000\n         },\n         {\n             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n             expirationTime: 0,\n             revocable: false,\n             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n             data: '0x00',\n             value: 0\n         }],\n     },\n     {\n         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n         data: [{\n             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n             expirationTime: 0,\n             revocable: true,\n             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n             data: '0x12345678',\n             value: 0\n         },\n     }])"},"functionSelector":"44adc90e","id":820,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"9115:11:14","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"multiRequests","nameLocation":"9162:13:14","nodeType":"VariableDeclaration","scope":820,"src":"9127:48:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$676_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiAttestationRequest[]"},"typeName":{"baseType":{"id":812,"nodeType":"UserDefinedTypeName","pathNode":{"id":811,"name":"MultiAttestationRequest","nameLocations":["9127:23:14"],"nodeType":"IdentifierPath","referencedDeclaration":676,"src":"9127:23:14"},"referencedDeclaration":676,"src":"9127:23:14","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$676_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":813,"nodeType":"ArrayTypeName","src":"9127:25:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$676_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}},"visibility":"internal"}],"src":"9126:50:14"},"returnParameters":{"id":819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":820,"src":"9203:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":816,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9203:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":817,"nodeType":"ArrayTypeName","src":"9203:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9202:18:14"},"scope":931,"src":"9106:115:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"9227:1642:14","text":"@notice Attests to multiple schemas using via provided ECDSA signatures.\n @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     grouped by distinct schema ids to benefit from the best batching optimization.\n @return The UIDs of the new attestations.\n Example:\n     multiAttestByDelegation([{\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: [{\n             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n             expirationTime: 1673891048,\n             revocable: true,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x1234',\n             value: 0\n         },\n         {\n             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n             expirationTime: 0,\n             revocable: false,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x00',\n             value: 0\n         }],\n         signatures: [{\n             v: 28,\n             r: '0x148c...b25b',\n             s: '0x5a72...be22'\n         },\n         {\n             v: 28,\n             r: '0x487s...67bb',\n             s: '0x12ad...2366'\n         }],\n         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n         deadline: 1673891048\n     }])"},"functionSelector":"95411525","id":831,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttestByDelegation","nameLocation":"10883:23:14","nodeType":"FunctionDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"10960:22:14","nodeType":"VariableDeclaration","scope":831,"src":"10916:66:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$692_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"},"typeName":{"baseType":{"id":823,"nodeType":"UserDefinedTypeName","pathNode":{"id":822,"name":"MultiDelegatedAttestationRequest","nameLocations":["10916:32:14"],"nodeType":"IdentifierPath","referencedDeclaration":692,"src":"10916:32:14"},"referencedDeclaration":692,"src":"10916:32:14","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedAttestationRequest_$692_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest"}},"id":824,"nodeType":"ArrayTypeName","src":"10916:34:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$692_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"}},"visibility":"internal"}],"src":"10906:82:14"},"returnParameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":831,"src":"11015:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11015:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":828,"nodeType":"ArrayTypeName","src":"11015:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"11014:18:14"},"scope":931,"src":"10874:159:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"11039:450:14","text":"@notice Revokes an existing attestation to a specific schema.\n @param request The arguments of the revocation request.\n Example:\n     revoke({\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: {\n             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n             value: 0\n         }\n     })"},"functionSelector":"46926267","id":838,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"11503:6:14","nodeType":"FunctionDefinition","parameters":{"id":836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":835,"mutability":"mutable","name":"request","nameLocation":"11537:7:14","nodeType":"VariableDeclaration","scope":838,"src":"11510:34:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$705_calldata_ptr","typeString":"struct RevocationRequest"},"typeName":{"id":834,"nodeType":"UserDefinedTypeName","pathNode":{"id":833,"name":"RevocationRequest","nameLocations":["11510:17:14"],"nodeType":"IdentifierPath","referencedDeclaration":705,"src":"11510:17:14"},"referencedDeclaration":705,"src":"11510:17:14","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$705_storage_ptr","typeString":"struct RevocationRequest"}},"visibility":"internal"}],"src":"11509:36:14"},"returnParameters":{"id":837,"nodeType":"ParameterList","parameters":[],"src":"11562:0:14"},"scope":931,"src":"11494:69:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":839,"nodeType":"StructuredDocumentation","src":"11569:777:14","text":"@notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n @param delegatedRequest The arguments of the delegated revocation request.\n Example:\n     revokeByDelegation({\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: {\n             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n             value: 0\n         },\n         signature: {\n             v: 27,\n             r: '0xb593...7142',\n             s: '0x0f5b...2cce'\n         },\n         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n         deadline: 1673891048\n     })"},"functionSelector":"a6d4dbc7","id":845,"implemented":false,"kind":"function","modifiers":[],"name":"revokeByDelegation","nameLocation":"12360:18:14","nodeType":"FunctionDefinition","parameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":842,"mutability":"mutable","name":"delegatedRequest","nameLocation":"12415:16:14","nodeType":"VariableDeclaration","scope":845,"src":"12379:52:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$719_calldata_ptr","typeString":"struct DelegatedRevocationRequest"},"typeName":{"id":841,"nodeType":"UserDefinedTypeName","pathNode":{"id":840,"name":"DelegatedRevocationRequest","nameLocations":["12379:26:14"],"nodeType":"IdentifierPath","referencedDeclaration":719,"src":"12379:26:14"},"referencedDeclaration":719,"src":"12379:26:14","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$719_storage_ptr","typeString":"struct DelegatedRevocationRequest"}},"visibility":"internal"}],"src":"12378:54:14"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[],"src":"12449:0:14"},"scope":931,"src":"12351:99:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":846,"nodeType":"StructuredDocumentation","src":"12456:1039:14","text":"@notice Revokes existing attestations to multiple schemas.\n @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n     schema ids to benefit from the best batching optimization.\n Example:\n     multiRevoke([{\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: [{\n             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n             value: 1000\n         },\n         {\n             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n             value: 0\n         }],\n     },\n     {\n         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n         data: [{\n             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n             value: 0\n         },\n     }])"},"functionSelector":"4cb7e9e5","id":853,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"13509:11:14","nodeType":"FunctionDefinition","parameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"multiRequests","nameLocation":"13555:13:14","nodeType":"VariableDeclaration","scope":853,"src":"13521:47:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$727_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest[]"},"typeName":{"baseType":{"id":848,"nodeType":"UserDefinedTypeName","pathNode":{"id":847,"name":"MultiRevocationRequest","nameLocations":["13521:22:14"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"13521:22:14"},"referencedDeclaration":727,"src":"13521:22:14","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$727_storage_ptr","typeString":"struct MultiRevocationRequest"}},"id":849,"nodeType":"ArrayTypeName","src":"13521:24:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$727_storage_$dyn_storage_ptr","typeString":"struct MultiRevocationRequest[]"}},"visibility":"internal"}],"src":"13520:49:14"},"returnParameters":{"id":852,"nodeType":"ParameterList","parameters":[],"src":"13586:0:14"},"scope":931,"src":"13500:87:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":854,"nodeType":"StructuredDocumentation","src":"13593:1229:14","text":"@notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n     should be grouped by distinct schema ids to benefit from the best batching optimization.\n Example:\n     multiRevokeByDelegation([{\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: [{\n             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n             value: 1000\n         },\n         {\n             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n             value: 0\n         }],\n         signatures: [{\n             v: 28,\n             r: '0x148c...b25b',\n             s: '0x5a72...be22'\n         },\n         {\n             v: 28,\n             r: '0x487s...67bb',\n             s: '0x12ad...2366'\n         }],\n         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n         deadline: 1673891048\n     }])"},"functionSelector":"0eabf660","id":861,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeByDelegation","nameLocation":"14836:23:14","nodeType":"FunctionDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":858,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"14912:22:14","nodeType":"VariableDeclaration","scope":861,"src":"14869:65:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$743_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"},"typeName":{"baseType":{"id":856,"nodeType":"UserDefinedTypeName","pathNode":{"id":855,"name":"MultiDelegatedRevocationRequest","nameLocations":["14869:31:14"],"nodeType":"IdentifierPath","referencedDeclaration":743,"src":"14869:31:14"},"referencedDeclaration":743,"src":"14869:31:14","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedRevocationRequest_$743_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest"}},"id":857,"nodeType":"ArrayTypeName","src":"14869:33:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$743_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"}},"visibility":"internal"}],"src":"14859:81:14"},"returnParameters":{"id":860,"nodeType":"ParameterList","parameters":[],"src":"14957:0:14"},"scope":931,"src":"14827:131:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"14964:154:14","text":"@notice Timestamps the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"4d003070","id":869,"implemented":false,"kind":"function","modifiers":[],"name":"timestamp","nameLocation":"15132:9:14","nodeType":"FunctionDefinition","parameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"data","nameLocation":"15150:4:14","nodeType":"VariableDeclaration","scope":869,"src":"15142:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":863,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15142:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15141:14:14"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":869,"src":"15174:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":866,"name":"uint64","nodeType":"ElementaryTypeName","src":"15174:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15173:8:14"},"scope":931,"src":"15123:59:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"15188:163:14","text":"@notice Timestamps the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"e71ff365","id":878,"implemented":false,"kind":"function","modifiers":[],"name":"multiTimestamp","nameLocation":"15365:14:14","nodeType":"FunctionDefinition","parameters":{"id":874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"data","nameLocation":"15399:4:14","nodeType":"VariableDeclaration","scope":878,"src":"15380:23:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":871,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15380:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":872,"nodeType":"ArrayTypeName","src":"15380:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"15379:25:14"},"returnParameters":{"id":877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":878,"src":"15423:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":875,"name":"uint64","nodeType":"ElementaryTypeName","src":"15423:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15422:8:14"},"scope":931,"src":"15356:75:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":879,"nodeType":"StructuredDocumentation","src":"15437:147:14","text":"@notice Revokes the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"cf190f34","id":886,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOffchain","nameLocation":"15598:14:14","nodeType":"FunctionDefinition","parameters":{"id":882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"data","nameLocation":"15621:4:14","nodeType":"VariableDeclaration","scope":886,"src":"15613:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":880,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15613:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15612:14:14"},"returnParameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":886,"src":"15645:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":883,"name":"uint64","nodeType":"ElementaryTypeName","src":"15645:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15644:8:14"},"scope":931,"src":"15589:64:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":887,"nodeType":"StructuredDocumentation","src":"15659:156:14","text":"@notice Revokes the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"13893f61","id":895,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeOffchain","nameLocation":"15829:19:14","nodeType":"FunctionDefinition","parameters":{"id":891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"data","nameLocation":"15868:4:14","nodeType":"VariableDeclaration","scope":895,"src":"15849:23:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":888,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15849:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":889,"nodeType":"ArrayTypeName","src":"15849:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"15848:25:14"},"returnParameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":895,"src":"15892:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":892,"name":"uint64","nodeType":"ElementaryTypeName","src":"15892:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15891:8:14"},"scope":931,"src":"15820:80:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":896,"nodeType":"StructuredDocumentation","src":"15906:156:14","text":"@notice Returns an existing attestation by UID.\n @param uid The UID of the attestation to retrieve.\n @return The attestation data members."},"functionSelector":"a3112a64","id":904,"implemented":false,"kind":"function","modifiers":[],"name":"getAttestation","nameLocation":"16076:14:14","nodeType":"FunctionDefinition","parameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"mutability":"mutable","name":"uid","nameLocation":"16099:3:14","nodeType":"VariableDeclaration","scope":904,"src":"16091:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":897,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16091:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16090:13:14"},"returnParameters":{"id":903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":904,"src":"16127:18:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":901,"nodeType":"UserDefinedTypeName","pathNode":{"id":900,"name":"Attestation","nameLocations":["16127:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":608,"src":"16127:11:14"},"referencedDeclaration":608,"src":"16127:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"16126:20:14"},"scope":931,"src":"16067:80:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":905,"nodeType":"StructuredDocumentation","src":"16153:155:14","text":"@notice Checks whether an attestation exists.\n @param uid The UID of the attestation to retrieve.\n @return Whether an attestation exists."},"functionSelector":"e30bb563","id":912,"implemented":false,"kind":"function","modifiers":[],"name":"isAttestationValid","nameLocation":"16322:18:14","nodeType":"FunctionDefinition","parameters":{"id":908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":907,"mutability":"mutable","name":"uid","nameLocation":"16349:3:14","nodeType":"VariableDeclaration","scope":912,"src":"16341:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":906,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16341:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16340:13:14"},"returnParameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":912,"src":"16377:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":909,"name":"bool","nodeType":"ElementaryTypeName","src":"16377:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16376:6:14"},"scope":931,"src":"16313:70:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":913,"nodeType":"StructuredDocumentation","src":"16389:179:14","text":"@notice Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"d45c4435","id":920,"implemented":false,"kind":"function","modifiers":[],"name":"getTimestamp","nameLocation":"16582:12:14","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":915,"mutability":"mutable","name":"data","nameLocation":"16603:4:14","nodeType":"VariableDeclaration","scope":920,"src":"16595:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":914,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16595:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16594:14:14"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":920,"src":"16632:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":917,"name":"uint64","nodeType":"ElementaryTypeName","src":"16632:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"16631:8:14"},"scope":931,"src":"16573:67:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"16646:179:14","text":"@notice Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"b469318d","id":930,"implemented":false,"kind":"function","modifiers":[],"name":"getRevokeOffchain","nameLocation":"16839:17:14","nodeType":"FunctionDefinition","parameters":{"id":926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"revoker","nameLocation":"16865:7:14","nodeType":"VariableDeclaration","scope":930,"src":"16857:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":922,"name":"address","nodeType":"ElementaryTypeName","src":"16857:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":925,"mutability":"mutable","name":"data","nameLocation":"16882:4:14","nodeType":"VariableDeclaration","scope":930,"src":"16874:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":924,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16874:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16856:31:14"},"returnParameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":930,"src":"16911:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":927,"name":"uint64","nodeType":"ElementaryTypeName","src":"16911:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"16910:8:14"},"scope":931,"src":"16830:89:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":932,"src":"4065:12856:14","usedErrors":[],"usedEvents":[757,768,775,784]}],"src":"33:16889:14"},"id":14},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","exportedSymbols":{"ISchemaRegistry":[984],"ISchemaResolver":[1054],"ISemver":[994],"SchemaRecord":[948]},"id":985,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":933,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:15"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol","file":"./ISemver.sol","id":935,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":985,"sourceUnit":995,"src":"58:40:15","symbolAliases":[{"foreign":{"id":934,"name":"ISemver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"67:7:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","file":"./resolver/ISchemaResolver.sol","id":937,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":985,"sourceUnit":1055,"src":"100:65:15","symbolAliases":[{"foreign":{"id":936,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"109:15:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"SchemaRecord","documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"167:67:15","text":"@notice A struct representing a record for a submitted schema."},"id":948,"members":[{"constant":false,"id":940,"mutability":"mutable","name":"uid","nameLocation":"268:3:15","nodeType":"VariableDeclaration","scope":948,"src":"260:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"260:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":943,"mutability":"mutable","name":"resolver","nameLocation":"333:8:15","nodeType":"VariableDeclaration","scope":948,"src":"317:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"},"typeName":{"id":942,"nodeType":"UserDefinedTypeName","pathNode":{"id":941,"name":"ISchemaResolver","nameLocations":["317:15:15"],"nodeType":"IdentifierPath","referencedDeclaration":1054,"src":"317:15:15"},"referencedDeclaration":1054,"src":"317:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":945,"mutability":"mutable","name":"revocable","nameLocation":"381:9:15","nodeType":"VariableDeclaration","scope":948,"src":"376:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":944,"name":"bool","nodeType":"ElementaryTypeName","src":"376:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":947,"mutability":"mutable","name":"schema","nameLocation":"456:6:15","nodeType":"VariableDeclaration","scope":948,"src":"449:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":946,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"SchemaRecord","nameLocation":"241:12:15","nodeType":"StructDefinition","scope":985,"src":"234:285:15","visibility":"public"},{"abstract":false,"baseContracts":[{"baseName":{"id":950,"name":"ISemver","nameLocations":["680:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":994,"src":"680:7:15"},"id":951,"nodeType":"InheritanceSpecifier","src":"680:7:15"}],"canonicalName":"ISchemaRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":949,"nodeType":"StructuredDocumentation","src":"521:130:15","text":"@title ISchemaRegistry\n @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol."},"fullyImplemented":false,"id":984,"linearizedBaseContracts":[984,994],"name":"ISchemaRegistry","nameLocation":"661:15:15","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"694:213:15","text":"@notice Emitted when a new schema has been registered\n @param uid The schema UID.\n @param registerer The address of the account used to register the schema.\n @param schema The schema data."},"eventSelector":"d0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e","id":961,"name":"Registered","nameLocation":"918:10:15","nodeType":"EventDefinition","parameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"indexed":true,"mutability":"mutable","name":"uid","nameLocation":"945:3:15","nodeType":"VariableDeclaration","scope":961,"src":"929:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":953,"name":"bytes32","nodeType":"ElementaryTypeName","src":"929:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":956,"indexed":true,"mutability":"mutable","name":"registerer","nameLocation":"966:10:15","nodeType":"VariableDeclaration","scope":961,"src":"950:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":959,"indexed":false,"mutability":"mutable","name":"schema","nameLocation":"991:6:15","nodeType":"VariableDeclaration","scope":961,"src":"978:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$948_memory_ptr","typeString":"struct SchemaRecord"},"typeName":{"id":958,"nodeType":"UserDefinedTypeName","pathNode":{"id":957,"name":"SchemaRecord","nameLocations":["978:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"978:12:15"},"referencedDeclaration":948,"src":"978:12:15","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$948_storage_ptr","typeString":"struct SchemaRecord"}},"visibility":"internal"}],"src":"928:70:15"},"src":"912:87:15"},{"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"1005:262:15","text":"@notice Submits and reserves a new schema\n @param schema The schema data schema.\n @param resolver An optional schema resolver.\n @param revocable Whether the schema allows revocations explicitly.\n @return The UID of the new schema."},"functionSelector":"60d7a278","id":974,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"1281:8:15","nodeType":"FunctionDefinition","parameters":{"id":970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"schema","nameLocation":"1306:6:15","nodeType":"VariableDeclaration","scope":974,"src":"1290:22:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":963,"name":"string","nodeType":"ElementaryTypeName","src":"1290:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":967,"mutability":"mutable","name":"resolver","nameLocation":"1330:8:15","nodeType":"VariableDeclaration","scope":974,"src":"1314:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"},"typeName":{"id":966,"nodeType":"UserDefinedTypeName","pathNode":{"id":965,"name":"ISchemaResolver","nameLocations":["1314:15:15"],"nodeType":"IdentifierPath","referencedDeclaration":1054,"src":"1314:15:15"},"referencedDeclaration":1054,"src":"1314:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"revocable","nameLocation":"1345:9:15","nodeType":"VariableDeclaration","scope":974,"src":"1340:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":968,"name":"bool","nodeType":"ElementaryTypeName","src":"1340:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1289:66:15"},"returnParameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":974,"src":"1374:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":971,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1374:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1373:9:15"},"scope":984,"src":"1272:111:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":975,"nodeType":"StructuredDocumentation","src":"1389:140:15","text":"@notice Returns an existing schema by UID\n @param uid The UID of the schema to retrieve.\n @return The schema data members."},"functionSelector":"a2ea7c6e","id":983,"implemented":false,"kind":"function","modifiers":[],"name":"getSchema","nameLocation":"1543:9:15","nodeType":"FunctionDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":977,"mutability":"mutable","name":"uid","nameLocation":"1561:3:15","nodeType":"VariableDeclaration","scope":983,"src":"1553:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":976,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1553:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1552:13:15"},"returnParameters":{"id":982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":983,"src":"1589:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$948_memory_ptr","typeString":"struct SchemaRecord"},"typeName":{"id":980,"nodeType":"UserDefinedTypeName","pathNode":{"id":979,"name":"SchemaRecord","nameLocations":["1589:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"1589:12:15"},"referencedDeclaration":948,"src":"1589:12:15","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$948_storage_ptr","typeString":"struct SchemaRecord"}},"visibility":"internal"}],"src":"1588:21:15"},"scope":984,"src":"1534:76:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":985,"src":"651:961:15","usedErrors":[],"usedEvents":[961]}],"src":"33:1580:15"},"id":15},"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol","exportedSymbols":{"ISemver":[994]},"id":995,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":986,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"ISemver","contractDependencies":[],"contractKind":"interface","documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"58:51:16","text":"@title ISemver\n @notice A semver interface."},"fullyImplemented":false,"id":994,"linearizedBaseContracts":[994],"name":"ISemver","nameLocation":"119:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"133:106:16","text":"@notice Returns the full semver contract version.\n @return Semver contract version as a string."},"functionSelector":"54fd4d50","id":993,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"253:7:16","nodeType":"FunctionDefinition","parameters":{"id":989,"nodeType":"ParameterList","parameters":[],"src":"260:2:16"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":993,"src":"286:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":990,"name":"string","nodeType":"ElementaryTypeName","src":"286:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"285:15:16"},"scope":994,"src":"244:57:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":995,"src":"109:194:16","usedErrors":[],"usedEvents":[]}],"src":"33:271:16"},"id":16},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","exportedSymbols":{"Attestation":[608],"ISchemaResolver":[1054],"ISemver":[994]},"id":1055,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":996,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:17"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol","file":"../ISemver.sol","id":998,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1055,"sourceUnit":995,"src":"58:41:17","symbolAliases":[{"foreign":{"id":997,"name":"ISemver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"67:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"../Common.sol","id":1000,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1055,"sourceUnit":625,"src":"100:44:17","symbolAliases":[{"foreign":{"id":999,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"109:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1002,"name":"ISemver","nameLocations":["260:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":994,"src":"260:7:17"},"id":1003,"nodeType":"InheritanceSpecifier","src":"260:7:17"}],"canonicalName":"ISchemaResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1001,"nodeType":"StructuredDocumentation","src":"146:85:17","text":"@title ISchemaResolver\n @notice The interface of an optional schema resolver."},"fullyImplemented":false,"id":1054,"linearizedBaseContracts":[1054,994],"name":"ISchemaResolver","nameLocation":"241:15:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1004,"nodeType":"StructuredDocumentation","src":"274:112:17","text":"@notice Checks if the resolver can be sent ETH.\n @return Whether the resolver supports ETH transfers."},"functionSelector":"ce46e046","id":1009,"implemented":false,"kind":"function","modifiers":[],"name":"isPayable","nameLocation":"400:9:17","nodeType":"FunctionDefinition","parameters":{"id":1005,"nodeType":"ParameterList","parameters":[],"src":"409:2:17"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1009,"src":"435:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1006,"name":"bool","nodeType":"ElementaryTypeName","src":"435:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"434:6:17"},"scope":1054,"src":"391:50:17","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":1010,"nodeType":"StructuredDocumentation","src":"447:167:17","text":"@notice Processes an attestation and verifies whether it's valid.\n @param attestation The new attestation.\n @return Whether the attestation is valid."},"functionSelector":"e60c3505","id":1018,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"628:6:17","nodeType":"FunctionDefinition","parameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"attestation","nameLocation":"656:11:17","nodeType":"VariableDeclaration","scope":1018,"src":"635:32:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":1012,"nodeType":"UserDefinedTypeName","pathNode":{"id":1011,"name":"Attestation","nameLocations":["635:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":608,"src":"635:11:17"},"referencedDeclaration":608,"src":"635:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"634:34:17"},"returnParameters":{"id":1017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1018,"src":"695:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1015,"name":"bool","nodeType":"ElementaryTypeName","src":"695:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"694:6:17"},"scope":1054,"src":"619:82:17","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"707:268:17","text":"@notice Processes multiple attestations and verifies whether they are valid.\n @param attestations The new attestations.\n @param values Explicit ETH amounts which were sent with each attestation.\n @return Whether all the attestations are valid."},"functionSelector":"91db0b7e","id":1031,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"989:11:17","nodeType":"FunctionDefinition","parameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"attestations","nameLocation":"1033:12:17","nodeType":"VariableDeclaration","scope":1031,"src":"1010:35:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$608_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":1021,"nodeType":"UserDefinedTypeName","pathNode":{"id":1020,"name":"Attestation","nameLocations":["1010:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":608,"src":"1010:11:17"},"referencedDeclaration":608,"src":"1010:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_storage_ptr","typeString":"struct Attestation"}},"id":1022,"nodeType":"ArrayTypeName","src":"1010:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$608_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":1026,"mutability":"mutable","name":"values","nameLocation":"1074:6:17","nodeType":"VariableDeclaration","scope":1031,"src":"1055:25:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1024,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1025,"nodeType":"ArrayTypeName","src":"1055:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1000:86:17"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1031,"src":"1113:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1028,"name":"bool","nodeType":"ElementaryTypeName","src":"1113:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1112:6:17"},"scope":1054,"src":"980:139:17","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"1125:205:17","text":"@notice Processes an attestation revocation and verifies if it can be revoked.\n @param attestation The existing attestation to be revoked.\n @return Whether the attestation can be revoked."},"functionSelector":"e49617e1","id":1040,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"1344:6:17","nodeType":"FunctionDefinition","parameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"attestation","nameLocation":"1372:11:17","nodeType":"VariableDeclaration","scope":1040,"src":"1351:32:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":1034,"nodeType":"UserDefinedTypeName","pathNode":{"id":1033,"name":"Attestation","nameLocations":["1351:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":608,"src":"1351:11:17"},"referencedDeclaration":608,"src":"1351:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"1350:34:17"},"returnParameters":{"id":1039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1038,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1040,"src":"1411:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1037,"name":"bool","nodeType":"ElementaryTypeName","src":"1411:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1410:6:17"},"scope":1054,"src":"1335:82:17","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1041,"nodeType":"StructuredDocumentation","src":"1423:297:17","text":"@notice Processes revocation of multiple attestation and verifies they can be revoked.\n @param attestations The existing attestations to be revoked.\n @param values Explicit ETH amounts which were sent with each revocation.\n @return Whether the attestations can be revoked."},"functionSelector":"88e5b2d9","id":1053,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"1734:11:17","nodeType":"FunctionDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"attestations","nameLocation":"1778:12:17","nodeType":"VariableDeclaration","scope":1053,"src":"1755:35:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$608_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":1043,"nodeType":"UserDefinedTypeName","pathNode":{"id":1042,"name":"Attestation","nameLocations":["1755:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":608,"src":"1755:11:17"},"referencedDeclaration":608,"src":"1755:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_storage_ptr","typeString":"struct Attestation"}},"id":1044,"nodeType":"ArrayTypeName","src":"1755:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$608_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"values","nameLocation":"1819:6:17","nodeType":"VariableDeclaration","scope":1053,"src":"1800:25:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1046,"name":"uint256","nodeType":"ElementaryTypeName","src":"1800:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1047,"nodeType":"ArrayTypeName","src":"1800:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1745:86:17"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1053,"src":"1858:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1050,"name":"bool","nodeType":"ElementaryTypeName","src":"1858:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1857:6:17"},"scope":1054,"src":"1725:139:17","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1055,"src":"231:1635:17","usedErrors":[],"usedEvents":[]}],"src":"33:1834:17"},"id":17},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[1417],"ContextUpgradeable":[1899],"ERC165Upgradeable":[1939],"IAccessControl":[2022],"Initializable":[1671]},"id":1418,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1056,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:18"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"@openzeppelin/contracts/access/IAccessControl.sol","id":1058,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1418,"sourceUnit":2023,"src":"134:81:18","symbolAliases":[{"foreign":{"id":1057,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"142:14:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":1060,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1418,"sourceUnit":1900,"src":"216:67:18","symbolAliases":[{"foreign":{"id":1059,"name":"ContextUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"224:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":1062,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1418,"sourceUnit":1940,"src":"284:79:18","symbolAliases":[{"foreign":{"id":1061,"name":"ERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"292:17:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1064,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1418,"sourceUnit":1672,"src":"364:63:18","symbolAliases":[{"foreign":{"id":1063,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"372:13:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1066,"name":"Initializable","nameLocations":["2136:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":1671,"src":"2136:13:18"},"id":1067,"nodeType":"InheritanceSpecifier","src":"2136:13:18"},{"baseName":{"id":1068,"name":"ContextUpgradeable","nameLocations":["2151:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":1899,"src":"2151:18:18"},"id":1069,"nodeType":"InheritanceSpecifier","src":"2151:18:18"},{"baseName":{"id":1070,"name":"IAccessControl","nameLocations":["2171:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":2022,"src":"2171:14:18"},"id":1071,"nodeType":"InheritanceSpecifier","src":"2171:14:18"},{"baseName":{"id":1072,"name":"ERC165Upgradeable","nameLocations":["2187:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":1939,"src":"2187:17:18"},"id":1073,"nodeType":"InheritanceSpecifier","src":"2187:17:18"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1065,"nodeType":"StructuredDocumentation","src":"429:1660:18","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":1417,"linearizedBaseContracts":[1417,1939,2975,2022,1899,1671],"name":"AccessControlUpgradeable","nameLocation":"2108:24:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControlUpgradeable.RoleData","id":1080,"members":[{"constant":false,"id":1077,"mutability":"mutable","name":"hasRole","nameLocation":"2270:7:18","nodeType":"VariableDeclaration","scope":1080,"src":"2237:40:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":1076,"keyName":"account","keyNameLocation":"2253:7:18","keyType":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"2245:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2237:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1075,"name":"bool","nodeType":"ElementaryTypeName","src":"2264:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"adminRole","nameLocation":"2295:9:18","nodeType":"VariableDeclaration","scope":1080,"src":"2287:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2287:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2218:8:18","nodeType":"StructDefinition","scope":1417,"src":"2211:100:18","visibility":"public"},{"constant":true,"functionSelector":"a217fddf","id":1083,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2341:18:18","nodeType":"VariableDeclaration","scope":1417,"src":"2317:49:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2317:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2362:4:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"canonicalName":"AccessControlUpgradeable.AccessControlStorage","documentation":{"id":1084,"nodeType":"StructuredDocumentation","src":"2374:71:18","text":"@custom:storage-location erc7201:openzeppelin.storage.AccessControl"},"id":1090,"members":[{"constant":false,"id":1089,"mutability":"mutable","name":"_roles","nameLocation":"2522:6:18","nodeType":"VariableDeclaration","scope":1090,"src":"2488:40:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1080_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":1088,"keyName":"role","keyNameLocation":"2504:4:18","keyType":{"id":1085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2496:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2488:33:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1080_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1087,"nodeType":"UserDefinedTypeName","pathNode":{"id":1086,"name":"RoleData","nameLocations":["2512:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1080,"src":"2512:8:18"},"referencedDeclaration":1080,"src":"2512:8:18","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1080_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"internal"}],"name":"AccessControlStorage","nameLocation":"2457:20:18","nodeType":"StructDefinition","scope":1417,"src":"2450:85:18","visibility":"public"},{"constant":true,"id":1093,"mutability":"constant","name":"AccessControlStorageLocation","nameLocation":"2683:28:18","nodeType":"VariableDeclaration","scope":1417,"src":"2658:122:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1091,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2658:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830326464376263376465633464636565646461373735653538646435343165303861313136633663353338313563306264303238313932663762363236383030","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2714:66:18","typeDescriptions":{"typeIdentifier":"t_rational_1295953201772911215391058989745868821651057887752387839782086074958115661824_by_1","typeString":"int_const 1295...(68 digits omitted)...1824"},"value":"0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800"},"visibility":"private"},{"body":{"id":1100,"nodeType":"Block","src":"2877:87:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2896:62:18","statements":[{"nodeType":"YulAssignment","src":"2910:38:18","value":{"name":"AccessControlStorageLocation","nodeType":"YulIdentifier","src":"2920:28:18"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"2910:6:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1097,"isOffset":false,"isSlot":true,"src":"2910:6:18","suffix":"slot","valueSize":1},{"declaration":1093,"isOffset":false,"isSlot":false,"src":"2920:28:18","valueSize":1}],"id":1099,"nodeType":"InlineAssembly","src":"2887:71:18"}]},"id":1101,"implemented":true,"kind":"function","modifiers":[],"name":"_getAccessControlStorage","nameLocation":"2796:24:18","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[],"src":"2820:2:18"},"returnParameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1097,"mutability":"mutable","name":"$","nameLocation":"2874:1:18","nodeType":"VariableDeclaration","scope":1101,"src":"2845:30:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":1096,"nodeType":"UserDefinedTypeName","pathNode":{"id":1095,"name":"AccessControlStorage","nameLocations":["2845:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"2845:20:18"},"referencedDeclaration":1090,"src":"2845:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"src":"2844:32:18"},"scope":1417,"src":"2787:177:18","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1111,"nodeType":"Block","src":"3181:44:18","statements":[{"expression":{"arguments":[{"id":1107,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"3202:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1106,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[1184,1205],"referencedDeclaration":1184,"src":"3191:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3191:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"ExpressionStatement","src":"3191:16:18"},{"id":1110,"nodeType":"PlaceholderStatement","src":"3217:1:18"}]},"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"2970:174:18","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":1112,"name":"onlyRole","nameLocation":"3158:8:18","nodeType":"ModifierDefinition","parameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"role","nameLocation":"3175:4:18","nodeType":"VariableDeclaration","scope":1112,"src":"3167:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3167:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3166:14:18"},"src":"3149:76:18","virtual":false,"visibility":"internal"},{"body":{"id":1117,"nodeType":"Block","src":"3289:7:18","statements":[]},"id":1118,"implemented":true,"kind":"function","modifiers":[{"id":1115,"kind":"modifierInvocation","modifierName":{"id":1114,"name":"onlyInitializing","nameLocations":["3272:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"3272:16:18"},"nodeType":"ModifierInvocation","src":"3272:16:18"}],"name":"__AccessControl_init","nameLocation":"3240:20:18","nodeType":"FunctionDefinition","parameters":{"id":1113,"nodeType":"ParameterList","parameters":[],"src":"3260:2:18"},"returnParameters":{"id":1116,"nodeType":"ParameterList","parameters":[],"src":"3289:0:18"},"scope":1417,"src":"3231:65:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1123,"nodeType":"Block","src":"3370:7:18","statements":[]},"id":1124,"implemented":true,"kind":"function","modifiers":[{"id":1121,"kind":"modifierInvocation","modifierName":{"id":1120,"name":"onlyInitializing","nameLocations":["3353:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"3353:16:18"},"nodeType":"ModifierInvocation","src":"3353:16:18"}],"name":"__AccessControl_init_unchained","nameLocation":"3311:30:18","nodeType":"FunctionDefinition","parameters":{"id":1119,"nodeType":"ParameterList","parameters":[],"src":"3341:2:18"},"returnParameters":{"id":1122,"nodeType":"ParameterList","parameters":[],"src":"3370:0:18"},"scope":1417,"src":"3302:75:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1938],"body":{"id":1145,"nodeType":"Block","src":"3534:111:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1133,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"3551:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1135,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"3571:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$2022_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$2022_$","typeString":"type(contract IAccessControl)"}],"id":1134,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3566:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3566:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$2022","typeString":"type(contract IAccessControl)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3587:11:18","memberName":"interfaceId","nodeType":"MemberAccess","src":"3566:32:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3551:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1141,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"3626:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1139,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3602:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$1417_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3608:17:18","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1938,"src":"3602:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3602:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3551:87:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1132,"id":1144,"nodeType":"Return","src":"3544:94:18"}]},"documentation":{"id":1125,"nodeType":"StructuredDocumentation","src":"3382:56:18","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1146,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3452:17:18","nodeType":"FunctionDefinition","overrides":{"id":1129,"nodeType":"OverrideSpecifier","overrides":[],"src":"3510:8:18"},"parameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"interfaceId","nameLocation":"3477:11:18","nodeType":"VariableDeclaration","scope":1146,"src":"3470:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1126,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3470:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3469:20:18"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1146,"src":"3528:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1130,"name":"bool","nodeType":"ElementaryTypeName","src":"3528:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3527:6:18"},"scope":1417,"src":"3443:202:18","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1989],"body":{"id":1170,"nodeType":"Block","src":"3815:124:18","statements":[{"assignments":[1158],"declarations":[{"constant":false,"id":1158,"mutability":"mutable","name":"$","nameLocation":"3854:1:18","nodeType":"VariableDeclaration","scope":1170,"src":"3825:30:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":1157,"nodeType":"UserDefinedTypeName","pathNode":{"id":1156,"name":"AccessControlStorage","nameLocations":["3825:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"3825:20:18"},"referencedDeclaration":1090,"src":"3825:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":1161,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1159,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"3858:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$1090_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3858:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3825:59:18"},{"expression":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":1162,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"3901:1:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":1163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3903:6:18","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"3901:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1080_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":1165,"indexExpression":{"id":1164,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"3910:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1080_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":1166,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3916:7:18","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":1077,"src":"3901:22:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1168,"indexExpression":{"id":1167,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"3924:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:31:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1155,"id":1169,"nodeType":"Return","src":"3894:38:18"}]},"documentation":{"id":1147,"nodeType":"StructuredDocumentation","src":"3651:76:18","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":1171,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3741:7:18","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"mutability":"mutable","name":"role","nameLocation":"3757:4:18","nodeType":"VariableDeclaration","scope":1171,"src":"3749:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3749:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"account","nameLocation":"3771:7:18","nodeType":"VariableDeclaration","scope":1171,"src":"3763:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1150,"name":"address","nodeType":"ElementaryTypeName","src":"3763:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3748:31:18"},"returnParameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1171,"src":"3809:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1153,"name":"bool","nodeType":"ElementaryTypeName","src":"3809:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3808:6:18"},"scope":1417,"src":"3732:207:18","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1183,"nodeType":"Block","src":"4204:47:18","statements":[{"expression":{"arguments":[{"id":1178,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"4225:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1179,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"4231:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4231:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1177,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[1184,1205],"referencedDeclaration":1205,"src":"4214:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1182,"nodeType":"ExpressionStatement","src":"4214:30:18"}]},"documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"3945:198:18","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":1184,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4157:10:18","nodeType":"FunctionDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"role","nameLocation":"4176:4:18","nodeType":"VariableDeclaration","scope":1184,"src":"4168:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4168:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4167:14:18"},"returnParameters":{"id":1176,"nodeType":"ParameterList","parameters":[],"src":"4204:0:18"},"scope":1417,"src":"4148:103:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1204,"nodeType":"Block","src":"4454:124:18","statements":[{"condition":{"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4468:23:18","subExpression":{"arguments":[{"id":1193,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"4477:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1194,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"4483:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1192,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"4469:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4469:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1203,"nodeType":"IfStatement","src":"4464:108:18","trueBody":{"id":1202,"nodeType":"Block","src":"4493:79:18","statements":[{"errorCall":{"arguments":[{"id":1198,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"4547:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1199,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"4556:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1197,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"4514:32:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4514:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1201,"nodeType":"RevertStatement","src":"4507:54:18"}]}}]},"documentation":{"id":1185,"nodeType":"StructuredDocumentation","src":"4257:119:18","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":1205,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4390:10:18","nodeType":"FunctionDefinition","parameters":{"id":1190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"role","nameLocation":"4409:4:18","nodeType":"VariableDeclaration","scope":1205,"src":"4401:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4401:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1189,"mutability":"mutable","name":"account","nameLocation":"4423:7:18","nodeType":"VariableDeclaration","scope":1205,"src":"4415:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1188,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4400:31:18"},"returnParameters":{"id":1191,"nodeType":"ParameterList","parameters":[],"src":"4454:0:18"},"scope":1417,"src":"4381:197:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1997],"body":{"id":1225,"nodeType":"Block","src":"4833:117:18","statements":[{"assignments":[1215],"declarations":[{"constant":false,"id":1215,"mutability":"mutable","name":"$","nameLocation":"4872:1:18","nodeType":"VariableDeclaration","scope":1225,"src":"4843:30:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":1214,"nodeType":"UserDefinedTypeName","pathNode":{"id":1213,"name":"AccessControlStorage","nameLocations":["4843:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"4843:20:18"},"referencedDeclaration":1090,"src":"4843:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":1218,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1216,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"4876:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$1090_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4876:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4843:59:18"},{"expression":{"expression":{"baseExpression":{"expression":{"id":1219,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"4919:1:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":1220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4921:6:18","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"4919:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1080_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":1222,"indexExpression":{"id":1221,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"4928:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4919:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1080_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":1223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4934:9:18","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":1079,"src":"4919:24:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1212,"id":1224,"nodeType":"Return","src":"4912:31:18"}]},"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"4584:170:18","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":1226,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4768:12:18","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"role","nameLocation":"4789:4:18","nodeType":"VariableDeclaration","scope":1226,"src":"4781:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4781:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4780:14:18"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1226,"src":"4824:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1210,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4824:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4823:9:18"},"scope":1417,"src":"4759:191:18","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2005],"body":{"id":1244,"nodeType":"Block","src":"5340:42:18","statements":[{"expression":{"arguments":[{"id":1240,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"5361:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1241,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"5367:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1239,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"5350:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5350:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1243,"nodeType":"ExpressionStatement","src":"5350:25:18"}]},"documentation":{"id":1227,"nodeType":"StructuredDocumentation","src":"4956:285:18","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":1245,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":1235,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"5333:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1234,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5320:12:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5320:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1237,"kind":"modifierInvocation","modifierName":{"id":1233,"name":"onlyRole","nameLocations":["5311:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1112,"src":"5311:8:18"},"nodeType":"ModifierInvocation","src":"5311:28:18"}],"name":"grantRole","nameLocation":"5255:9:18","nodeType":"FunctionDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"role","nameLocation":"5273:4:18","nodeType":"VariableDeclaration","scope":1245,"src":"5265:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5265:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1231,"mutability":"mutable","name":"account","nameLocation":"5287:7:18","nodeType":"VariableDeclaration","scope":1245,"src":"5279:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"5279:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5264:31:18"},"returnParameters":{"id":1238,"nodeType":"ParameterList","parameters":[],"src":"5340:0:18"},"scope":1417,"src":"5246:136:18","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2013],"body":{"id":1263,"nodeType":"Block","src":"5757:43:18","statements":[{"expression":{"arguments":[{"id":1259,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"5779:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1260,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"5785:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1258,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"5767:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5767:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1262,"nodeType":"ExpressionStatement","src":"5767:26:18"}]},"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"5388:269:18","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":1264,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":1254,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"5750:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1253,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5737:12:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5737:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1256,"kind":"modifierInvocation","modifierName":{"id":1252,"name":"onlyRole","nameLocations":["5728:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1112,"src":"5728:8:18"},"nodeType":"ModifierInvocation","src":"5728:28:18"}],"name":"revokeRole","nameLocation":"5671:10:18","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"role","nameLocation":"5690:4:18","nodeType":"VariableDeclaration","scope":1264,"src":"5682:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5682:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"account","nameLocation":"5704:7:18","nodeType":"VariableDeclaration","scope":1264,"src":"5696:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1249,"name":"address","nodeType":"ElementaryTypeName","src":"5696:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5681:31:18"},"returnParameters":{"id":1257,"nodeType":"ParameterList","parameters":[],"src":"5757:0:18"},"scope":1417,"src":"5662:138:18","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2021],"body":{"id":1286,"nodeType":"Block","src":"6427:166:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1272,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"6441:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1273,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"6463:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6463:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6441:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1280,"nodeType":"IfStatement","src":"6437:102:18","trueBody":{"id":1279,"nodeType":"Block","src":"6477:62:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1276,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"6498:28:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6498:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1278,"nodeType":"RevertStatement","src":"6491:37:18"}]}},{"expression":{"arguments":[{"id":1282,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"6561:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1283,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"6567:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1281,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"6549:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6549:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1285,"nodeType":"ExpressionStatement","src":"6549:37:18"}]},"documentation":{"id":1265,"nodeType":"StructuredDocumentation","src":"5806:537:18","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":1287,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6357:12:18","nodeType":"FunctionDefinition","parameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1267,"mutability":"mutable","name":"role","nameLocation":"6378:4:18","nodeType":"VariableDeclaration","scope":1287,"src":"6370:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6370:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"callerConfirmation","nameLocation":"6392:18:18","nodeType":"VariableDeclaration","scope":1287,"src":"6384:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1268,"name":"address","nodeType":"ElementaryTypeName","src":"6384:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6369:42:18"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[],"src":"6427:0:18"},"scope":1417,"src":"6348:245:18","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1322,"nodeType":"Block","src":"6791:245:18","statements":[{"assignments":[1297],"declarations":[{"constant":false,"id":1297,"mutability":"mutable","name":"$","nameLocation":"6830:1:18","nodeType":"VariableDeclaration","scope":1322,"src":"6801:30:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":1296,"nodeType":"UserDefinedTypeName","pathNode":{"id":1295,"name":"AccessControlStorage","nameLocations":["6801:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"6801:20:18"},"referencedDeclaration":1090,"src":"6801:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":1300,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1298,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"6834:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$1090_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6834:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6801:59:18"},{"assignments":[1302],"declarations":[{"constant":false,"id":1302,"mutability":"mutable","name":"previousAdminRole","nameLocation":"6878:17:18","nodeType":"VariableDeclaration","scope":1322,"src":"6870:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1306,"initialValue":{"arguments":[{"id":1304,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"6911:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1303,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"6898:12:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6898:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6870:46:18"},{"expression":{"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":1307,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"6926:1:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":1310,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6928:6:18","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"6926:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1080_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":1311,"indexExpression":{"id":1309,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"6935:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6926:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1080_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":1312,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6941:9:18","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":1079,"src":"6926:24:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1313,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"6953:9:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6926:36:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1315,"nodeType":"ExpressionStatement","src":"6926:36:18"},{"eventCall":{"arguments":[{"id":1317,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"6994:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1318,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"7000:17:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1319,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"7019:9:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1316,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"6977:16:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6977:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1321,"nodeType":"EmitStatement","src":"6972:57:18"}]},"documentation":{"id":1288,"nodeType":"StructuredDocumentation","src":"6599:114:18","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":1323,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"6727:13:18","nodeType":"FunctionDefinition","parameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1290,"mutability":"mutable","name":"role","nameLocation":"6749:4:18","nodeType":"VariableDeclaration","scope":1323,"src":"6741:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6741:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1292,"mutability":"mutable","name":"adminRole","nameLocation":"6763:9:18","nodeType":"VariableDeclaration","scope":1323,"src":"6755:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6755:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6740:33:18"},"returnParameters":{"id":1294,"nodeType":"ParameterList","parameters":[],"src":"6791:0:18"},"scope":1417,"src":"6718:318:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1369,"nodeType":"Block","src":"7353:304:18","statements":[{"assignments":[1335],"declarations":[{"constant":false,"id":1335,"mutability":"mutable","name":"$","nameLocation":"7392:1:18","nodeType":"VariableDeclaration","scope":1369,"src":"7363:30:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":1334,"nodeType":"UserDefinedTypeName","pathNode":{"id":1333,"name":"AccessControlStorage","nameLocations":["7363:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"7363:20:18"},"referencedDeclaration":1090,"src":"7363:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":1338,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1336,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"7396:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$1090_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7396:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7363:59:18"},{"condition":{"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7436:23:18","subExpression":{"arguments":[{"id":1340,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"7445:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"7451:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1339,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"7437:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7437:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1367,"nodeType":"Block","src":"7614:37:18","statements":[{"expression":{"hexValue":"66616c7365","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7635:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1332,"id":1366,"nodeType":"Return","src":"7628:12:18"}]},"id":1368,"nodeType":"IfStatement","src":"7432:219:18","trueBody":{"id":1364,"nodeType":"Block","src":"7461:147:18","statements":[{"expression":{"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":1344,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"7475:1:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":1347,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7477:6:18","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"7475:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1080_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":1348,"indexExpression":{"id":1346,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"7484:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7475:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1080_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":1349,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7490:7:18","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":1077,"src":"7475:22:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1351,"indexExpression":{"id":1350,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"7498:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7475:31:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7509:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7475:38:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1354,"nodeType":"ExpressionStatement","src":"7475:38:18"},{"eventCall":{"arguments":[{"id":1356,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"7544:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1357,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"7550:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1358,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"7559:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7559:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1355,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"7532:11:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7532:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1361,"nodeType":"EmitStatement","src":"7527:45:18"},{"expression":{"hexValue":"74727565","id":1362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7593:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1332,"id":1363,"nodeType":"Return","src":"7586:11:18"}]}}]},"documentation":{"id":1324,"nodeType":"StructuredDocumentation","src":"7042:223:18","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":1370,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7279:10:18","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"role","nameLocation":"7298:4:18","nodeType":"VariableDeclaration","scope":1370,"src":"7290:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7290:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"account","nameLocation":"7312:7:18","nodeType":"VariableDeclaration","scope":1370,"src":"7304:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1327,"name":"address","nodeType":"ElementaryTypeName","src":"7304:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7289:31:18"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1370,"src":"7347:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1330,"name":"bool","nodeType":"ElementaryTypeName","src":"7347:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7346:6:18"},"scope":1417,"src":"7270:387:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1415,"nodeType":"Block","src":"7976:304:18","statements":[{"assignments":[1382],"declarations":[{"constant":false,"id":1382,"mutability":"mutable","name":"$","nameLocation":"8015:1:18","nodeType":"VariableDeclaration","scope":1415,"src":"7986:30:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":1381,"nodeType":"UserDefinedTypeName","pathNode":{"id":1380,"name":"AccessControlStorage","nameLocations":["7986:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"7986:20:18"},"referencedDeclaration":1090,"src":"7986:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":1385,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1383,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"8019:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$1090_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8019:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7986:59:18"},{"condition":{"arguments":[{"id":1387,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8067:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"8073:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1386,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8059:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8059:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1413,"nodeType":"Block","src":"8237:37:18","statements":[{"expression":{"hexValue":"66616c7365","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8258:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1379,"id":1412,"nodeType":"Return","src":"8251:12:18"}]},"id":1414,"nodeType":"IfStatement","src":"8055:219:18","trueBody":{"id":1410,"nodeType":"Block","src":"8083:148:18","statements":[{"expression":{"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":1390,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"8097:1:18","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$1090_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":1393,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8099:6:18","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"8097:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1080_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":1394,"indexExpression":{"id":1392,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8106:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8097:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1080_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":1395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8112:7:18","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":1077,"src":"8097:22:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1397,"indexExpression":{"id":1396,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"8120:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8097:31:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8131:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8097:39:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1400,"nodeType":"ExpressionStatement","src":"8097:39:18"},{"eventCall":{"arguments":[{"id":1402,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8167:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1403,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"8173:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1404,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"8182:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8182:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1401,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"8155:11:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8155:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1407,"nodeType":"EmitStatement","src":"8150:45:18"},{"expression":{"hexValue":"74727565","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8216:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1379,"id":1409,"nodeType":"Return","src":"8209:11:18"}]}}]},"documentation":{"id":1371,"nodeType":"StructuredDocumentation","src":"7663:224:18","text":" @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":1416,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"7901:11:18","nodeType":"FunctionDefinition","parameters":{"id":1376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"role","nameLocation":"7921:4:18","nodeType":"VariableDeclaration","scope":1416,"src":"7913:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7913:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1375,"mutability":"mutable","name":"account","nameLocation":"7935:7:18","nodeType":"VariableDeclaration","scope":1416,"src":"7927:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"7927:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7912:31:18"},"returnParameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1416,"src":"7970:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1377,"name":"bool","nodeType":"ElementaryTypeName","src":"7970:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7969:6:18"},"scope":1417,"src":"7892:388:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1418,"src":"2090:6192:18","usedErrors":[1434,1437,1949,1952],"usedEvents":[1442,1961,1970,1979]}],"src":"108:8175:18"},"id":18},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"Initializable":[1671]},"id":1672,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1419,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:19"},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1420,"nodeType":"StructuredDocumentation","src":"139:2209:19","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1671,"linearizedBaseContracts":[1671],"name":"Initializable","nameLocation":"2367:13:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Initializable.InitializableStorage","documentation":{"id":1421,"nodeType":"StructuredDocumentation","src":"2387:293:19","text":" @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"},"id":1428,"members":[{"constant":false,"id":1424,"mutability":"mutable","name":"_initialized","nameLocation":"2820:12:19","nodeType":"VariableDeclaration","scope":1428,"src":"2813:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1423,"name":"uint64","nodeType":"ElementaryTypeName","src":"2813:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1427,"mutability":"mutable","name":"_initializing","nameLocation":"2955:13:19","nodeType":"VariableDeclaration","scope":1428,"src":"2950:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1426,"name":"bool","nodeType":"ElementaryTypeName","src":"2950:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"InitializableStorage","nameLocation":"2692:20:19","nodeType":"StructDefinition","scope":1671,"src":"2685:290:19","visibility":"public"},{"constant":true,"id":1431,"mutability":"constant","name":"INITIALIZABLE_STORAGE","nameLocation":"3123:21:19","nodeType":"VariableDeclaration","scope":1671,"src":"3098:115:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1429,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3098:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:66:19","typeDescriptions":{"typeIdentifier":"t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1","typeString":"int_const 1089...(70 digits omitted)...9600"},"value":"0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"},"visibility":"private"},{"documentation":{"id":1432,"nodeType":"StructuredDocumentation","src":"3220:60:19","text":" @dev The contract is already initialized."},"errorSelector":"f92ee8a9","id":1434,"name":"InvalidInitialization","nameLocation":"3291:21:19","nodeType":"ErrorDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[],"src":"3312:2:19"},"src":"3285:30:19"},{"documentation":{"id":1435,"nodeType":"StructuredDocumentation","src":"3321:57:19","text":" @dev The contract is not initializing."},"errorSelector":"d7e6bcf8","id":1437,"name":"NotInitializing","nameLocation":"3389:15:19","nodeType":"ErrorDefinition","parameters":{"id":1436,"nodeType":"ParameterList","parameters":[],"src":"3404:2:19"},"src":"3383:24:19"},{"anonymous":false,"documentation":{"id":1438,"nodeType":"StructuredDocumentation","src":"3413:90:19","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2","id":1442,"name":"Initialized","nameLocation":"3514:11:19","nodeType":"EventDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"3533:7:19","nodeType":"VariableDeclaration","scope":1442,"src":"3526:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1439,"name":"uint64","nodeType":"ElementaryTypeName","src":"3526:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3525:16:19"},"src":"3508:34:19"},{"body":{"id":1524,"nodeType":"Block","src":"4092:1081:19","statements":[{"assignments":[1447],"declarations":[{"constant":false,"id":1447,"mutability":"mutable","name":"$","nameLocation":"4187:1:19","nodeType":"VariableDeclaration","scope":1524,"src":"4158:30:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":1446,"nodeType":"UserDefinedTypeName","pathNode":{"id":1445,"name":"InitializableStorage","nameLocations":["4158:20:19"],"nodeType":"IdentifierPath","referencedDeclaration":1428,"src":"4158:20:19"},"referencedDeclaration":1428,"src":"4158:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":1450,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1448,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"4191:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1428_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4191:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4158:59:19"},{"assignments":[1452],"declarations":[{"constant":false,"id":1452,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"4284:14:19","nodeType":"VariableDeclaration","scope":1524,"src":"4279:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1451,"name":"bool","nodeType":"ElementaryTypeName","src":"4279:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1456,"initialValue":{"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4301:16:19","subExpression":{"expression":{"id":1453,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"4302:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4304:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"4302:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4279:38:19"},{"assignments":[1458],"declarations":[{"constant":false,"id":1458,"mutability":"mutable","name":"initialized","nameLocation":"4334:11:19","nodeType":"VariableDeclaration","scope":1524,"src":"4327:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1457,"name":"uint64","nodeType":"ElementaryTypeName","src":"4327:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":1461,"initialValue":{"expression":{"id":1459,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"4348:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4350:12:19","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"4348:14:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"4327:35:19"},{"assignments":[1463],"declarations":[{"constant":false,"id":1463,"mutability":"mutable","name":"initialSetup","nameLocation":"4711:12:19","nodeType":"VariableDeclaration","scope":1524,"src":"4706:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1462,"name":"bool","nodeType":"ElementaryTypeName","src":"4706:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1469,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1464,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4726:11:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4741:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4726:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1467,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"4746:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4726:34:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4706:54:19"},{"assignments":[1471],"declarations":[{"constant":false,"id":1471,"mutability":"mutable","name":"construction","nameLocation":"4775:12:19","nodeType":"VariableDeclaration","scope":1524,"src":"4770:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1470,"name":"bool","nodeType":"ElementaryTypeName","src":"4770:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1484,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1472,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4790:11:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4805:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4790:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":1477,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4818:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1671","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1671","typeString":"contract Initializable"}],"id":1476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4810:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1475,"name":"address","nodeType":"ElementaryTypeName","src":"4810:7:19","typeDescriptions":{}}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4810:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4824:4:19","memberName":"code","nodeType":"MemberAccess","src":"4810:18:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4829:6:19","memberName":"length","nodeType":"MemberAccess","src":"4810:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4839:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4810:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4790:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4770:70:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4855:13:19","subExpression":{"id":1485,"name":"initialSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"4856:12:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4872:13:19","subExpression":{"id":1487,"name":"construction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"4873:12:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4855:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1494,"nodeType":"IfStatement","src":"4851:91:19","trueBody":{"id":1493,"nodeType":"Block","src":"4887:55:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1490,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"4908:21:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4908:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1492,"nodeType":"RevertStatement","src":"4901:30:19"}]}},{"expression":{"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1495,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"4951:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1497,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4953:12:19","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"4951:14:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4968:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4951:18:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":1500,"nodeType":"ExpressionStatement","src":"4951:18:19"},{"condition":{"id":1501,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"4983:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1509,"nodeType":"IfStatement","src":"4979:67:19","trueBody":{"id":1508,"nodeType":"Block","src":"4999:47:19","statements":[{"expression":{"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1502,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"5013:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1504,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5015:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"5013:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5031:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5013:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1507,"nodeType":"ExpressionStatement","src":"5013:22:19"}]}},{"id":1510,"nodeType":"PlaceholderStatement","src":"5055:1:19"},{"condition":{"id":1511,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"5070:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1523,"nodeType":"IfStatement","src":"5066:101:19","trueBody":{"id":1522,"nodeType":"Block","src":"5086:81:19","statements":[{"expression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1512,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"5100:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5102:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"5100:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5118:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5100:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1517,"nodeType":"ExpressionStatement","src":"5100:23:19"},{"eventCall":{"arguments":[{"hexValue":"31","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5154:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1518,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"5142:11:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5142:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"EmitStatement","src":"5137:19:19"}]}}]},"documentation":{"id":1443,"nodeType":"StructuredDocumentation","src":"3548:516:19","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."},"id":1525,"name":"initializer","nameLocation":"4078:11:19","nodeType":"ModifierDefinition","parameters":{"id":1444,"nodeType":"ParameterList","parameters":[],"src":"4089:2:19"},"src":"4069:1104:19","virtual":false,"visibility":"internal"},{"body":{"id":1571,"nodeType":"Block","src":"6291:392:19","statements":[{"assignments":[1532],"declarations":[{"constant":false,"id":1532,"mutability":"mutable","name":"$","nameLocation":"6386:1:19","nodeType":"VariableDeclaration","scope":1571,"src":"6357:30:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":1531,"nodeType":"UserDefinedTypeName","pathNode":{"id":1530,"name":"InitializableStorage","nameLocations":["6357:20:19"],"nodeType":"IdentifierPath","referencedDeclaration":1428,"src":"6357:20:19"},"referencedDeclaration":1428,"src":"6357:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":1535,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1533,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"6390:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1428_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6357:59:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1536,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"6431:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6433:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"6431:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1538,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"6450:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6452:12:19","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"6450:14:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1540,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"6468:7:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6450:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6431:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1547,"nodeType":"IfStatement","src":"6427:105:19","trueBody":{"id":1546,"nodeType":"Block","src":"6477:55:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1543,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"6498:21:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6498:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1545,"nodeType":"RevertStatement","src":"6491:30:19"}]}},{"expression":{"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1548,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"6541:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1550,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6543:12:19","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"6541:14:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1551,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"6558:7:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6541:24:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":1553,"nodeType":"ExpressionStatement","src":"6541:24:19"},{"expression":{"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1554,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"6575:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1556,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6577:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"6575:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6593:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6575:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1559,"nodeType":"ExpressionStatement","src":"6575:22:19"},{"id":1560,"nodeType":"PlaceholderStatement","src":"6607:1:19"},{"expression":{"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1561,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"6618:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1563,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6620:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"6618:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6636:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6618:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1566,"nodeType":"ExpressionStatement","src":"6618:23:19"},{"eventCall":{"arguments":[{"id":1568,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"6668:7:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1567,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"6656:11:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6656:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1570,"nodeType":"EmitStatement","src":"6651:25:19"}]},"documentation":{"id":1526,"nodeType":"StructuredDocumentation","src":"5179:1068:19","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1572,"name":"reinitializer","nameLocation":"6261:13:19","nodeType":"ModifierDefinition","parameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"version","nameLocation":"6282:7:19","nodeType":"VariableDeclaration","scope":1572,"src":"6275:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1527,"name":"uint64","nodeType":"ElementaryTypeName","src":"6275:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6274:16:19"},"src":"6252:431:19","virtual":false,"visibility":"internal"},{"body":{"id":1579,"nodeType":"Block","src":"6921:48:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1575,"name":"_checkInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"6931:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6931:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1577,"nodeType":"ExpressionStatement","src":"6931:20:19"},{"id":1578,"nodeType":"PlaceholderStatement","src":"6961:1:19"}]},"documentation":{"id":1573,"nodeType":"StructuredDocumentation","src":"6689:199:19","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1580,"name":"onlyInitializing","nameLocation":"6902:16:19","nodeType":"ModifierDefinition","parameters":{"id":1574,"nodeType":"ParameterList","parameters":[],"src":"6918:2:19"},"src":"6893:76:19","virtual":false,"visibility":"internal"},{"body":{"id":1592,"nodeType":"Block","src":"7136:89:19","statements":[{"condition":{"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7150:18:19","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1584,"name":"_isInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"7151:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7151:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1591,"nodeType":"IfStatement","src":"7146:73:19","trueBody":{"id":1590,"nodeType":"Block","src":"7170:49:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1587,"name":"NotInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"7191:15:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7191:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1589,"nodeType":"RevertStatement","src":"7184:24:19"}]}}]},"documentation":{"id":1581,"nodeType":"StructuredDocumentation","src":"6975:104:19","text":" @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."},"id":1593,"implemented":true,"kind":"function","modifiers":[],"name":"_checkInitializing","nameLocation":"7093:18:19","nodeType":"FunctionDefinition","parameters":{"id":1582,"nodeType":"ParameterList","parameters":[],"src":"7111:2:19"},"returnParameters":{"id":1583,"nodeType":"ParameterList","parameters":[],"src":"7136:0:19"},"scope":1671,"src":"7084:141:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1638,"nodeType":"Block","src":"7760:373:19","statements":[{"assignments":[1599],"declarations":[{"constant":false,"id":1599,"mutability":"mutable","name":"$","nameLocation":"7855:1:19","nodeType":"VariableDeclaration","scope":1638,"src":"7826:30:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":1598,"nodeType":"UserDefinedTypeName","pathNode":{"id":1597,"name":"InitializableStorage","nameLocations":["7826:20:19"],"nodeType":"IdentifierPath","referencedDeclaration":1428,"src":"7826:20:19"},"referencedDeclaration":1428,"src":"7826:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":1602,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1600,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"7859:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1428_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7859:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7826:59:19"},{"condition":{"expression":{"id":1603,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"7900:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7902:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"7900:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1609,"nodeType":"IfStatement","src":"7896:76:19","trueBody":{"id":1608,"nodeType":"Block","src":"7917:55:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1605,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"7938:21:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7938:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1607,"nodeType":"RevertStatement","src":"7931:30:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1610,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"7985:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1611,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7987:12:19","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"7985:14:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8008:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1613,"name":"uint64","nodeType":"ElementaryTypeName","src":"8008:6:19","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":1612,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8003:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8003:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8016:3:19","memberName":"max","nodeType":"MemberAccess","src":"8003:16:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7985:34:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1637,"nodeType":"IfStatement","src":"7981:146:19","trueBody":{"id":1636,"nodeType":"Block","src":"8021:106:19","statements":[{"expression":{"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1618,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"8035:1:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8037:12:19","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"8035:14:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8057:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1622,"name":"uint64","nodeType":"ElementaryTypeName","src":"8057:6:19","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":1621,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8052:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8052:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8065:3:19","memberName":"max","nodeType":"MemberAccess","src":"8052:16:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8035:33:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":1627,"nodeType":"ExpressionStatement","src":"8035:33:19"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8104:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1630,"name":"uint64","nodeType":"ElementaryTypeName","src":"8104:6:19","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":1629,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8099:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8099:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8112:3:19","memberName":"max","nodeType":"MemberAccess","src":"8099:16:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1628,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"8087:11:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8087:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1635,"nodeType":"EmitStatement","src":"8082:34:19"}]}}]},"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"7231:475:19","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1639,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"7720:20:19","nodeType":"FunctionDefinition","parameters":{"id":1595,"nodeType":"ParameterList","parameters":[],"src":"7740:2:19"},"returnParameters":{"id":1596,"nodeType":"ParameterList","parameters":[],"src":"7760:0:19"},"scope":1671,"src":"7711:422:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1649,"nodeType":"Block","src":"8308:63:19","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1645,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"8325:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1428_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8325:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1647,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8352:12:19","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"8325:39:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1644,"id":1648,"nodeType":"Return","src":"8318:46:19"}]},"documentation":{"id":1640,"nodeType":"StructuredDocumentation","src":"8139:99:19","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1650,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"8252:22:19","nodeType":"FunctionDefinition","parameters":{"id":1641,"nodeType":"ParameterList","parameters":[],"src":"8274:2:19"},"returnParameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1650,"src":"8300:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1642,"name":"uint64","nodeType":"ElementaryTypeName","src":"8300:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8299:8:19"},"scope":1671,"src":"8243:128:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1660,"nodeType":"Block","src":"8543:64:19","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1656,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"8560:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1428_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":1658,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8587:13:19","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"8560:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1655,"id":1659,"nodeType":"Return","src":"8553:47:19"}]},"documentation":{"id":1651,"nodeType":"StructuredDocumentation","src":"8377:105:19","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1661,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"8496:15:19","nodeType":"FunctionDefinition","parameters":{"id":1652,"nodeType":"ParameterList","parameters":[],"src":"8511:2:19"},"returnParameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1661,"src":"8537:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1653,"name":"bool","nodeType":"ElementaryTypeName","src":"8537:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8536:6:19"},"scope":1671,"src":"8487:120:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1669,"nodeType":"Block","src":"8827:80:19","statements":[{"AST":{"nodeType":"YulBlock","src":"8846:55:19","statements":[{"nodeType":"YulAssignment","src":"8860:31:19","value":{"name":"INITIALIZABLE_STORAGE","nodeType":"YulIdentifier","src":"8870:21:19"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"8860:6:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1666,"isOffset":false,"isSlot":true,"src":"8860:6:19","suffix":"slot","valueSize":1},{"declaration":1431,"isOffset":false,"isSlot":false,"src":"8870:21:19","valueSize":1}],"id":1668,"nodeType":"InlineAssembly","src":"8837:64:19"}]},"documentation":{"id":1662,"nodeType":"StructuredDocumentation","src":"8613:67:19","text":" @dev Returns a pointer to the storage namespace."},"id":1670,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializableStorage","nameLocation":"8746:24:19","nodeType":"FunctionDefinition","parameters":{"id":1663,"nodeType":"ParameterList","parameters":[],"src":"8770:2:19"},"returnParameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"$","nameLocation":"8824:1:19","nodeType":"VariableDeclaration","scope":1670,"src":"8795:30:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":1665,"nodeType":"UserDefinedTypeName","pathNode":{"id":1664,"name":"InitializableStorage","nameLocations":["8795:20:19"],"nodeType":"IdentifierPath","referencedDeclaration":1428,"src":"8795:20:19"},"referencedDeclaration":1428,"src":"8795:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$1428_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"src":"8794:32:19"},"scope":1671,"src":"8737:170:19","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1672,"src":"2349:6560:19","usedErrors":[1434,1437],"usedEvents":[1442]}],"src":"113:8797:19"},"id":19},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"ERC1967Utils":[2335],"IERC1822Proxiable":[2032],"Initializable":[1671],"UUPSUpgradeable":[1853]},"id":1854,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1673,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:20"},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","file":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","id":1675,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":2033,"src":"141:88:20","symbolAliases":[{"foreign":{"id":1674,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"149:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol","file":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol","id":1677,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":2336,"src":"230:84:20","symbolAliases":[{"foreign":{"id":1676,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"238:12:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":1679,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":1672,"src":"315:50:20","symbolAliases":[{"foreign":{"id":1678,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"323:13:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1681,"name":"Initializable","nameLocations":["1023:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":1671,"src":"1023:13:20"},"id":1682,"nodeType":"InheritanceSpecifier","src":"1023:13:20"},{"baseName":{"id":1683,"name":"IERC1822Proxiable","nameLocations":["1038:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":2032,"src":"1038:17:20"},"id":1684,"nodeType":"InheritanceSpecifier","src":"1038:17:20"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"367:618:20","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism."},"fullyImplemented":false,"id":1853,"linearizedBaseContracts":[1853,2032,1671],"name":"UUPSUpgradeable","nameLocation":"1004:15:20","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1685,"nodeType":"StructuredDocumentation","src":"1062:61:20","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable"},"id":1691,"mutability":"immutable","name":"__self","nameLocation":"1154:6:20","nodeType":"VariableDeclaration","scope":1853,"src":"1128:48:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1686,"name":"address","nodeType":"ElementaryTypeName","src":"1128:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":1689,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1171:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1853","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1853","typeString":"contract UUPSUpgradeable"}],"id":1688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1163:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"1163:7:20","typeDescriptions":{}}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1163:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":true,"documentation":{"id":1692,"nodeType":"StructuredDocumentation","src":"1183:631:20","text":" @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n during an upgrade."},"functionSelector":"ad3cb1cc","id":1695,"mutability":"constant","name":"UPGRADE_INTERFACE_VERSION","nameLocation":"1842:25:20","nodeType":"VariableDeclaration","scope":1853,"src":"1819:58:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1693,"name":"string","nodeType":"ElementaryTypeName","src":"1819:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"352e302e30","id":1694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1870:7:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ade050ecfcf8ae20ae1d10a23573f9d7e0bad85e74a2cf8338a65401e64558c","typeString":"literal_string \"5.0.0\""},"value":"5.0.0"},"visibility":"public"},{"documentation":{"id":1696,"nodeType":"StructuredDocumentation","src":"1884:65:20","text":" @dev The call is from an unauthorized context."},"errorSelector":"e07c8dba","id":1698,"name":"UUPSUnauthorizedCallContext","nameLocation":"1960:27:20","nodeType":"ErrorDefinition","parameters":{"id":1697,"nodeType":"ParameterList","parameters":[],"src":"1987:2:20"},"src":"1954:36:20"},{"documentation":{"id":1699,"nodeType":"StructuredDocumentation","src":"1996:68:20","text":" @dev The storage `slot` is unsupported as a UUID."},"errorSelector":"aa1d49a4","id":1703,"name":"UUPSUnsupportedProxiableUUID","nameLocation":"2075:28:20","nodeType":"ErrorDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1701,"mutability":"mutable","name":"slot","nameLocation":"2112:4:20","nodeType":"VariableDeclaration","scope":1703,"src":"2104:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2104:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2103:14:20"},"src":"2069:49:20"},{"body":{"id":1710,"nodeType":"Block","src":"2643:41:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1706,"name":"_checkProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"2653:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2653:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1708,"nodeType":"ExpressionStatement","src":"2653:13:20"},{"id":1709,"nodeType":"PlaceholderStatement","src":"2676:1:20"}]},"documentation":{"id":1704,"nodeType":"StructuredDocumentation","src":"2124:493:20","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":1711,"name":"onlyProxy","nameLocation":"2631:9:20","nodeType":"ModifierDefinition","parameters":{"id":1705,"nodeType":"ParameterList","parameters":[],"src":"2640:2:20"},"src":"2622:62:20","virtual":false,"visibility":"internal"},{"body":{"id":1718,"nodeType":"Block","src":"2914:48:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1714,"name":"_checkNotDelegated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"2924:18:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2924:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1716,"nodeType":"ExpressionStatement","src":"2924:20:20"},{"id":1717,"nodeType":"PlaceholderStatement","src":"2954:1:20"}]},"documentation":{"id":1712,"nodeType":"StructuredDocumentation","src":"2690:195:20","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1719,"name":"notDelegated","nameLocation":"2899:12:20","nodeType":"ModifierDefinition","parameters":{"id":1713,"nodeType":"ParameterList","parameters":[],"src":"2911:2:20"},"src":"2890:72:20","virtual":false,"visibility":"internal"},{"body":{"id":1724,"nodeType":"Block","src":"3028:7:20","statements":[]},"id":1725,"implemented":true,"kind":"function","modifiers":[{"id":1722,"kind":"modifierInvocation","modifierName":{"id":1721,"name":"onlyInitializing","nameLocations":["3011:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"3011:16:20"},"nodeType":"ModifierInvocation","src":"3011:16:20"}],"name":"__UUPSUpgradeable_init","nameLocation":"2977:22:20","nodeType":"FunctionDefinition","parameters":{"id":1720,"nodeType":"ParameterList","parameters":[],"src":"2999:2:20"},"returnParameters":{"id":1723,"nodeType":"ParameterList","parameters":[],"src":"3028:0:20"},"scope":1853,"src":"2968:67:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1730,"nodeType":"Block","src":"3111:7:20","statements":[]},"id":1731,"implemented":true,"kind":"function","modifiers":[{"id":1728,"kind":"modifierInvocation","modifierName":{"id":1727,"name":"onlyInitializing","nameLocations":["3094:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"3094:16:20"},"nodeType":"ModifierInvocation","src":"3094:16:20"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"3050:32:20","nodeType":"FunctionDefinition","parameters":{"id":1726,"nodeType":"ParameterList","parameters":[],"src":"3082:2:20"},"returnParameters":{"id":1729,"nodeType":"ParameterList","parameters":[],"src":"3111:0:20"},"scope":1853,"src":"3041:77:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2031],"body":{"id":1742,"nodeType":"Block","src":"3783:56:20","statements":[{"expression":{"expression":{"id":1739,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"3800:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2335_$","typeString":"type(library ERC1967Utils)"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3813:19:20","memberName":"IMPLEMENTATION_SLOT","nodeType":"MemberAccess","referencedDeclaration":2062,"src":"3800:32:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1738,"id":1741,"nodeType":"Return","src":"3793:39:20"}]},"documentation":{"id":1732,"nodeType":"StructuredDocumentation","src":"3123:577:20","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1743,"implemented":true,"kind":"function","modifiers":[{"id":1735,"kind":"modifierInvocation","modifierName":{"id":1734,"name":"notDelegated","nameLocations":["3752:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":1719,"src":"3752:12:20"},"nodeType":"ModifierInvocation","src":"3752:12:20"}],"name":"proxiableUUID","nameLocation":"3714:13:20","nodeType":"FunctionDefinition","parameters":{"id":1733,"nodeType":"ParameterList","parameters":[],"src":"3727:2:20"},"returnParameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1743,"src":"3774:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3774:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3773:9:20"},"scope":1853,"src":"3705:134:20","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1762,"nodeType":"Block","src":"4263:109:20","statements":[{"expression":{"arguments":[{"id":1754,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"4291:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1753,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"4273:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4273:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1756,"nodeType":"ExpressionStatement","src":"4273:36:20"},{"expression":{"arguments":[{"id":1758,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"4341:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1759,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"4360:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1757,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"4319:21:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4319:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1761,"nodeType":"ExpressionStatement","src":"4319:46:20"}]},"documentation":{"id":1744,"nodeType":"StructuredDocumentation","src":"3845:308:20","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":1763,"implemented":true,"kind":"function","modifiers":[{"id":1751,"kind":"modifierInvocation","modifierName":{"id":1750,"name":"onlyProxy","nameLocations":["4253:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":1711,"src":"4253:9:20"},"nodeType":"ModifierInvocation","src":"4253:9:20"}],"name":"upgradeToAndCall","nameLocation":"4167:16:20","nodeType":"FunctionDefinition","parameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"newImplementation","nameLocation":"4192:17:20","nodeType":"VariableDeclaration","scope":1763,"src":"4184:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"4184:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"data","nameLocation":"4224:4:20","nodeType":"VariableDeclaration","scope":1763,"src":"4211:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1747,"name":"bytes","nodeType":"ElementaryTypeName","src":"4211:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4183:46:20"},"returnParameters":{"id":1752,"nodeType":"ParameterList","parameters":[],"src":"4263:0:20"},"scope":1853,"src":"4158:214:20","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":1784,"nodeType":"Block","src":"4644:267:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1769,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4679:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1853","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1853","typeString":"contract UUPSUpgradeable"}],"id":1768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4671:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1767,"name":"address","nodeType":"ElementaryTypeName","src":"4671:7:20","typeDescriptions":{}}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4671:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1771,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"4688:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4671:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1773,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"4749:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2335_$","typeString":"type(library ERC1967Utils)"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4762:17:20","memberName":"getImplementation","nodeType":"MemberAccess","referencedDeclaration":2093,"src":"4749:30:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1776,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"4785:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4749:42:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4671:120:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1783,"nodeType":"IfStatement","src":"4654:251:20","trueBody":{"id":1782,"nodeType":"Block","src":"4844:61:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1779,"name":"UUPSUnauthorizedCallContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"4865:27:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4865:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1781,"nodeType":"RevertStatement","src":"4858:36:20"}]}}]},"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"4378:216:20","text":" @dev Reverts if the execution is not performed via delegatecall or the execution\n context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n See {_onlyProxy}."},"id":1785,"implemented":true,"kind":"function","modifiers":[],"name":"_checkProxy","nameLocation":"4608:11:20","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[],"src":"4619:2:20"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[],"src":"4644:0:20"},"scope":1853,"src":"4599:312:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1800,"nodeType":"Block","src":"5080:161:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1791,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5102:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1853","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1853","typeString":"contract UUPSUpgradeable"}],"id":1790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5094:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1789,"name":"address","nodeType":"ElementaryTypeName","src":"5094:7:20","typeDescriptions":{}}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5094:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1793,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"5111:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5094:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1799,"nodeType":"IfStatement","src":"5090:145:20","trueBody":{"id":1798,"nodeType":"Block","src":"5119:116:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1795,"name":"UUPSUnauthorizedCallContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"5195:27:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5195:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1797,"nodeType":"RevertStatement","src":"5188:36:20"}]}}]},"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"4917:106:20","text":" @dev Reverts if the execution is performed via delegatecall.\n See {notDelegated}."},"id":1801,"implemented":true,"kind":"function","modifiers":[],"name":"_checkNotDelegated","nameLocation":"5037:18:20","nodeType":"FunctionDefinition","parameters":{"id":1787,"nodeType":"ParameterList","parameters":[],"src":"5055:2:20"},"returnParameters":{"id":1788,"nodeType":"ParameterList","parameters":[],"src":"5080:0:20"},"scope":1853,"src":"5028:213:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"documentation":{"id":1802,"nodeType":"StructuredDocumentation","src":"5247:372:20","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal onlyOwner {}\n ```"},"id":1807,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"5633:17:20","nodeType":"FunctionDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"newImplementation","nameLocation":"5659:17:20","nodeType":"VariableDeclaration","scope":1807,"src":"5651:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1803,"name":"address","nodeType":"ElementaryTypeName","src":"5651:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5650:27:20"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[],"src":"5694:0:20"},"scope":1853,"src":"5624:71:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1851,"nodeType":"Block","src":"6137:453:20","statements":[{"clauses":[{"block":{"id":1840,"nodeType":"Block","src":"6227:212:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1823,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"6245:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1824,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"6253:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2335_$","typeString":"type(library ERC1967Utils)"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6266:19:20","memberName":"IMPLEMENTATION_SLOT","nodeType":"MemberAccess","referencedDeclaration":2062,"src":"6253:32:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6245:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1832,"nodeType":"IfStatement","src":"6241:120:20","trueBody":{"id":1831,"nodeType":"Block","src":"6287:74:20","statements":[{"errorCall":{"arguments":[{"id":1828,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"6341:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1827,"name":"UUPSUnsupportedProxiableUUID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6312:28:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6312:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1830,"nodeType":"RevertStatement","src":"6305:41:20"}]}},{"expression":{"arguments":[{"id":1836,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"6404:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1837,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"6423:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1833,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"6374:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2335_$","typeString":"type(library ERC1967Utils)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6387:16:20","memberName":"upgradeToAndCall","nodeType":"MemberAccess","referencedDeclaration":2154,"src":"6374:29:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:54:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1839,"nodeType":"ExpressionStatement","src":"6374:54:20"}]},"errorName":"","id":1841,"nodeType":"TryCatchClause","parameters":{"id":1822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1821,"mutability":"mutable","name":"slot","nameLocation":"6221:4:20","nodeType":"VariableDeclaration","scope":1841,"src":"6213:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6213:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6212:14:20"},"src":"6204:235:20"},{"block":{"id":1848,"nodeType":"Block","src":"6446:138:20","statements":[{"errorCall":{"arguments":[{"id":1845,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"6555:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1842,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"6513:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2335_$","typeString":"type(library ERC1967Utils)"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6526:28:20","memberName":"ERC1967InvalidImplementation","nodeType":"MemberAccess","referencedDeclaration":2067,"src":"6513:41:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6513:60:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1847,"nodeType":"RevertStatement","src":"6506:67:20"}]},"errorName":"","id":1849,"nodeType":"TryCatchClause","src":"6440:144:20"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1816,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"6169:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1815,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"6151:17:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822Proxiable_$2032_$","typeString":"type(contract IERC1822Proxiable)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6151:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822Proxiable_$2032","typeString":"contract IERC1822Proxiable"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6188:13:20","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":2031,"src":"6151:50:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6151:52:20","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1850,"nodeType":"TryStatement","src":"6147:437:20"}]},"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"5701:346:20","text":" @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n is expected to be the implementation slot in ERC1967.\n Emits an {IERC1967-Upgraded} event."},"id":1852,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"6061:21:20","nodeType":"FunctionDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"newImplementation","nameLocation":"6091:17:20","nodeType":"VariableDeclaration","scope":1852,"src":"6083:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"6083:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"data","nameLocation":"6123:4:20","nodeType":"VariableDeclaration","scope":1852,"src":"6110:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1811,"name":"bytes","nodeType":"ElementaryTypeName","src":"6110:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6082:46:20"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[],"src":"6137:0:20"},"scope":1853,"src":"6052:538:20","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1854,"src":"986:5606:20","usedErrors":[1434,1437,1698,1703,2067,2080,2358,2361],"usedEvents":[1442,2046]}],"src":"115:6478:20"},"id":20},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1899],"Initializable":[1671]},"id":1900,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1855,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:21"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1900,"sourceUnit":1672,"src":"126:63:21","symbolAliases":[{"foreign":{"id":1856,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"134:13:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1859,"name":"Initializable","nameLocations":["728:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":1671,"src":"728:13:21"},"id":1860,"nodeType":"InheritanceSpecifier","src":"728:13:21"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"191:496:21","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1899,"linearizedBaseContracts":[1899,1671],"name":"ContextUpgradeable","nameLocation":"706:18:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":1865,"nodeType":"Block","src":"800:7:21","statements":[]},"id":1866,"implemented":true,"kind":"function","modifiers":[{"id":1863,"kind":"modifierInvocation","modifierName":{"id":1862,"name":"onlyInitializing","nameLocations":["783:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"783:16:21"},"nodeType":"ModifierInvocation","src":"783:16:21"}],"name":"__Context_init","nameLocation":"757:14:21","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[],"src":"771:2:21"},"returnParameters":{"id":1864,"nodeType":"ParameterList","parameters":[],"src":"800:0:21"},"scope":1899,"src":"748:59:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1871,"nodeType":"Block","src":"875:7:21","statements":[]},"id":1872,"implemented":true,"kind":"function","modifiers":[{"id":1869,"kind":"modifierInvocation","modifierName":{"id":1868,"name":"onlyInitializing","nameLocations":["858:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"858:16:21"},"nodeType":"ModifierInvocation","src":"858:16:21"}],"name":"__Context_init_unchained","nameLocation":"822:24:21","nodeType":"FunctionDefinition","parameters":{"id":1867,"nodeType":"ParameterList","parameters":[],"src":"846:2:21"},"returnParameters":{"id":1870,"nodeType":"ParameterList","parameters":[],"src":"875:0:21"},"scope":1899,"src":"813:69:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1880,"nodeType":"Block","src":"949:34:21","statements":[{"expression":{"expression":{"id":1877,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"966:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"970:6:21","memberName":"sender","nodeType":"MemberAccess","src":"966:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1876,"id":1879,"nodeType":"Return","src":"959:17:21"}]},"id":1881,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"896:10:21","nodeType":"FunctionDefinition","parameters":{"id":1873,"nodeType":"ParameterList","parameters":[],"src":"906:2:21"},"returnParameters":{"id":1876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1875,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1881,"src":"940:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1874,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"939:9:21"},"scope":1899,"src":"887:96:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1889,"nodeType":"Block","src":"1056:32:21","statements":[{"expression":{"expression":{"id":1886,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1073:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1077:4:21","memberName":"data","nodeType":"MemberAccess","src":"1073:8:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1885,"id":1888,"nodeType":"Return","src":"1066:15:21"}]},"id":1890,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"998:8:21","nodeType":"FunctionDefinition","parameters":{"id":1882,"nodeType":"ParameterList","parameters":[],"src":"1006:2:21"},"returnParameters":{"id":1885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1890,"src":"1040:14:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1883,"name":"bytes","nodeType":"ElementaryTypeName","src":"1040:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1039:16:21"},"scope":1899,"src":"989:99:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1897,"nodeType":"Block","src":"1166:25:21","statements":[{"expression":{"hexValue":"30","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1183:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1894,"id":1896,"nodeType":"Return","src":"1176:8:21"}]},"id":1898,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1103:20:21","nodeType":"FunctionDefinition","parameters":{"id":1891,"nodeType":"ParameterList","parameters":[],"src":"1123:2:21"},"returnParameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1898,"src":"1157:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1157:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1156:9:21"},"scope":1899,"src":"1094:97:21","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1900,"src":"688:505:21","usedErrors":[1434,1437],"usedEvents":[1442]}],"src":"101:1093:21"},"id":21},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"ERC165Upgradeable":[1939],"IERC165":[2975],"Initializable":[1671]},"id":1940,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1901,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:22"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":1903,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1940,"sourceUnit":2976,"src":"140:80:22","symbolAliases":[{"foreign":{"id":1902,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"148:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1905,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1940,"sourceUnit":1672,"src":"221:66:22","symbolAliases":[{"foreign":{"id":1904,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"229:13:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1907,"name":"Initializable","nameLocations":["807:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":1671,"src":"807:13:22"},"id":1908,"nodeType":"InheritanceSpecifier","src":"807:13:22"},{"baseName":{"id":1909,"name":"IERC165","nameLocations":["822:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":2975,"src":"822:7:22"},"id":1910,"nodeType":"InheritanceSpecifier","src":"822:7:22"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1906,"nodeType":"StructuredDocumentation","src":"289:478:22","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1939,"linearizedBaseContracts":[1939,2975,1671],"name":"ERC165Upgradeable","nameLocation":"786:17:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":1915,"nodeType":"Block","src":"887:7:22","statements":[]},"id":1916,"implemented":true,"kind":"function","modifiers":[{"id":1913,"kind":"modifierInvocation","modifierName":{"id":1912,"name":"onlyInitializing","nameLocations":["870:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"870:16:22"},"nodeType":"ModifierInvocation","src":"870:16:22"}],"name":"__ERC165_init","nameLocation":"845:13:22","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[],"src":"858:2:22"},"returnParameters":{"id":1914,"nodeType":"ParameterList","parameters":[],"src":"887:0:22"},"scope":1939,"src":"836:58:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1921,"nodeType":"Block","src":"961:7:22","statements":[]},"id":1922,"implemented":true,"kind":"function","modifiers":[{"id":1919,"kind":"modifierInvocation","modifierName":{"id":1918,"name":"onlyInitializing","nameLocations":["944:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":1580,"src":"944:16:22"},"nodeType":"ModifierInvocation","src":"944:16:22"}],"name":"__ERC165_init_unchained","nameLocation":"909:23:22","nodeType":"FunctionDefinition","parameters":{"id":1917,"nodeType":"ParameterList","parameters":[],"src":"932:2:22"},"returnParameters":{"id":1920,"nodeType":"ParameterList","parameters":[],"src":"961:0:22"},"scope":1939,"src":"900:68:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2974],"body":{"id":1937,"nodeType":"Block","src":"1116:64:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1930,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"1133:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1932,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"1153:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2975_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2975_$","typeString":"type(contract IERC165)"}],"id":1931,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1148:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1148:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2975","typeString":"type(contract IERC165)"}},"id":1934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1162:11:22","memberName":"interfaceId","nodeType":"MemberAccess","src":"1148:25:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1133:40:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1929,"id":1936,"nodeType":"Return","src":"1126:47:22"}]},"documentation":{"id":1923,"nodeType":"StructuredDocumentation","src":"973:56:22","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1938,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1043:17:22","nodeType":"FunctionDefinition","parameters":{"id":1926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1925,"mutability":"mutable","name":"interfaceId","nameLocation":"1068:11:22","nodeType":"VariableDeclaration","scope":1938,"src":"1061:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1924,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1061:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1060:20:22"},"returnParameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1938,"src":"1110:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1927,"name":"bool","nodeType":"ElementaryTypeName","src":"1110:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1109:6:22"},"scope":1939,"src":"1034:146:22","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1940,"src":"768:414:22","usedErrors":[1434,1437],"usedEvents":[1442]}],"src":"114:1069:22"},"id":22},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[2022]},"id":2023,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1941,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":1942,"nodeType":"StructuredDocumentation","src":"135:89:23","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":2022,"linearizedBaseContracts":[2022],"name":"IAccessControl","nameLocation":"235:14:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1943,"nodeType":"StructuredDocumentation","src":"256:56:23","text":" @dev The `account` is missing a role."},"errorSelector":"e2517d3f","id":1949,"name":"AccessControlUnauthorizedAccount","nameLocation":"323:32:23","nodeType":"ErrorDefinition","parameters":{"id":1948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1945,"mutability":"mutable","name":"account","nameLocation":"364:7:23","nodeType":"VariableDeclaration","scope":1949,"src":"356:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1944,"name":"address","nodeType":"ElementaryTypeName","src":"356:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1947,"mutability":"mutable","name":"neededRole","nameLocation":"381:10:23","nodeType":"VariableDeclaration","scope":1949,"src":"373:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1946,"name":"bytes32","nodeType":"ElementaryTypeName","src":"373:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"355:37:23"},"src":"317:76:23"},{"documentation":{"id":1950,"nodeType":"StructuredDocumentation","src":"399:148:23","text":" @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."},"errorSelector":"6697b232","id":1952,"name":"AccessControlBadConfirmation","nameLocation":"558:28:23","nodeType":"ErrorDefinition","parameters":{"id":1951,"nodeType":"ParameterList","parameters":[],"src":"586:2:23"},"src":"552:37:23"},{"anonymous":false,"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"595:254:23","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this."},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":1961,"name":"RoleAdminChanged","nameLocation":"860:16:23","nodeType":"EventDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"893:4:23","nodeType":"VariableDeclaration","scope":1961,"src":"877:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"877:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1957,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"915:17:23","nodeType":"VariableDeclaration","scope":1961,"src":"899:33:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1959,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"950:12:23","nodeType":"VariableDeclaration","scope":1961,"src":"934:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"934:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"876:87:23"},"src":"854:110:23"},{"anonymous":false,"documentation":{"id":1962,"nodeType":"StructuredDocumentation","src":"970:212:23","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":1970,"name":"RoleGranted","nameLocation":"1193:11:23","nodeType":"EventDefinition","parameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1964,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1221:4:23","nodeType":"VariableDeclaration","scope":1970,"src":"1205:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1205:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1966,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1243:7:23","nodeType":"VariableDeclaration","scope":1970,"src":"1227:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1965,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1968,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1268:6:23","nodeType":"VariableDeclaration","scope":1970,"src":"1252:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1967,"name":"address","nodeType":"ElementaryTypeName","src":"1252:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1204:71:23"},"src":"1187:89:23"},{"anonymous":false,"documentation":{"id":1971,"nodeType":"StructuredDocumentation","src":"1282:275:23","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":1979,"name":"RoleRevoked","nameLocation":"1568:11:23","nodeType":"EventDefinition","parameters":{"id":1978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1596:4:23","nodeType":"VariableDeclaration","scope":1979,"src":"1580:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1580:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1975,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1618:7:23","nodeType":"VariableDeclaration","scope":1979,"src":"1602:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1974,"name":"address","nodeType":"ElementaryTypeName","src":"1602:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1977,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1643:6:23","nodeType":"VariableDeclaration","scope":1979,"src":"1627:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1976,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1579:71:23"},"src":"1562:89:23"},{"documentation":{"id":1980,"nodeType":"StructuredDocumentation","src":"1657:76:23","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":1989,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1747:7:23","nodeType":"FunctionDefinition","parameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1982,"mutability":"mutable","name":"role","nameLocation":"1763:4:23","nodeType":"VariableDeclaration","scope":1989,"src":"1755:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1755:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1984,"mutability":"mutable","name":"account","nameLocation":"1777:7:23","nodeType":"VariableDeclaration","scope":1989,"src":"1769:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1983,"name":"address","nodeType":"ElementaryTypeName","src":"1769:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1754:31:23"},"returnParameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1987,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"1809:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1986,"name":"bool","nodeType":"ElementaryTypeName","src":"1809:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1808:6:23"},"scope":2022,"src":"1738:77:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"1821:184:23","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":1997,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"2019:12:23","nodeType":"FunctionDefinition","parameters":{"id":1993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"role","nameLocation":"2040:4:23","nodeType":"VariableDeclaration","scope":1997,"src":"2032:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1991,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2032:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2031:14:23"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1997,"src":"2069:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1994,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2069:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2068:9:23"},"scope":2022,"src":"2010:68:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1998,"nodeType":"StructuredDocumentation","src":"2084:239:23","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":2005,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2337:9:23","nodeType":"FunctionDefinition","parameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"role","nameLocation":"2355:4:23","nodeType":"VariableDeclaration","scope":2005,"src":"2347:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1999,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2347:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2002,"mutability":"mutable","name":"account","nameLocation":"2369:7:23","nodeType":"VariableDeclaration","scope":2005,"src":"2361:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2001,"name":"address","nodeType":"ElementaryTypeName","src":"2361:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2346:31:23"},"returnParameters":{"id":2004,"nodeType":"ParameterList","parameters":[],"src":"2386:0:23"},"scope":2022,"src":"2328:59:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"2393:223:23","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":2013,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2630:10:23","nodeType":"FunctionDefinition","parameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"mutability":"mutable","name":"role","nameLocation":"2649:4:23","nodeType":"VariableDeclaration","scope":2013,"src":"2641:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2641:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"account","nameLocation":"2663:7:23","nodeType":"VariableDeclaration","scope":2013,"src":"2655:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2009,"name":"address","nodeType":"ElementaryTypeName","src":"2655:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2640:31:23"},"returnParameters":{"id":2012,"nodeType":"ParameterList","parameters":[],"src":"2680:0:23"},"scope":2022,"src":"2621:60:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2014,"nodeType":"StructuredDocumentation","src":"2687:491:23","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."},"functionSelector":"36568abe","id":2021,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"3192:12:23","nodeType":"FunctionDefinition","parameters":{"id":2019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2016,"mutability":"mutable","name":"role","nameLocation":"3213:4:23","nodeType":"VariableDeclaration","scope":2021,"src":"3205:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2018,"mutability":"mutable","name":"callerConfirmation","nameLocation":"3227:18:23","nodeType":"VariableDeclaration","scope":2021,"src":"3219:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2017,"name":"address","nodeType":"ElementaryTypeName","src":"3219:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3204:42:23"},"returnParameters":{"id":2020,"nodeType":"ParameterList","parameters":[],"src":"3255:0:23"},"scope":2022,"src":"3183:73:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2023,"src":"225:3033:23","usedErrors":[1949,1952],"usedEvents":[1961,1970,1979]}],"src":"109:3150:23"},"id":23},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","exportedSymbols":{"IERC1822Proxiable":[2032]},"id":2033,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2024,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822Proxiable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2025,"nodeType":"StructuredDocumentation","src":"139:203:24","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":2032,"linearizedBaseContracts":[2032],"name":"IERC1822Proxiable","nameLocation":"353:17:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2026,"nodeType":"StructuredDocumentation","src":"377:438:24","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":2031,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"829:13:24","nodeType":"FunctionDefinition","parameters":{"id":2027,"nodeType":"ParameterList","parameters":[],"src":"842:2:24"},"returnParameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2031,"src":"868:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2028,"name":"bytes32","nodeType":"ElementaryTypeName","src":"868:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"867:9:24"},"scope":2032,"src":"820:57:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2033,"src":"343:536:24","usedErrors":[],"usedEvents":[]}],"src":"113:767:24"},"id":24},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol","exportedSymbols":{"Address":[2598],"ERC1967Utils":[2335],"IBeacon":[2345],"StorageSlot":[2708]},"id":2336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2034,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:25"},{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","file":"../beacon/IBeacon.sol","id":2036,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2336,"sourceUnit":2346,"src":"140:46:25","symbolAliases":[{"foreign":{"id":2035,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"148:7:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":2038,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2336,"sourceUnit":2599,"src":"187:48:25","symbolAliases":[{"foreign":{"id":2037,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"195:7:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"../../utils/StorageSlot.sol","id":2040,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2336,"sourceUnit":2709,"src":"236:56:25","symbolAliases":[{"foreign":{"id":2039,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"244:11:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC1967Utils","contractDependencies":[],"contractKind":"library","documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"294:154:25","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots."},"fullyImplemented":true,"id":2335,"linearizedBaseContracts":[2335],"name":"ERC1967Utils","nameLocation":"457:12:25","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"660:68:25","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":2046,"name":"Upgraded","nameLocation":"739:8:25","nodeType":"EventDefinition","parameters":{"id":2045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"764:14:25","nodeType":"VariableDeclaration","scope":2046,"src":"748:30:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2043,"name":"address","nodeType":"ElementaryTypeName","src":"748:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"747:32:25"},"src":"733:47:25"},{"anonymous":false,"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"786:67:25","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":2053,"name":"AdminChanged","nameLocation":"864:12:25","nodeType":"EventDefinition","parameters":{"id":2052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"885:13:25","nodeType":"VariableDeclaration","scope":2053,"src":"877:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2048,"name":"address","nodeType":"ElementaryTypeName","src":"877:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2051,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"908:8:25","nodeType":"VariableDeclaration","scope":2053,"src":"900:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2050,"name":"address","nodeType":"ElementaryTypeName","src":"900:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"876:41:25"},"src":"858:60:25"},{"anonymous":false,"documentation":{"id":2054,"nodeType":"StructuredDocumentation","src":"924:59:25","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":2058,"name":"BeaconUpgraded","nameLocation":"994:14:25","nodeType":"EventDefinition","parameters":{"id":2057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2056,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"1025:6:25","nodeType":"VariableDeclaration","scope":2058,"src":"1009:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2055,"name":"address","nodeType":"ElementaryTypeName","src":"1009:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1008:24:25"},"src":"988:45:25"},{"constant":true,"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"1039:170:25","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1."},"id":2062,"mutability":"constant","name":"IMPLEMENTATION_SLOT","nameLocation":"1305:19:25","nodeType":"VariableDeclaration","scope":2335,"src":"1279:114:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1279:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1327:66:25","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"documentation":{"id":2063,"nodeType":"StructuredDocumentation","src":"1400:69:25","text":" @dev The `implementation` of the proxy is invalid."},"errorSelector":"4c9c8ce3","id":2067,"name":"ERC1967InvalidImplementation","nameLocation":"1480:28:25","nodeType":"ErrorDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2065,"mutability":"mutable","name":"implementation","nameLocation":"1517:14:25","nodeType":"VariableDeclaration","scope":2067,"src":"1509:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2064,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1508:24:25"},"src":"1474:59:25"},{"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"1539:60:25","text":" @dev The `admin` of the proxy is invalid."},"errorSelector":"62e77ba2","id":2072,"name":"ERC1967InvalidAdmin","nameLocation":"1610:19:25","nodeType":"ErrorDefinition","parameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"admin","nameLocation":"1638:5:25","nodeType":"VariableDeclaration","scope":2072,"src":"1630:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2069,"name":"address","nodeType":"ElementaryTypeName","src":"1630:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1629:15:25"},"src":"1604:41:25"},{"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"1651:61:25","text":" @dev The `beacon` of the proxy is invalid."},"errorSelector":"64ced0ec","id":2077,"name":"ERC1967InvalidBeacon","nameLocation":"1723:20:25","nodeType":"ErrorDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"beacon","nameLocation":"1752:6:25","nodeType":"VariableDeclaration","scope":2077,"src":"1744:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2074,"name":"address","nodeType":"ElementaryTypeName","src":"1744:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1743:16:25"},"src":"1717:43:25"},{"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"1766:82:25","text":" @dev An upgrade function sees `msg.value > 0` that may be lost."},"errorSelector":"b398979f","id":2080,"name":"ERC1967NonPayable","nameLocation":"1859:17:25","nodeType":"ErrorDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[],"src":"1876:2:25"},"src":"1853:26:25"},{"body":{"id":2092,"nodeType":"Block","src":"2018:77:25","statements":[{"expression":{"expression":{"arguments":[{"id":2088,"name":"IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"2062:19:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2086,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"2035:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2708_$","typeString":"type(library StorageSlot)"}},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2047:14:25","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2630,"src":"2035:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2604_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2035:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2090,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2083:5:25","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2603,"src":"2035:53:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2085,"id":2091,"nodeType":"Return","src":"2028:60:25"}]},"documentation":{"id":2081,"nodeType":"StructuredDocumentation","src":"1885:67:25","text":" @dev Returns the current implementation address."},"id":2093,"implemented":true,"kind":"function","modifiers":[],"name":"getImplementation","nameLocation":"1966:17:25","nodeType":"FunctionDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[],"src":"1983:2:25"},"returnParameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2093,"src":"2009:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2083,"name":"address","nodeType":"ElementaryTypeName","src":"2009:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2008:9:25"},"scope":2335,"src":"1957:138:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2119,"nodeType":"Block","src":"2249:218:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2099,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"2263:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2281:4:25","memberName":"code","nodeType":"MemberAccess","src":"2263:22:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2286:6:25","memberName":"length","nodeType":"MemberAccess","src":"2263:29:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2296:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2263:34:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2109,"nodeType":"IfStatement","src":"2259:119:25","trueBody":{"id":2108,"nodeType":"Block","src":"2299:79:25","statements":[{"errorCall":{"arguments":[{"id":2105,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"2349:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2104,"name":"ERC1967InvalidImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"2320:28:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2107,"nodeType":"RevertStatement","src":"2313:54:25"}]}},{"expression":{"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":2113,"name":"IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"2414:19:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2110,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"2387:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2708_$","typeString":"type(library StorageSlot)"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2399:14:25","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2630,"src":"2387:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2604_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2387:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2115,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2435:5:25","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2603,"src":"2387:53:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2116,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"2443:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2387:73:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2118,"nodeType":"ExpressionStatement","src":"2387:73:25"}]},"documentation":{"id":2094,"nodeType":"StructuredDocumentation","src":"2101:80:25","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":2120,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"2195:18:25","nodeType":"FunctionDefinition","parameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2096,"mutability":"mutable","name":"newImplementation","nameLocation":"2222:17:25","nodeType":"VariableDeclaration","scope":2120,"src":"2214:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2095,"name":"address","nodeType":"ElementaryTypeName","src":"2214:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2213:27:25"},"returnParameters":{"id":2098,"nodeType":"ParameterList","parameters":[],"src":"2249:0:25"},"scope":2335,"src":"2186:281:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2153,"nodeType":"Block","src":"2860:254:25","statements":[{"expression":{"arguments":[{"id":2129,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"2889:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2128,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"2870:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2870:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2131,"nodeType":"ExpressionStatement","src":"2870:37:25"},{"eventCall":{"arguments":[{"id":2133,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"2931:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2132,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"2922:8:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2922:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2135,"nodeType":"EmitStatement","src":"2917:32:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2136,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"2964:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2969:6:25","memberName":"length","nodeType":"MemberAccess","src":"2964:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2978:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2964:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2151,"nodeType":"Block","src":"3065:43:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2148,"name":"_checkNonPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"3079:16:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3079:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2150,"nodeType":"ExpressionStatement","src":"3079:18:25"}]},"id":2152,"nodeType":"IfStatement","src":"2960:148:25","trueBody":{"id":2147,"nodeType":"Block","src":"2981:78:25","statements":[{"expression":{"arguments":[{"id":2143,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"3024:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2144,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"3043:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2140,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"2995:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2598_$","typeString":"type(library Address)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3003:20:25","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":2517,"src":"2995:28:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2995:53:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2146,"nodeType":"ExpressionStatement","src":"2995:53:25"}]}}]},"documentation":{"id":2121,"nodeType":"StructuredDocumentation","src":"2473:301:25","text":" @dev Performs implementation upgrade with additional setup call if data is nonempty.\n This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n to avoid stuck value in the contract.\n Emits an {IERC1967-Upgraded} event."},"id":2154,"implemented":true,"kind":"function","modifiers":[],"name":"upgradeToAndCall","nameLocation":"2788:16:25","nodeType":"FunctionDefinition","parameters":{"id":2126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2123,"mutability":"mutable","name":"newImplementation","nameLocation":"2813:17:25","nodeType":"VariableDeclaration","scope":2154,"src":"2805:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2122,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2125,"mutability":"mutable","name":"data","nameLocation":"2845:4:25","nodeType":"VariableDeclaration","scope":2154,"src":"2832:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2124,"name":"bytes","nodeType":"ElementaryTypeName","src":"2832:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2804:46:25"},"returnParameters":{"id":2127,"nodeType":"ParameterList","parameters":[],"src":"2860:0:25"},"scope":2335,"src":"2779:335:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":2155,"nodeType":"StructuredDocumentation","src":"3120:145:25","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1."},"id":2158,"mutability":"constant","name":"ADMIN_SLOT","nameLocation":"3361:10:25","nodeType":"VariableDeclaration","scope":2335,"src":"3335:105:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3335:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":2157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3374:66:25","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":2170,"nodeType":"Block","src":"3844:68:25","statements":[{"expression":{"expression":{"arguments":[{"id":2166,"name":"ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3888:10:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2164,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"3861:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2708_$","typeString":"type(library StorageSlot)"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3873:14:25","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2630,"src":"3861:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2604_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3861:38:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3900:5:25","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2603,"src":"3861:44:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2163,"id":2169,"nodeType":"Return","src":"3854:51:25"}]},"documentation":{"id":2159,"nodeType":"StructuredDocumentation","src":"3447:340:25","text":" @dev Returns the current admin.\n TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"},"id":2171,"implemented":true,"kind":"function","modifiers":[],"name":"getAdmin","nameLocation":"3801:8:25","nodeType":"FunctionDefinition","parameters":{"id":2160,"nodeType":"ParameterList","parameters":[],"src":"3809:2:25"},"returnParameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2171,"src":"3835:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2161,"name":"address","nodeType":"ElementaryTypeName","src":"3835:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3834:9:25"},"scope":2335,"src":"3792:120:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2201,"nodeType":"Block","src":"4039:172:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2177,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"4053:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4065:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2178,"name":"address","nodeType":"ElementaryTypeName","src":"4065:7:25","typeDescriptions":{}}},"id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4065:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4053:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2191,"nodeType":"IfStatement","src":"4049:91:25","trueBody":{"id":2190,"nodeType":"Block","src":"4077:63:25","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4126:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4118:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"4118:7:25","typeDescriptions":{}}},"id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4118:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2183,"name":"ERC1967InvalidAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"4098:19:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4098:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2189,"nodeType":"RevertStatement","src":"4091:38:25"}]}},{"expression":{"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":2195,"name":"ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4176:10:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2192,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"4149:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2708_$","typeString":"type(library StorageSlot)"}},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4161:14:25","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2630,"src":"4149:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2604_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4149:38:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2197,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4188:5:25","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2603,"src":"4149:44:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2198,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"4196:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4149:55:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2200,"nodeType":"ExpressionStatement","src":"4149:55:25"}]},"documentation":{"id":2172,"nodeType":"StructuredDocumentation","src":"3918:71:25","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":2202,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4003:9:25","nodeType":"FunctionDefinition","parameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"newAdmin","nameLocation":"4021:8:25","nodeType":"VariableDeclaration","scope":2202,"src":"4013:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2173,"name":"address","nodeType":"ElementaryTypeName","src":"4013:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4012:18:25"},"returnParameters":{"id":2176,"nodeType":"ParameterList","parameters":[],"src":"4039:0:25"},"scope":2335,"src":"3994:217:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2218,"nodeType":"Block","src":"4379:85:25","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2209,"name":"getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"4407:8:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2211,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"4419:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2208,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"4394:12:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4394:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2213,"nodeType":"EmitStatement","src":"4389:39:25"},{"expression":{"arguments":[{"id":2215,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"4448:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2214,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"4438:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2217,"nodeType":"ExpressionStatement","src":"4438:19:25"}]},"documentation":{"id":2203,"nodeType":"StructuredDocumentation","src":"4217:109:25","text":" @dev Changes the admin of the proxy.\n Emits an {IERC1967-AdminChanged} event."},"id":2219,"implemented":true,"kind":"function","modifiers":[],"name":"changeAdmin","nameLocation":"4340:11:25","nodeType":"FunctionDefinition","parameters":{"id":2206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2205,"mutability":"mutable","name":"newAdmin","nameLocation":"4360:8:25","nodeType":"VariableDeclaration","scope":2219,"src":"4352:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2204,"name":"address","nodeType":"ElementaryTypeName","src":"4352:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4351:18:25"},"returnParameters":{"id":2207,"nodeType":"ParameterList","parameters":[],"src":"4379:0:25"},"scope":2335,"src":"4331:133:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":2220,"nodeType":"StructuredDocumentation","src":"4470:201:25","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1."},"id":2223,"mutability":"constant","name":"BEACON_SLOT","nameLocation":"4767:11:25","nodeType":"VariableDeclaration","scope":2335,"src":"4741:106:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4741:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":2222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4781:66:25","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":2235,"nodeType":"Block","src":"4963:69:25","statements":[{"expression":{"expression":{"arguments":[{"id":2231,"name":"BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"5007:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2229,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"4980:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2708_$","typeString":"type(library StorageSlot)"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4992:14:25","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2630,"src":"4980:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2604_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4980:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:5:25","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2603,"src":"4980:45:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2228,"id":2234,"nodeType":"Return","src":"4973:52:25"}]},"documentation":{"id":2224,"nodeType":"StructuredDocumentation","src":"4854:51:25","text":" @dev Returns the current beacon."},"id":2236,"implemented":true,"kind":"function","modifiers":[],"name":"getBeacon","nameLocation":"4919:9:25","nodeType":"FunctionDefinition","parameters":{"id":2225,"nodeType":"ParameterList","parameters":[],"src":"4928:2:25"},"returnParameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2236,"src":"4954:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2226,"name":"address","nodeType":"ElementaryTypeName","src":"4954:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4953:9:25"},"scope":2335,"src":"4910:122:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2281,"nodeType":"Block","src":"5161:390:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2242,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"5175:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5185:4:25","memberName":"code","nodeType":"MemberAccess","src":"5175:14:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5190:6:25","memberName":"length","nodeType":"MemberAccess","src":"5175:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5200:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5175:26:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2252,"nodeType":"IfStatement","src":"5171:95:25","trueBody":{"id":2251,"nodeType":"Block","src":"5203:63:25","statements":[{"errorCall":{"arguments":[{"id":2248,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"5245:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2247,"name":"ERC1967InvalidBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"5224:20:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5224:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2250,"nodeType":"RevertStatement","src":"5217:38:25"}]}},{"expression":{"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":2256,"name":"BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"5303:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2253,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"5276:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2708_$","typeString":"type(library StorageSlot)"}},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:14:25","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2630,"src":"5276:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2604_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5276:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2258,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5316:5:25","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2603,"src":"5276:45:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2259,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"5324:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5276:57:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2261,"nodeType":"ExpressionStatement","src":"5276:57:25"},{"assignments":[2263],"declarations":[{"constant":false,"id":2263,"mutability":"mutable","name":"beaconImplementation","nameLocation":"5352:20:25","nodeType":"VariableDeclaration","scope":2281,"src":"5344:28:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2262,"name":"address","nodeType":"ElementaryTypeName","src":"5344:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2269,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2265,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"5383:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2264,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"5375:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$2345_$","typeString":"type(contract IBeacon)"}},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5375:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$2345","typeString":"contract IBeacon"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5394:14:25","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":2344,"src":"5375:33:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5375:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5344:66:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2270,"name":"beaconImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"5424:20:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5445:4:25","memberName":"code","nodeType":"MemberAccess","src":"5424:25:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5450:6:25","memberName":"length","nodeType":"MemberAccess","src":"5424:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5460:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5424:37:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2280,"nodeType":"IfStatement","src":"5420:125:25","trueBody":{"id":2279,"nodeType":"Block","src":"5463:82:25","statements":[{"errorCall":{"arguments":[{"id":2276,"name":"beaconImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"5513:20:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2275,"name":"ERC1967InvalidImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"5484:28:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5484:50:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2278,"nodeType":"RevertStatement","src":"5477:57:25"}]}}]},"documentation":{"id":2237,"nodeType":"StructuredDocumentation","src":"5038:71:25","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":2282,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5123:10:25","nodeType":"FunctionDefinition","parameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"mutability":"mutable","name":"newBeacon","nameLocation":"5142:9:25","nodeType":"VariableDeclaration","scope":2282,"src":"5134:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2238,"name":"address","nodeType":"ElementaryTypeName","src":"5134:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5133:19:25"},"returnParameters":{"id":2241,"nodeType":"ParameterList","parameters":[],"src":"5161:0:25"},"scope":2335,"src":"5114:437:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2319,"nodeType":"Block","src":"6155:254:25","statements":[{"expression":{"arguments":[{"id":2291,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"6176:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2290,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"6165:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6165:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2293,"nodeType":"ExpressionStatement","src":"6165:21:25"},{"eventCall":{"arguments":[{"id":2295,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"6216:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2294,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6201:14:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6201:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2297,"nodeType":"EmitStatement","src":"6196:30:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2298,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6241:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6246:6:25","memberName":"length","nodeType":"MemberAccess","src":"6241:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6255:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6241:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2317,"nodeType":"Block","src":"6360:43:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2314,"name":"_checkNonPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"6374:16:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2316,"nodeType":"ExpressionStatement","src":"6374:18:25"}]},"id":2318,"nodeType":"IfStatement","src":"6237:166:25","trueBody":{"id":2313,"nodeType":"Block","src":"6258:96:25","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2306,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"6309:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2305,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"6301:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$2345_$","typeString":"type(contract IBeacon)"}},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6301:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$2345","typeString":"contract IBeacon"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6320:14:25","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":2344,"src":"6301:33:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6301:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2310,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6338:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2302,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"6272:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2598_$","typeString":"type(library Address)"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6280:20:25","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":2517,"src":"6272:28:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6272:71:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2312,"nodeType":"ExpressionStatement","src":"6272:71:25"}]}}]},"documentation":{"id":2283,"nodeType":"StructuredDocumentation","src":"5557:514:25","text":" @dev Change the beacon and trigger a setup call if data is nonempty.\n This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n to avoid stuck value in the contract.\n Emits an {IERC1967-BeaconUpgraded} event.\n CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n efficiency."},"id":2320,"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeaconToAndCall","nameLocation":"6085:22:25","nodeType":"FunctionDefinition","parameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2285,"mutability":"mutable","name":"newBeacon","nameLocation":"6116:9:25","nodeType":"VariableDeclaration","scope":2320,"src":"6108:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2284,"name":"address","nodeType":"ElementaryTypeName","src":"6108:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"data","nameLocation":"6140:4:25","nodeType":"VariableDeclaration","scope":2320,"src":"6127:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2286,"name":"bytes","nodeType":"ElementaryTypeName","src":"6127:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:38:25"},"returnParameters":{"id":2289,"nodeType":"ParameterList","parameters":[],"src":"6155:0:25"},"scope":2335,"src":"6076:333:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2333,"nodeType":"Block","src":"6634:86:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2324,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6648:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6652:5:25","memberName":"value","nodeType":"MemberAccess","src":"6648:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6660:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6648:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2332,"nodeType":"IfStatement","src":"6644:70:25","trueBody":{"id":2331,"nodeType":"Block","src":"6663:51:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2328,"name":"ERC1967NonPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"6684:17:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6684:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2330,"nodeType":"RevertStatement","src":"6677:26:25"}]}}]},"documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"6415:178:25","text":" @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n if an upgrade doesn't perform an initialization call."},"id":2334,"implemented":true,"kind":"function","modifiers":[],"name":"_checkNonPayable","nameLocation":"6607:16:25","nodeType":"FunctionDefinition","parameters":{"id":2322,"nodeType":"ParameterList","parameters":[],"src":"6623:2:25"},"returnParameters":{"id":2323,"nodeType":"ParameterList","parameters":[],"src":"6634:0:25"},"scope":2335,"src":"6598:122:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2336,"src":"449:6273:25","usedErrors":[2067,2072,2077,2080],"usedEvents":[2046,2053,2058]}],"src":"114:6609:25"},"id":25},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","exportedSymbols":{"IBeacon":[2345]},"id":2346,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2337,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeacon","contractDependencies":[],"contractKind":"interface","documentation":{"id":2338,"nodeType":"StructuredDocumentation","src":"134:79:26","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":2345,"linearizedBaseContracts":[2345],"name":"IBeacon","nameLocation":"224:7:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2339,"nodeType":"StructuredDocumentation","src":"238:168:26","text":" @dev Must return an address that can be used as a delegate call target.\n {UpgradeableBeacon} will check that this address is a contract."},"functionSelector":"5c60da1b","id":2344,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"420:14:26","nodeType":"FunctionDefinition","parameters":{"id":2340,"nodeType":"ParameterList","parameters":[],"src":"434:2:26"},"returnParameters":{"id":2343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2344,"src":"460:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2341,"name":"address","nodeType":"ElementaryTypeName","src":"460:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"459:9:26"},"scope":2345,"src":"411:58:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2346,"src":"214:257:26","usedErrors":[],"usedEvents":[]}],"src":"108:364:26"},"id":26},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2598]},"id":2599,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2347,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2348,"nodeType":"StructuredDocumentation","src":"127:67:27","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2598,"linearizedBaseContracts":[2598],"name":"Address","nameLocation":"203:7:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2349,"nodeType":"StructuredDocumentation","src":"217:94:27","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cd786059","id":2353,"name":"AddressInsufficientBalance","nameLocation":"322:26:27","nodeType":"ErrorDefinition","parameters":{"id":2352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2351,"mutability":"mutable","name":"account","nameLocation":"357:7:27","nodeType":"VariableDeclaration","scope":2353,"src":"349:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2350,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:17:27"},"src":"316:50:27"},{"documentation":{"id":2354,"nodeType":"StructuredDocumentation","src":"372:75:27","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":2358,"name":"AddressEmptyCode","nameLocation":"458:16:27","nodeType":"ErrorDefinition","parameters":{"id":2357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2356,"mutability":"mutable","name":"target","nameLocation":"483:6:27","nodeType":"VariableDeclaration","scope":2358,"src":"475:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2355,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:27"},"src":"452:39:27"},{"documentation":{"id":2359,"nodeType":"StructuredDocumentation","src":"497:89:27","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"1425ea42","id":2361,"name":"FailedInnerCall","nameLocation":"597:15:27","nodeType":"ErrorDefinition","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[],"src":"612:2:27"},"src":"591:24:27"},{"body":{"id":2401,"nodeType":"Block","src":"1602:260:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2371,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1624:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}],"id":2370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2369,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:27","typeDescriptions":{}}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:7:27","memberName":"balance","nodeType":"MemberAccess","src":"1616:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2374,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1640:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1616:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2384,"nodeType":"IfStatement","src":"1612:109:27","trueBody":{"id":2383,"nodeType":"Block","src":"1648:73:27","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2379,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1704:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}],"id":2378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1696:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2377,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:27","typeDescriptions":{}}},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2376,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"1669:26:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2382,"nodeType":"RevertStatement","src":"1662:48:27"}]}},{"assignments":[2386,null],"declarations":[{"constant":false,"id":2386,"mutability":"mutable","name":"success","nameLocation":"1737:7:27","nodeType":"VariableDeclaration","scope":2401,"src":"1732:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2385,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2393,"initialValue":{"arguments":[{"hexValue":"","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2387,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"1750:9:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1760:4:27","memberName":"call","nodeType":"MemberAccess","src":"1750:14:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2389,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1772:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1750:29:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1731:52:27"},{"condition":{"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:8:27","subExpression":{"id":2394,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"1798:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2400,"nodeType":"IfStatement","src":"1793:63:27","trueBody":{"id":2399,"nodeType":"Block","src":"1807:49:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2396,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"1828:15:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2398,"nodeType":"RevertStatement","src":"1821:24:27"}]}}]},"documentation":{"id":2362,"nodeType":"StructuredDocumentation","src":"621:905:27","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2402,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1540:9:27","nodeType":"FunctionDefinition","parameters":{"id":2367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2364,"mutability":"mutable","name":"recipient","nameLocation":"1566:9:27","nodeType":"VariableDeclaration","scope":2402,"src":"1550:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2363,"name":"address","nodeType":"ElementaryTypeName","src":"1550:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"amount","nameLocation":"1585:6:27","nodeType":"VariableDeclaration","scope":2402,"src":"1577:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2365,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:43:27"},"returnParameters":{"id":2368,"nodeType":"ParameterList","parameters":[],"src":"1602:0:27"},"scope":2598,"src":"1531:331:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2418,"nodeType":"Block","src":"2794:62:27","statements":[{"expression":{"arguments":[{"id":2413,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"2833:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2414,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"2841:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2847:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2412,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"2811:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2811:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2411,"id":2417,"nodeType":"Return","src":"2804:45:27"}]},"documentation":{"id":2403,"nodeType":"StructuredDocumentation","src":"1868:832:27","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":2419,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2714:12:27","nodeType":"FunctionDefinition","parameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2405,"mutability":"mutable","name":"target","nameLocation":"2735:6:27","nodeType":"VariableDeclaration","scope":2419,"src":"2727:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2404,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2407,"mutability":"mutable","name":"data","nameLocation":"2756:4:27","nodeType":"VariableDeclaration","scope":2419,"src":"2743:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2406,"name":"bytes","nodeType":"ElementaryTypeName","src":"2743:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2726:35:27"},"returnParameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2419,"src":"2780:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2409,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2779:14:27"},"scope":2598,"src":"2705:151:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2464,"nodeType":"Block","src":"3293:279:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2433,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3315:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}],"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2431,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:27","typeDescriptions":{}}},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:27","memberName":"balance","nodeType":"MemberAccess","src":"3307:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2436,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"3331:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3307:29:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2446,"nodeType":"IfStatement","src":"3303:108:27","trueBody":{"id":2445,"nodeType":"Block","src":"3338:73:27","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2441,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3394:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2598","typeString":"library Address"}],"id":2440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3386:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:27","typeDescriptions":{}}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2438,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"3359:26:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2444,"nodeType":"RevertStatement","src":"3352:48:27"}]}},{"assignments":[2448,2450],"declarations":[{"constant":false,"id":2448,"mutability":"mutable","name":"success","nameLocation":"3426:7:27","nodeType":"VariableDeclaration","scope":2464,"src":"3421:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2447,"name":"bool","nodeType":"ElementaryTypeName","src":"3421:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"returndata","nameLocation":"3448:10:27","nodeType":"VariableDeclaration","scope":2464,"src":"3435:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2449,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2457,"initialValue":{"arguments":[{"id":2455,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"3488:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2451,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"3462:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:4:27","memberName":"call","nodeType":"MemberAccess","src":"3462:11:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"3481:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3462:25:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3420:73:27"},{"expression":{"arguments":[{"id":2459,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"3537:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2460,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"3545:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2461,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"3554:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2458,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"3510:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2430,"id":2463,"nodeType":"Return","src":"3503:62:27"}]},"documentation":{"id":2420,"nodeType":"StructuredDocumentation","src":"2862:313:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":2465,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"3189:21:27","nodeType":"FunctionDefinition","parameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2422,"mutability":"mutable","name":"target","nameLocation":"3219:6:27","nodeType":"VariableDeclaration","scope":2465,"src":"3211:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2421,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2424,"mutability":"mutable","name":"data","nameLocation":"3240:4:27","nodeType":"VariableDeclaration","scope":2465,"src":"3227:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2423,"name":"bytes","nodeType":"ElementaryTypeName","src":"3227:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2426,"mutability":"mutable","name":"value","nameLocation":"3254:5:27","nodeType":"VariableDeclaration","scope":2465,"src":"3246:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2425,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3210:50:27"},"returnParameters":{"id":2430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2465,"src":"3279:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2428,"name":"bytes","nodeType":"ElementaryTypeName","src":"3279:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3278:14:27"},"scope":2598,"src":"3180:392:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2490,"nodeType":"Block","src":"3811:154:27","statements":[{"assignments":[2476,2478],"declarations":[{"constant":false,"id":2476,"mutability":"mutable","name":"success","nameLocation":"3827:7:27","nodeType":"VariableDeclaration","scope":2490,"src":"3822:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2475,"name":"bool","nodeType":"ElementaryTypeName","src":"3822:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2478,"mutability":"mutable","name":"returndata","nameLocation":"3849:10:27","nodeType":"VariableDeclaration","scope":2490,"src":"3836:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2477,"name":"bytes","nodeType":"ElementaryTypeName","src":"3836:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2483,"initialValue":{"arguments":[{"id":2481,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"3881:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2479,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"3863:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:10:27","memberName":"staticcall","nodeType":"MemberAccess","src":"3863:17:27","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3821:65:27"},{"expression":{"arguments":[{"id":2485,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"3930:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2486,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"3938:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2487,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"3947:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2484,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"3903:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2474,"id":2489,"nodeType":"Return","src":"3896:62:27"}]},"documentation":{"id":2466,"nodeType":"StructuredDocumentation","src":"3578:128:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":2491,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3720:18:27","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"target","nameLocation":"3747:6:27","nodeType":"VariableDeclaration","scope":2491,"src":"3739:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2467,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"data","nameLocation":"3768:4:27","nodeType":"VariableDeclaration","scope":2491,"src":"3755:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2469,"name":"bytes","nodeType":"ElementaryTypeName","src":"3755:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:35:27"},"returnParameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2491,"src":"3797:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2472,"name":"bytes","nodeType":"ElementaryTypeName","src":"3797:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3796:14:27"},"scope":2598,"src":"3711:254:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2516,"nodeType":"Block","src":"4203:156:27","statements":[{"assignments":[2502,2504],"declarations":[{"constant":false,"id":2502,"mutability":"mutable","name":"success","nameLocation":"4219:7:27","nodeType":"VariableDeclaration","scope":2516,"src":"4214:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2501,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2504,"mutability":"mutable","name":"returndata","nameLocation":"4241:10:27","nodeType":"VariableDeclaration","scope":2516,"src":"4228:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2503,"name":"bytes","nodeType":"ElementaryTypeName","src":"4228:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2509,"initialValue":{"arguments":[{"id":2507,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"4275:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2505,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"4255:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:12:27","memberName":"delegatecall","nodeType":"MemberAccess","src":"4255:19:27","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4213:67:27"},{"expression":{"arguments":[{"id":2511,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"4324:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2512,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"4332:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2513,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"4341:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2510,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"4297:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2500,"id":2515,"nodeType":"Return","src":"4290:62:27"}]},"documentation":{"id":2492,"nodeType":"StructuredDocumentation","src":"3971:130:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":2517,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"4115:20:27","nodeType":"FunctionDefinition","parameters":{"id":2497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2494,"mutability":"mutable","name":"target","nameLocation":"4144:6:27","nodeType":"VariableDeclaration","scope":2517,"src":"4136:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2493,"name":"address","nodeType":"ElementaryTypeName","src":"4136:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2496,"mutability":"mutable","name":"data","nameLocation":"4165:4:27","nodeType":"VariableDeclaration","scope":2517,"src":"4152:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2495,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4135:35:27"},"returnParameters":{"id":2500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2517,"src":"4189:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2498,"name":"bytes","nodeType":"ElementaryTypeName","src":"4189:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4188:14:27"},"scope":2598,"src":"4106:253:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2556,"nodeType":"Block","src":"4783:424:27","statements":[{"condition":{"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4797:8:27","subExpression":{"id":2529,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"4798:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2554,"nodeType":"Block","src":"4857:344:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2536,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"5045:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:6:27","memberName":"length","nodeType":"MemberAccess","src":"5045:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5045:22:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2540,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"5071:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:4:27","memberName":"code","nodeType":"MemberAccess","src":"5071:11:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:27","memberName":"length","nodeType":"MemberAccess","src":"5071:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5071:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5045:49:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2551,"nodeType":"IfStatement","src":"5041:119:27","trueBody":{"id":2550,"nodeType":"Block","src":"5096:64:27","statements":[{"errorCall":{"arguments":[{"id":2547,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"5138:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2546,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"5121:16:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2549,"nodeType":"RevertStatement","src":"5114:31:27"}]}},{"expression":{"id":2552,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"5180:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2528,"id":2553,"nodeType":"Return","src":"5173:17:27"}]},"id":2555,"nodeType":"IfStatement","src":"4793:408:27","trueBody":{"id":2535,"nodeType":"Block","src":"4807:44:27","statements":[{"expression":{"arguments":[{"id":2532,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4829:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2531,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"4821:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4821:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2534,"nodeType":"ExpressionStatement","src":"4821:19:27"}]}}]},"documentation":{"id":2518,"nodeType":"StructuredDocumentation","src":"4365:255:27","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."},"id":2557,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4634:26:27","nodeType":"FunctionDefinition","parameters":{"id":2525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2520,"mutability":"mutable","name":"target","nameLocation":"4678:6:27","nodeType":"VariableDeclaration","scope":2557,"src":"4670:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2519,"name":"address","nodeType":"ElementaryTypeName","src":"4670:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2522,"mutability":"mutable","name":"success","nameLocation":"4699:7:27","nodeType":"VariableDeclaration","scope":2557,"src":"4694:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2521,"name":"bool","nodeType":"ElementaryTypeName","src":"4694:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2524,"mutability":"mutable","name":"returndata","nameLocation":"4729:10:27","nodeType":"VariableDeclaration","scope":2557,"src":"4716:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2523,"name":"bytes","nodeType":"ElementaryTypeName","src":"4716:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4660:85:27"},"returnParameters":{"id":2528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2557,"src":"4769:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2526,"name":"bytes","nodeType":"ElementaryTypeName","src":"4769:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4768:14:27"},"scope":2598,"src":"4625:582:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2578,"nodeType":"Block","src":"5509:122:27","statements":[{"condition":{"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5523:8:27","subExpression":{"id":2567,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"5524:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2576,"nodeType":"Block","src":"5583:42:27","statements":[{"expression":{"id":2574,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"5604:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2566,"id":2575,"nodeType":"Return","src":"5597:17:27"}]},"id":2577,"nodeType":"IfStatement","src":"5519:106:27","trueBody":{"id":2573,"nodeType":"Block","src":"5533:44:27","statements":[{"expression":{"arguments":[{"id":2570,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"5555:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2569,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"5547:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2572,"nodeType":"ExpressionStatement","src":"5547:19:27"}]}}]},"documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"5213:189:27","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."},"id":2579,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5416:16:27","nodeType":"FunctionDefinition","parameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"success","nameLocation":"5438:7:27","nodeType":"VariableDeclaration","scope":2579,"src":"5433:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2559,"name":"bool","nodeType":"ElementaryTypeName","src":"5433:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2562,"mutability":"mutable","name":"returndata","nameLocation":"5460:10:27","nodeType":"VariableDeclaration","scope":2579,"src":"5447:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2561,"name":"bytes","nodeType":"ElementaryTypeName","src":"5447:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5432:39:27"},"returnParameters":{"id":2566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2579,"src":"5495:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2564,"name":"bytes","nodeType":"ElementaryTypeName","src":"5495:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5494:14:27"},"scope":2598,"src":"5407:224:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2596,"nodeType":"Block","src":"5798:461:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2585,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"5874:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5885:6:27","memberName":"length","nodeType":"MemberAccess","src":"5874:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5874:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2594,"nodeType":"Block","src":"6204:49:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2591,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"6225:15:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2593,"nodeType":"RevertStatement","src":"6218:24:27"}]},"id":2595,"nodeType":"IfStatement","src":"5870:383:27","trueBody":{"id":2590,"nodeType":"Block","src":"5897:301:27","statements":[{"AST":{"nodeType":"YulBlock","src":"6055:133:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6073:40:27","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"6102:10:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6096:5:27"},"nodeType":"YulFunctionCall","src":"6096:17:27"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"6077:15:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6141:2:27","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"6145:10:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6137:3:27"},"nodeType":"YulFunctionCall","src":"6137:19:27"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"6158:15:27"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6130:6:27"},"nodeType":"YulFunctionCall","src":"6130:44:27"},"nodeType":"YulExpressionStatement","src":"6130:44:27"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2582,"isOffset":false,"isSlot":false,"src":"6102:10:27","valueSize":1},{"declaration":2582,"isOffset":false,"isSlot":false,"src":"6145:10:27","valueSize":1}],"id":2589,"nodeType":"InlineAssembly","src":"6046:142:27"}]}}]},"documentation":{"id":2580,"nodeType":"StructuredDocumentation","src":"5637:101:27","text":" @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."},"id":2597,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5752:7:27","nodeType":"FunctionDefinition","parameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"returndata","nameLocation":"5773:10:27","nodeType":"VariableDeclaration","scope":2597,"src":"5760:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2581,"name":"bytes","nodeType":"ElementaryTypeName","src":"5760:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5759:25:27"},"returnParameters":{"id":2584,"nodeType":"ParameterList","parameters":[],"src":"5798:0:27"},"scope":2598,"src":"5743:516:27","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2599,"src":"195:6066:27","usedErrors":[2353,2358,2361],"usedEvents":[]}],"src":"101:6161:27"},"id":27},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2708]},"id":2709,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2600,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2601,"nodeType":"StructuredDocumentation","src":"219:1025:28","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"},"fullyImplemented":true,"id":2708,"linearizedBaseContracts":[2708],"name":"StorageSlot","nameLocation":"1253:11:28","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2604,"members":[{"constant":false,"id":2603,"mutability":"mutable","name":"value","nameLocation":"1308:5:28","nodeType":"VariableDeclaration","scope":2604,"src":"1300:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2602,"name":"address","nodeType":"ElementaryTypeName","src":"1300:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1278:11:28","nodeType":"StructDefinition","scope":2708,"src":"1271:49:28","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2607,"members":[{"constant":false,"id":2606,"mutability":"mutable","name":"value","nameLocation":"1360:5:28","nodeType":"VariableDeclaration","scope":2607,"src":"1355:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2605,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1333:11:28","nodeType":"StructDefinition","scope":2708,"src":"1326:46:28","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2610,"members":[{"constant":false,"id":2609,"mutability":"mutable","name":"value","nameLocation":"1415:5:28","nodeType":"VariableDeclaration","scope":2610,"src":"1407:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1407:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1385:11:28","nodeType":"StructDefinition","scope":2708,"src":"1378:49:28","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2613,"members":[{"constant":false,"id":2612,"mutability":"mutable","name":"value","nameLocation":"1470:5:28","nodeType":"VariableDeclaration","scope":2613,"src":"1462:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2611,"name":"uint256","nodeType":"ElementaryTypeName","src":"1462:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1440:11:28","nodeType":"StructDefinition","scope":2708,"src":"1433:49:28","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2616,"members":[{"constant":false,"id":2615,"mutability":"mutable","name":"value","nameLocation":"1523:5:28","nodeType":"VariableDeclaration","scope":2616,"src":"1516:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2614,"name":"string","nodeType":"ElementaryTypeName","src":"1516:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1495:10:28","nodeType":"StructDefinition","scope":2708,"src":"1488:47:28","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2619,"members":[{"constant":false,"id":2618,"mutability":"mutable","name":"value","nameLocation":"1574:5:28","nodeType":"VariableDeclaration","scope":2619,"src":"1568:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2617,"name":"bytes","nodeType":"ElementaryTypeName","src":"1568:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1548:9:28","nodeType":"StructDefinition","scope":2708,"src":"1541:45:28","visibility":"public"},{"body":{"id":2629,"nodeType":"Block","src":"1768:106:28","statements":[{"AST":{"nodeType":"YulBlock","src":"1830:38:28","statements":[{"nodeType":"YulAssignment","src":"1844:14:28","value":{"name":"slot","nodeType":"YulIdentifier","src":"1854:4:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1844:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2626,"isOffset":false,"isSlot":true,"src":"1844:6:28","suffix":"slot","valueSize":1},{"declaration":2622,"isOffset":false,"isSlot":false,"src":"1854:4:28","valueSize":1}],"id":2628,"nodeType":"InlineAssembly","src":"1821:47:28"}]},"documentation":{"id":2620,"nodeType":"StructuredDocumentation","src":"1592:87:28","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2630,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1693:14:28","nodeType":"FunctionDefinition","parameters":{"id":2623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2622,"mutability":"mutable","name":"slot","nameLocation":"1716:4:28","nodeType":"VariableDeclaration","scope":2630,"src":"1708:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2621,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1708:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1707:14:28"},"returnParameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"r","nameLocation":"1765:1:28","nodeType":"VariableDeclaration","scope":2630,"src":"1745:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2625,"nodeType":"UserDefinedTypeName","pathNode":{"id":2624,"name":"AddressSlot","nameLocations":["1745:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2604,"src":"1745:11:28"},"referencedDeclaration":2604,"src":"1745:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2604_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1744:23:28"},"scope":2708,"src":"1684:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2640,"nodeType":"Block","src":"2056:106:28","statements":[{"AST":{"nodeType":"YulBlock","src":"2118:38:28","statements":[{"nodeType":"YulAssignment","src":"2132:14:28","value":{"name":"slot","nodeType":"YulIdentifier","src":"2142:4:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2132:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2637,"isOffset":false,"isSlot":true,"src":"2132:6:28","suffix":"slot","valueSize":1},{"declaration":2633,"isOffset":false,"isSlot":false,"src":"2142:4:28","valueSize":1}],"id":2639,"nodeType":"InlineAssembly","src":"2109:47:28"}]},"documentation":{"id":2631,"nodeType":"StructuredDocumentation","src":"1880:87:28","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2641,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1981:14:28","nodeType":"FunctionDefinition","parameters":{"id":2634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2633,"mutability":"mutable","name":"slot","nameLocation":"2004:4:28","nodeType":"VariableDeclaration","scope":2641,"src":"1996:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2632,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1996:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1995:14:28"},"returnParameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"r","nameLocation":"2053:1:28","nodeType":"VariableDeclaration","scope":2641,"src":"2033:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2607_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2636,"nodeType":"UserDefinedTypeName","pathNode":{"id":2635,"name":"BooleanSlot","nameLocations":["2033:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2607,"src":"2033:11:28"},"referencedDeclaration":2607,"src":"2033:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2607_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2032:23:28"},"scope":2708,"src":"1972:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2651,"nodeType":"Block","src":"2344:106:28","statements":[{"AST":{"nodeType":"YulBlock","src":"2406:38:28","statements":[{"nodeType":"YulAssignment","src":"2420:14:28","value":{"name":"slot","nodeType":"YulIdentifier","src":"2430:4:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2420:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2648,"isOffset":false,"isSlot":true,"src":"2420:6:28","suffix":"slot","valueSize":1},{"declaration":2644,"isOffset":false,"isSlot":false,"src":"2430:4:28","valueSize":1}],"id":2650,"nodeType":"InlineAssembly","src":"2397:47:28"}]},"documentation":{"id":2642,"nodeType":"StructuredDocumentation","src":"2168:87:28","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2652,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2269:14:28","nodeType":"FunctionDefinition","parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"slot","nameLocation":"2292:4:28","nodeType":"VariableDeclaration","scope":2652,"src":"2284:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2284:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2283:14:28"},"returnParameters":{"id":2649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2648,"mutability":"mutable","name":"r","nameLocation":"2341:1:28","nodeType":"VariableDeclaration","scope":2652,"src":"2321:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2610_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2647,"nodeType":"UserDefinedTypeName","pathNode":{"id":2646,"name":"Bytes32Slot","nameLocations":["2321:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2610,"src":"2321:11:28"},"referencedDeclaration":2610,"src":"2321:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2610_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2320:23:28"},"scope":2708,"src":"2260:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2662,"nodeType":"Block","src":"2632:106:28","statements":[{"AST":{"nodeType":"YulBlock","src":"2694:38:28","statements":[{"nodeType":"YulAssignment","src":"2708:14:28","value":{"name":"slot","nodeType":"YulIdentifier","src":"2718:4:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2708:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2659,"isOffset":false,"isSlot":true,"src":"2708:6:28","suffix":"slot","valueSize":1},{"declaration":2655,"isOffset":false,"isSlot":false,"src":"2718:4:28","valueSize":1}],"id":2661,"nodeType":"InlineAssembly","src":"2685:47:28"}]},"documentation":{"id":2653,"nodeType":"StructuredDocumentation","src":"2456:87:28","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2663,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2557:14:28","nodeType":"FunctionDefinition","parameters":{"id":2656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2655,"mutability":"mutable","name":"slot","nameLocation":"2580:4:28","nodeType":"VariableDeclaration","scope":2663,"src":"2572:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2654,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2572:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2571:14:28"},"returnParameters":{"id":2660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2659,"mutability":"mutable","name":"r","nameLocation":"2629:1:28","nodeType":"VariableDeclaration","scope":2663,"src":"2609:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2613_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2658,"nodeType":"UserDefinedTypeName","pathNode":{"id":2657,"name":"Uint256Slot","nameLocations":["2609:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2613,"src":"2609:11:28"},"referencedDeclaration":2613,"src":"2609:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2613_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2608:23:28"},"scope":2708,"src":"2548:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2673,"nodeType":"Block","src":"2917:106:28","statements":[{"AST":{"nodeType":"YulBlock","src":"2979:38:28","statements":[{"nodeType":"YulAssignment","src":"2993:14:28","value":{"name":"slot","nodeType":"YulIdentifier","src":"3003:4:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2993:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2670,"isOffset":false,"isSlot":true,"src":"2993:6:28","suffix":"slot","valueSize":1},{"declaration":2666,"isOffset":false,"isSlot":false,"src":"3003:4:28","valueSize":1}],"id":2672,"nodeType":"InlineAssembly","src":"2970:47:28"}]},"documentation":{"id":2664,"nodeType":"StructuredDocumentation","src":"2744:86:28","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2674,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"2844:13:28","nodeType":"FunctionDefinition","parameters":{"id":2667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2666,"mutability":"mutable","name":"slot","nameLocation":"2866:4:28","nodeType":"VariableDeclaration","scope":2674,"src":"2858:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2858:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2857:14:28"},"returnParameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"r","nameLocation":"2914:1:28","nodeType":"VariableDeclaration","scope":2674,"src":"2895:20:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2616_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2669,"nodeType":"UserDefinedTypeName","pathNode":{"id":2668,"name":"StringSlot","nameLocations":["2895:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":2616,"src":"2895:10:28"},"referencedDeclaration":2616,"src":"2895:10:28","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2616_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"2894:22:28"},"scope":2708,"src":"2835:188:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2684,"nodeType":"Block","src":"3225:112:28","statements":[{"AST":{"nodeType":"YulBlock","src":"3287:44:28","statements":[{"nodeType":"YulAssignment","src":"3301:20:28","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3311:10:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3301:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2681,"isOffset":false,"isSlot":true,"src":"3301:6:28","suffix":"slot","valueSize":1},{"declaration":2677,"isOffset":false,"isSlot":true,"src":"3311:10:28","suffix":"slot","valueSize":1}],"id":2683,"nodeType":"InlineAssembly","src":"3278:53:28"}]},"documentation":{"id":2675,"nodeType":"StructuredDocumentation","src":"3029:101:28","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2685,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3144:13:28","nodeType":"FunctionDefinition","parameters":{"id":2678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2677,"mutability":"mutable","name":"store","nameLocation":"3173:5:28","nodeType":"VariableDeclaration","scope":2685,"src":"3158:20:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2676,"name":"string","nodeType":"ElementaryTypeName","src":"3158:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3157:22:28"},"returnParameters":{"id":2682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2681,"mutability":"mutable","name":"r","nameLocation":"3222:1:28","nodeType":"VariableDeclaration","scope":2685,"src":"3203:20:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2616_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2680,"nodeType":"UserDefinedTypeName","pathNode":{"id":2679,"name":"StringSlot","nameLocations":["3203:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":2616,"src":"3203:10:28"},"referencedDeclaration":2616,"src":"3203:10:28","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2616_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3202:22:28"},"scope":2708,"src":"3135:202:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2695,"nodeType":"Block","src":"3513:106:28","statements":[{"AST":{"nodeType":"YulBlock","src":"3575:38:28","statements":[{"nodeType":"YulAssignment","src":"3589:14:28","value":{"name":"slot","nodeType":"YulIdentifier","src":"3599:4:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3589:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2692,"isOffset":false,"isSlot":true,"src":"3589:6:28","suffix":"slot","valueSize":1},{"declaration":2688,"isOffset":false,"isSlot":false,"src":"3599:4:28","valueSize":1}],"id":2694,"nodeType":"InlineAssembly","src":"3566:47:28"}]},"documentation":{"id":2686,"nodeType":"StructuredDocumentation","src":"3343:85:28","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2696,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3442:12:28","nodeType":"FunctionDefinition","parameters":{"id":2689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2688,"mutability":"mutable","name":"slot","nameLocation":"3463:4:28","nodeType":"VariableDeclaration","scope":2696,"src":"3455:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3455:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3454:14:28"},"returnParameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"r","nameLocation":"3510:1:28","nodeType":"VariableDeclaration","scope":2696,"src":"3492:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2619_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2691,"nodeType":"UserDefinedTypeName","pathNode":{"id":2690,"name":"BytesSlot","nameLocations":["3492:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":2619,"src":"3492:9:28"},"referencedDeclaration":2619,"src":"3492:9:28","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2619_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3491:21:28"},"scope":2708,"src":"3433:186:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2706,"nodeType":"Block","src":"3816:112:28","statements":[{"AST":{"nodeType":"YulBlock","src":"3878:44:28","statements":[{"nodeType":"YulAssignment","src":"3892:20:28","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3902:10:28"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3892:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2703,"isOffset":false,"isSlot":true,"src":"3892:6:28","suffix":"slot","valueSize":1},{"declaration":2699,"isOffset":false,"isSlot":true,"src":"3902:10:28","suffix":"slot","valueSize":1}],"id":2705,"nodeType":"InlineAssembly","src":"3869:53:28"}]},"documentation":{"id":2697,"nodeType":"StructuredDocumentation","src":"3625:99:28","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2707,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3738:12:28","nodeType":"FunctionDefinition","parameters":{"id":2700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2699,"mutability":"mutable","name":"store","nameLocation":"3765:5:28","nodeType":"VariableDeclaration","scope":2707,"src":"3751:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2698,"name":"bytes","nodeType":"ElementaryTypeName","src":"3751:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3750:21:28"},"returnParameters":{"id":2704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2703,"mutability":"mutable","name":"r","nameLocation":"3813:1:28","nodeType":"VariableDeclaration","scope":2707,"src":"3795:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2619_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2702,"nodeType":"UserDefinedTypeName","pathNode":{"id":2701,"name":"BytesSlot","nameLocations":["3795:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":2619,"src":"3795:9:28"},"referencedDeclaration":2619,"src":"3795:9:28","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2619_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3794:21:28"},"scope":2708,"src":"3729:199:28","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2709,"src":"1245:2685:28","usedErrors":[],"usedEvents":[]}],"src":"193:3738:28"},"id":28},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4029],"SignedMath":[4134],"Strings":[2963]},"id":2964,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2710,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:29"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2712,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2964,"sourceUnit":4030,"src":"127:37:29","symbolAliases":[{"foreign":{"id":2711,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"135:4:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":2714,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2964,"sourceUnit":4135,"src":"165:49:29","symbolAliases":[{"foreign":{"id":2713,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"173:10:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2715,"nodeType":"StructuredDocumentation","src":"216:34:29","text":" @dev String operations."},"fullyImplemented":true,"id":2963,"linearizedBaseContracts":[2963],"name":"Strings","nameLocation":"259:7:29","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2718,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:29","nodeType":"VariableDeclaration","scope":2963,"src":"273:56:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2716,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:29","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2721,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:29","nodeType":"VariableDeclaration","scope":2963,"src":"335:42:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2719,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:29","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":2722,"nodeType":"StructuredDocumentation","src":"384:81:29","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":2728,"name":"StringsInsufficientHexLength","nameLocation":"476:28:29","nodeType":"ErrorDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"value","nameLocation":"513:5:29","nodeType":"VariableDeclaration","scope":2728,"src":"505:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2723,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2726,"mutability":"mutable","name":"length","nameLocation":"528:6:29","nodeType":"VariableDeclaration","scope":2728,"src":"520:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:29"},"src":"470:66:29"},{"body":{"id":2775,"nodeType":"Block","src":"708:627:29","statements":[{"id":2774,"nodeType":"UncheckedBlock","src":"718:611:29","statements":[{"assignments":[2737],"declarations":[{"constant":false,"id":2737,"mutability":"mutable","name":"length","nameLocation":"750:6:29","nodeType":"VariableDeclaration","scope":2774,"src":"742:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2736,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2744,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2740,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"770:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2738,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"759:4:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4029_$","typeString":"type(library Math)"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:29","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3849,"src":"759:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:29"},{"assignments":[2746],"declarations":[{"constant":false,"id":2746,"mutability":"mutable","name":"buffer","nameLocation":"808:6:29","nodeType":"VariableDeclaration","scope":2774,"src":"794:20:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2745,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2751,"initialValue":{"arguments":[{"id":2749,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"828:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:29","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2747,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:29"},{"assignments":[2753],"declarations":[{"constant":false,"id":2753,"mutability":"mutable","name":"ptr","nameLocation":"857:3:29","nodeType":"VariableDeclaration","scope":2774,"src":"849:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2752,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2754,"nodeType":"VariableDeclarationStatement","src":"849:11:29"},{"AST":{"nodeType":"YulBlock","src":"930:67:29","statements":[{"nodeType":"YulAssignment","src":"948:35:29","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:29","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:29"},"nodeType":"YulFunctionCall","src":"967:15:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:29"},"nodeType":"YulFunctionCall","src":"955:28:29"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2746,"isOffset":false,"isSlot":false,"src":"959:6:29","valueSize":1},{"declaration":2737,"isOffset":false,"isSlot":false,"src":"975:6:29","valueSize":1},{"declaration":2753,"isOffset":false,"isSlot":false,"src":"948:3:29","valueSize":1}],"id":2755,"nodeType":"InlineAssembly","src":"921:76:29"},{"body":{"id":2770,"nodeType":"Block","src":"1023:269:29","statements":[{"expression":{"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:29","subExpression":{"id":2757,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"1041:3:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2759,"nodeType":"ExpressionStatement","src":"1041:5:29"},{"AST":{"nodeType":"YulBlock","src":"1124:86:29","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:29","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:29"},"nodeType":"YulFunctionCall","src":"1164:14:29"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:29"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:29"},"nodeType":"YulFunctionCall","src":"1159:32:29"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:29"},"nodeType":"YulFunctionCall","src":"1146:46:29"},"nodeType":"YulExpressionStatement","src":"1146:46:29"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2718,"isOffset":false,"isSlot":false,"src":"1180:10:29","valueSize":1},{"declaration":2753,"isOffset":false,"isSlot":false,"src":"1154:3:29","valueSize":1},{"declaration":2731,"isOffset":false,"isSlot":false,"src":"1168:5:29","valueSize":1}],"id":2760,"nodeType":"InlineAssembly","src":"1115:95:29"},{"expression":{"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"1227:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2764,"nodeType":"ExpressionStatement","src":"1227:11:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"1260:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2769,"nodeType":"IfStatement","src":"1256:21:29","trueBody":{"id":2768,"nodeType":"Break","src":"1272:5:29"}}]},"condition":{"hexValue":"74727565","id":2756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2771,"nodeType":"WhileStatement","src":"1010:282:29"},{"expression":{"id":2772,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"1312:6:29","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2735,"id":2773,"nodeType":"Return","src":"1305:13:29"}]}]},"documentation":{"id":2729,"nodeType":"StructuredDocumentation","src":"542:90:29","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2776,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:29","nodeType":"FunctionDefinition","parameters":{"id":2732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"value","nameLocation":"663:5:29","nodeType":"VariableDeclaration","scope":2776,"src":"655:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2730,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:29"},"returnParameters":{"id":2735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2776,"src":"693:13:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2733,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:29"},"scope":2963,"src":"637:698:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2801,"nodeType":"Block","src":"1511:92:29","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"1542:5:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:29","trueExpression":{"hexValue":"2d","id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"1588:5:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2794,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"1573:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$4134_$","typeString":"type(library SignedMath)"}},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:29","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4133,"src":"1573:14:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2793,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"1564:8:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2784,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:29","typeDescriptions":{}}},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:29","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:29","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2783,"id":2800,"nodeType":"Return","src":"1521:75:29"}]},"documentation":{"id":2777,"nodeType":"StructuredDocumentation","src":"1341:89:29","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2802,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:29","nodeType":"FunctionDefinition","parameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"value","nameLocation":"1466:5:29","nodeType":"VariableDeclaration","scope":2802,"src":"1459:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2778,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:29"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2802,"src":"1496:13:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2781,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:29"},"scope":2963,"src":"1435:168:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2821,"nodeType":"Block","src":"1782:100:29","statements":[{"id":2820,"nodeType":"UncheckedBlock","src":"1792:84:29","statements":[{"expression":{"arguments":[{"id":2811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"1835:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"1854:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2812,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"1842:4:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4029_$","typeString":"type(library Math)"}},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:29","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3971,"src":"1842:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2810,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2822,2905,2925],"referencedDeclaration":2905,"src":"1823:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2809,"id":2819,"nodeType":"Return","src":"1816:49:29"}]}]},"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"1609:94:29","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2822,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:29","nodeType":"FunctionDefinition","parameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"value","nameLocation":"1737:5:29","nodeType":"VariableDeclaration","scope":2822,"src":"1729:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:29"},"returnParameters":{"id":2809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2822,"src":"1767:13:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2807,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:29"},"scope":2963,"src":"1708:174:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2904,"nodeType":"Block","src":"2095:435:29","statements":[{"assignments":[2833],"declarations":[{"constant":false,"id":2833,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:29","nodeType":"VariableDeclaration","scope":2904,"src":"2105:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2835,"initialValue":{"id":2834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"2126:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:29"},{"assignments":[2837],"declarations":[{"constant":false,"id":2837,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:29","nodeType":"VariableDeclaration","scope":2904,"src":"2141:19:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2836,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2846,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2841,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"2177:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:29","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2838,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:29"},{"expression":{"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2847,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"2198:6:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2849,"indexExpression":{"hexValue":"30","id":2848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:29","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:29","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2852,"nodeType":"ExpressionStatement","src":"2198:15:29"},{"expression":{"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2853,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"2223:6:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2855,"indexExpression":{"hexValue":"31","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:29","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:29","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2858,"nodeType":"ExpressionStatement","src":"2223:15:29"},{"body":{"id":2887,"nodeType":"Block","src":"2293:95:29","statements":[{"expression":{"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2873,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"2307:6:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2875,"indexExpression":{"id":2874,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"2314:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:29","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2876,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"2319:10:29","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2880,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2877,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"2330:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:29","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:29","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:29","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2882,"nodeType":"ExpressionStatement","src":"2307:40:29"},{"expression":{"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2883,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"2361:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2886,"nodeType":"ExpressionStatement","src":"2361:16:29"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2867,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"2281:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2888,"initializationExpression":{"assignments":[2860],"declarations":[{"constant":false,"id":2860,"mutability":"mutable","name":"i","nameLocation":"2261:1:29","nodeType":"VariableDeclaration","scope":2888,"src":"2253:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2866,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2862,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"2269:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:29"},"loopExpression":{"expression":{"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:29","subExpression":{"id":2870,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"2290:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2872,"nodeType":"ExpressionStatement","src":"2288:3:29"},"nodeType":"ForStatement","src":"2248:140:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"2401:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2898,"nodeType":"IfStatement","src":"2397:96:29","trueBody":{"id":2897,"nodeType":"Block","src":"2418:75:29","statements":[{"errorCall":{"arguments":[{"id":2893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"2468:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2894,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"2475:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2892,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"2439:28:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2896,"nodeType":"RevertStatement","src":"2432:50:29"}]}},{"expression":{"arguments":[{"id":2901,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"2516:6:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2899,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:29","typeDescriptions":{}}},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2831,"id":2903,"nodeType":"Return","src":"2502:21:29"}]},"documentation":{"id":2823,"nodeType":"StructuredDocumentation","src":"1888:112:29","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2905,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:29","nodeType":"FunctionDefinition","parameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2825,"mutability":"mutable","name":"value","nameLocation":"2034:5:29","nodeType":"VariableDeclaration","scope":2905,"src":"2026:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2827,"mutability":"mutable","name":"length","nameLocation":"2049:6:29","nodeType":"VariableDeclaration","scope":2905,"src":"2041:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:29"},"returnParameters":{"id":2831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2905,"src":"2080:13:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2829,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:29"},"scope":2963,"src":"2005:525:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2924,"nodeType":"Block","src":"2762:75:29","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2918,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"2807:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2916,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:29","typeDescriptions":{}}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2914,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:29","typeDescriptions":{}}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2921,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"2815:14:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2913,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2822,2905,2925],"referencedDeclaration":2905,"src":"2779:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2912,"id":2923,"nodeType":"Return","src":"2772:58:29"}]},"documentation":{"id":2906,"nodeType":"StructuredDocumentation","src":"2536:148:29","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":2925,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:29","nodeType":"FunctionDefinition","parameters":{"id":2909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2908,"mutability":"mutable","name":"addr","nameLocation":"2718:4:29","nodeType":"VariableDeclaration","scope":2925,"src":"2710:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2907,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:29"},"returnParameters":{"id":2912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2925,"src":"2747:13:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2910,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:29"},"scope":2963,"src":"2689:148:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2961,"nodeType":"Block","src":"2992:104:29","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2937,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"3015:1:29","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2935,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:29","typeDescriptions":{}}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:29","memberName":"length","nodeType":"MemberAccess","src":"3009:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2942,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"3034:1:29","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2940,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:29","typeDescriptions":{}}},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:29","memberName":"length","nodeType":"MemberAccess","src":"3028:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2949,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"3063:1:29","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2947,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:29","typeDescriptions":{}}},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2946,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2955,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"3086:1:29","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2953,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:29","typeDescriptions":{}}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2952,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2934,"id":2960,"nodeType":"Return","src":"3002:87:29"}]},"documentation":{"id":2926,"nodeType":"StructuredDocumentation","src":"2843:66:29","text":" @dev Returns true if the two strings are equal."},"id":2962,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:29","nodeType":"FunctionDefinition","parameters":{"id":2931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2928,"mutability":"mutable","name":"a","nameLocation":"2943:1:29","nodeType":"VariableDeclaration","scope":2962,"src":"2929:15:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2927,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2930,"mutability":"mutable","name":"b","nameLocation":"2960:1:29","nodeType":"VariableDeclaration","scope":2962,"src":"2946:15:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2929,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:29"},"returnParameters":{"id":2934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2933,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2962,"src":"2986:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2932,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:29"},"scope":2963,"src":"2914:182:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2964,"src":"251:2847:29","usedErrors":[2728],"usedEvents":[]}],"src":"101:2998:29"},"id":29},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2975]},"id":2976,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2965,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:30"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2966,"nodeType":"StructuredDocumentation","src":"141:279:30","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2975,"linearizedBaseContracts":[2975],"name":"IERC165","nameLocation":"431:7:30","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2967,"nodeType":"StructuredDocumentation","src":"445:340:30","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2974,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:30","nodeType":"FunctionDefinition","parameters":{"id":2970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:30","nodeType":"VariableDeclaration","scope":2974,"src":"817:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2968,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:30"},"returnParameters":{"id":2973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2974,"src":"860:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2971,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:30"},"scope":2975,"src":"790:76:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2976,"src":"421:447:30","usedErrors":[],"usedEvents":[]}],"src":"115:754:30"},"id":30},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4029]},"id":4030,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2977,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:31"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2978,"nodeType":"StructuredDocumentation","src":"129:73:31","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4029,"linearizedBaseContracts":[4029],"name":"Math","nameLocation":"211:4:31","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2979,"nodeType":"StructuredDocumentation","src":"222:50:31","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":2981,"name":"MathOverflowedMulDiv","nameLocation":"283:20:31","nodeType":"ErrorDefinition","parameters":{"id":2980,"nodeType":"ParameterList","parameters":[],"src":"303:2:31"},"src":"277:29:31"},{"canonicalName":"Math.Rounding","id":2986,"members":[{"id":2982,"name":"Floor","nameLocation":"336:5:31","nodeType":"EnumValue","src":"336:5:31"},{"id":2983,"name":"Ceil","nameLocation":"379:4:31","nodeType":"EnumValue","src":"379:4:31"},{"id":2984,"name":"Trunc","nameLocation":"421:5:31","nodeType":"EnumValue","src":"421:5:31"},{"id":2985,"name":"Expand","nameLocation":"451:6:31","nodeType":"EnumValue","src":"451:6:31"}],"name":"Rounding","nameLocation":"317:8:31","nodeType":"EnumDefinition","src":"312:169:31"},{"body":{"id":3017,"nodeType":"Block","src":"661:140:31","statements":[{"id":3016,"nodeType":"UncheckedBlock","src":"671:124:31","statements":[{"assignments":[2999],"declarations":[{"constant":false,"id":2999,"mutability":"mutable","name":"c","nameLocation":"703:1:31","nodeType":"VariableDeclaration","scope":3016,"src":"695:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2998,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3003,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3000,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"707:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3001,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"711:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3004,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"730:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3005,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"734:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3011,"nodeType":"IfStatement","src":"726:28:31","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3009,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2997,"id":3010,"nodeType":"Return","src":"737:17:31"}},{"expression":{"components":[{"hexValue":"74727565","id":3012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3013,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"782:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3014,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2997,"id":3015,"nodeType":"Return","src":"768:16:31"}]}]},"documentation":{"id":2987,"nodeType":"StructuredDocumentation","src":"487:93:31","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":3018,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:31","nodeType":"FunctionDefinition","parameters":{"id":2992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2989,"mutability":"mutable","name":"a","nameLocation":"609:1:31","nodeType":"VariableDeclaration","scope":3018,"src":"601:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2991,"mutability":"mutable","name":"b","nameLocation":"620:1:31","nodeType":"VariableDeclaration","scope":3018,"src":"612:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2990,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:31"},"returnParameters":{"id":2997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3018,"src":"646:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2993,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3018,"src":"652:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2995,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:31"},"scope":4029,"src":"585:216:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3045,"nodeType":"Block","src":"984:113:31","statements":[{"id":3044,"nodeType":"UncheckedBlock","src":"994:97:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3030,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"1022:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3031,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"1026:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3037,"nodeType":"IfStatement","src":"1018:28:31","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3029,"id":3036,"nodeType":"Return","src":"1029:17:31"}},{"expression":{"components":[{"hexValue":"74727565","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3039,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"1074:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3040,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"1078:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3029,"id":3043,"nodeType":"Return","src":"1060:20:31"}]}]},"documentation":{"id":3019,"nodeType":"StructuredDocumentation","src":"807:96:31","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":3046,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:31","nodeType":"FunctionDefinition","parameters":{"id":3024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3021,"mutability":"mutable","name":"a","nameLocation":"932:1:31","nodeType":"VariableDeclaration","scope":3046,"src":"924:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3020,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3023,"mutability":"mutable","name":"b","nameLocation":"943:1:31","nodeType":"VariableDeclaration","scope":3046,"src":"935:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3022,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:31"},"returnParameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3046,"src":"969:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3025,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3046,"src":"975:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3027,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:31"},"scope":4029,"src":"908:189:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3087,"nodeType":"Block","src":"1283:417:31","statements":[{"id":3086,"nodeType":"UncheckedBlock","src":"1293:401:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3058,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"1551:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3065,"nodeType":"IfStatement","src":"1547:28:31","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":3062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3057,"id":3064,"nodeType":"Return","src":"1559:16:31"}},{"assignments":[3067],"declarations":[{"constant":false,"id":3067,"mutability":"mutable","name":"c","nameLocation":"1597:1:31","nodeType":"VariableDeclaration","scope":3086,"src":"1589:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3066,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3071,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3068,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"1601:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3069,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"1605:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3072,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"1624:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3073,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"1628:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3075,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"1633:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3081,"nodeType":"IfStatement","src":"1620:33:31","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3079,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3057,"id":3080,"nodeType":"Return","src":"1636:17:31"}},{"expression":{"components":[{"hexValue":"74727565","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3083,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"1681:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3084,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3057,"id":3085,"nodeType":"Return","src":"1667:16:31"}]}]},"documentation":{"id":3047,"nodeType":"StructuredDocumentation","src":"1103:99:31","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":3088,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:31","nodeType":"FunctionDefinition","parameters":{"id":3052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"a","nameLocation":"1231:1:31","nodeType":"VariableDeclaration","scope":3088,"src":"1223:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3051,"mutability":"mutable","name":"b","nameLocation":"1242:1:31","nodeType":"VariableDeclaration","scope":3088,"src":"1234:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3050,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:31"},"returnParameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3088,"src":"1268:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3053,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3088,"src":"1274:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3055,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:31"},"scope":4029,"src":"1207:493:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3115,"nodeType":"Block","src":"1887:114:31","statements":[{"id":3114,"nodeType":"UncheckedBlock","src":"1897:98:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3100,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"1925:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3107,"nodeType":"IfStatement","src":"1921:29:31","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3105,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3099,"id":3106,"nodeType":"Return","src":"1933:17:31"}},{"expression":{"components":[{"hexValue":"74727565","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3109,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"1978:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3110,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"1982:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3112,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3099,"id":3113,"nodeType":"Return","src":"1964:20:31"}]}]},"documentation":{"id":3089,"nodeType":"StructuredDocumentation","src":"1706:100:31","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":3116,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:31","nodeType":"FunctionDefinition","parameters":{"id":3094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3091,"mutability":"mutable","name":"a","nameLocation":"1835:1:31","nodeType":"VariableDeclaration","scope":3116,"src":"1827:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3090,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3093,"mutability":"mutable","name":"b","nameLocation":"1846:1:31","nodeType":"VariableDeclaration","scope":3116,"src":"1838:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3092,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:31"},"returnParameters":{"id":3099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3116,"src":"1872:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3095,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3098,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3116,"src":"1878:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3097,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:31"},"scope":4029,"src":"1811:190:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3143,"nodeType":"Block","src":"2198:114:31","statements":[{"id":3142,"nodeType":"UncheckedBlock","src":"2208:98:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3128,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"2236:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3135,"nodeType":"IfStatement","src":"2232:29:31","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3127,"id":3134,"nodeType":"Return","src":"2244:17:31"}},{"expression":{"components":[{"hexValue":"74727565","id":3136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3137,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"2289:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3138,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"2293:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3140,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3127,"id":3141,"nodeType":"Return","src":"2275:20:31"}]}]},"documentation":{"id":3117,"nodeType":"StructuredDocumentation","src":"2007:110:31","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":3144,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:31","nodeType":"FunctionDefinition","parameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3119,"mutability":"mutable","name":"a","nameLocation":"2146:1:31","nodeType":"VariableDeclaration","scope":3144,"src":"2138:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3118,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3121,"mutability":"mutable","name":"b","nameLocation":"2157:1:31","nodeType":"VariableDeclaration","scope":3144,"src":"2149:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:31"},"returnParameters":{"id":3127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3144,"src":"2183:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3123,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3144,"src":"2189:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3125,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:31"},"scope":4029,"src":"2122:190:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3161,"nodeType":"Block","src":"2449:37:31","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3154,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"2466:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3155,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"2470:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3158,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"2478:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:31","trueExpression":{"id":3157,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"2474:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3153,"id":3160,"nodeType":"Return","src":"2459:20:31"}]},"documentation":{"id":3145,"nodeType":"StructuredDocumentation","src":"2318:59:31","text":" @dev Returns the largest of two numbers."},"id":3162,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:31","nodeType":"FunctionDefinition","parameters":{"id":3150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3147,"mutability":"mutable","name":"a","nameLocation":"2403:1:31","nodeType":"VariableDeclaration","scope":3162,"src":"2395:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3149,"mutability":"mutable","name":"b","nameLocation":"2414:1:31","nodeType":"VariableDeclaration","scope":3162,"src":"2406:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3148,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:31"},"returnParameters":{"id":3153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3162,"src":"2440:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3151,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:31"},"scope":4029,"src":"2382:104:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3179,"nodeType":"Block","src":"2624:37:31","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3172,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3165,"src":"2641:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3173,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"2645:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3176,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"2653:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:31","trueExpression":{"id":3175,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3165,"src":"2649:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3171,"id":3178,"nodeType":"Return","src":"2634:20:31"}]},"documentation":{"id":3163,"nodeType":"StructuredDocumentation","src":"2492:60:31","text":" @dev Returns the smallest of two numbers."},"id":3180,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:31","nodeType":"FunctionDefinition","parameters":{"id":3168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3165,"mutability":"mutable","name":"a","nameLocation":"2578:1:31","nodeType":"VariableDeclaration","scope":3180,"src":"2570:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3164,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3167,"mutability":"mutable","name":"b","nameLocation":"2589:1:31","nodeType":"VariableDeclaration","scope":3180,"src":"2581:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3166,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:31"},"returnParameters":{"id":3171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"2615:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3169,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:31"},"scope":4029,"src":"2557:104:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3202,"nodeType":"Block","src":"2845:82:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3190,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"2900:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3191,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"2904:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3193,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3194,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"2910:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3195,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"2914:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3189,"id":3201,"nodeType":"Return","src":"2892:28:31"}]},"documentation":{"id":3181,"nodeType":"StructuredDocumentation","src":"2667:102:31","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3203,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:31","nodeType":"FunctionDefinition","parameters":{"id":3186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3183,"mutability":"mutable","name":"a","nameLocation":"2799:1:31","nodeType":"VariableDeclaration","scope":3203,"src":"2791:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3182,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3185,"mutability":"mutable","name":"b","nameLocation":"2810:1:31","nodeType":"VariableDeclaration","scope":3203,"src":"2802:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3184,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:31"},"returnParameters":{"id":3189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3203,"src":"2836:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:31"},"scope":4029,"src":"2774:153:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3236,"nodeType":"Block","src":"3219:260:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3213,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3233:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3221,"nodeType":"IfStatement","src":"3229:127:31","trueBody":{"id":3220,"nodeType":"Block","src":"3241:115:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3216,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"3340:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3217,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3344:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3212,"id":3219,"nodeType":"Return","src":"3333:12:31"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3222,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"3444:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"3458:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3229,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3230,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3467:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:31","trueExpression":{"hexValue":"30","id":3225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3212,"id":3235,"nodeType":"Return","src":"3437:35:31"}]},"documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"2933:210:31","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3237,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:31","nodeType":"FunctionDefinition","parameters":{"id":3209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"a","nameLocation":"3173:1:31","nodeType":"VariableDeclaration","scope":3237,"src":"3165:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3205,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3208,"mutability":"mutable","name":"b","nameLocation":"3184:1:31","nodeType":"VariableDeclaration","scope":3237,"src":"3176:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3207,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:31"},"returnParameters":{"id":3212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3237,"src":"3210:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:31"},"scope":4029,"src":"3148:331:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3362,"nodeType":"Block","src":"3901:4018:31","statements":[{"id":3361,"nodeType":"UncheckedBlock","src":"3911:4002:31","statements":[{"assignments":[3250],"declarations":[{"constant":false,"id":3250,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:31","nodeType":"VariableDeclaration","scope":3361,"src":"4232:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3249,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3254,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3251,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"4248:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3252,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"4252:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:31"},{"assignments":[3256],"declarations":[{"constant":false,"id":3256,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:31","nodeType":"VariableDeclaration","scope":3361,"src":"4312:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3255,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3257,"nodeType":"VariableDeclarationStatement","src":"4312:13:31"},{"AST":{"nodeType":"YulBlock","src":"4392:122:31","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:31","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:31"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:31"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:31","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:31"},"nodeType":"YulFunctionCall","src":"4433:6:31"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:31"},"nodeType":"YulFunctionCall","src":"4420:20:31"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:31","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:31","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:31"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:31"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:31"},"nodeType":"YulFunctionCall","src":"4470:14:31"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:31"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:31"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:31"},"nodeType":"YulFunctionCall","src":"4486:13:31"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:31"},"nodeType":"YulFunctionCall","src":"4466:34:31"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:31"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3250,"isOffset":false,"isSlot":false,"src":"4478:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"4493:5:31","valueSize":1},{"declaration":3256,"isOffset":false,"isSlot":false,"src":"4457:5:31","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"4427:1:31","valueSize":1},{"declaration":3242,"isOffset":false,"isSlot":false,"src":"4430:1:31","valueSize":1}],"id":3258,"nodeType":"InlineAssembly","src":"4383:131:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3259,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"4595:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3267,"nodeType":"IfStatement","src":"4591:368:31","trueBody":{"id":3266,"nodeType":"Block","src":"4607:352:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3262,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"4925:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3263,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"4933:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3248,"id":3265,"nodeType":"Return","src":"4918:26:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3268,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"5065:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3269,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"5080:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3275,"nodeType":"IfStatement","src":"5061:88:31","trueBody":{"id":3274,"nodeType":"Block","src":"5087:62:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3271,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"5112:20:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3273,"nodeType":"RevertStatement","src":"5105:29:31"}]}},{"assignments":[3277],"declarations":[{"constant":false,"id":3277,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:31","nodeType":"VariableDeclaration","scope":3361,"src":"5404:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3276,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3278,"nodeType":"VariableDeclarationStatement","src":"5404:17:31"},{"AST":{"nodeType":"YulBlock","src":"5444:291:31","statements":[{"nodeType":"YulAssignment","src":"5513:38:31","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:31"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:31"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:31"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:31"},"nodeType":"YulFunctionCall","src":"5526:25:31"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:31"}]},{"nodeType":"YulAssignment","src":"5633:41:31","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:31"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:31"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:31"},"nodeType":"YulFunctionCall","src":"5653:20:31"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:31"},"nodeType":"YulFunctionCall","src":"5642:32:31"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:31"}]},{"nodeType":"YulAssignment","src":"5691:30:31","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:31"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:31"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:31"},"nodeType":"YulFunctionCall","src":"5700:21:31"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:31"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3244,"isOffset":false,"isSlot":false,"src":"5539:11:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"5667:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"5691:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"5704:5:31","valueSize":1},{"declaration":3256,"isOffset":false,"isSlot":false,"src":"5633:5:31","valueSize":1},{"declaration":3256,"isOffset":false,"isSlot":false,"src":"5646:5:31","valueSize":1},{"declaration":3277,"isOffset":false,"isSlot":false,"src":"5513:9:31","valueSize":1},{"declaration":3277,"isOffset":false,"isSlot":false,"src":"5656:9:31","valueSize":1},{"declaration":3277,"isOffset":false,"isSlot":false,"src":"5711:9:31","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"5533:1:31","valueSize":1},{"declaration":3242,"isOffset":false,"isSlot":false,"src":"5536:1:31","valueSize":1}],"id":3279,"nodeType":"InlineAssembly","src":"5435:300:31"},{"assignments":[3281],"declarations":[{"constant":false,"id":3281,"mutability":"mutable","name":"twos","nameLocation":"5947:4:31","nodeType":"VariableDeclaration","scope":3361,"src":"5939:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3288,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3282,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"5954:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3284,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"5973:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3286,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:31"},{"AST":{"nodeType":"YulBlock","src":"6008:362:31","statements":[{"nodeType":"YulAssignment","src":"6073:37:31","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:31"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:31"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:31"},"nodeType":"YulFunctionCall","src":"6088:22:31"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:31"}]},{"nodeType":"YulAssignment","src":"6177:25:31","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:31"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:31"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:31"},"nodeType":"YulFunctionCall","src":"6186:16:31"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:31"}]},{"nodeType":"YulAssignment","src":"6317:39:31","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:31","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:31"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:31"},"nodeType":"YulFunctionCall","src":"6333:12:31"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:31"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:31"},"nodeType":"YulFunctionCall","src":"6329:23:31"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:31","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:31"},"nodeType":"YulFunctionCall","src":"6325:31:31"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:31"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3244,"isOffset":false,"isSlot":false,"src":"6073:11:31","valueSize":1},{"declaration":3244,"isOffset":false,"isSlot":false,"src":"6092:11:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"6177:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"6190:5:31","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"6105:4:31","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"6197:4:31","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"6317:4:31","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"6340:4:31","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"6347:4:31","valueSize":1}],"id":3289,"nodeType":"InlineAssembly","src":"5999:371:31"},{"expression":{"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3290,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"6436:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3291,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"6445:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3292,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"6453:4:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3295,"nodeType":"ExpressionStatement","src":"6436:21:31"},{"assignments":[3297],"declarations":[{"constant":false,"id":3297,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:31","nodeType":"VariableDeclaration","scope":3361,"src":"6775:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3296,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3304,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:31","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3299,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"6798:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3301,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:31"},{"expression":{"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3305,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7031:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3307,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"7046:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3308,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7060:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3312,"nodeType":"ExpressionStatement","src":"7031:36:31"},{"expression":{"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3313,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7100:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3315,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"7115:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3316,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7129:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3320,"nodeType":"ExpressionStatement","src":"7100:36:31"},{"expression":{"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3321,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7170:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3323,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"7185:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3324,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7199:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3328,"nodeType":"ExpressionStatement","src":"7170:36:31"},{"expression":{"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3329,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7240:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3331,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"7255:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3332,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7269:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3336,"nodeType":"ExpressionStatement","src":"7240:36:31"},{"expression":{"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3337,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7310:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3339,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"7325:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3340,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7339:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3344,"nodeType":"ExpressionStatement","src":"7310:36:31"},{"expression":{"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3345,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7381:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3347,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"7396:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3348,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7410:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3352,"nodeType":"ExpressionStatement","src":"7381:36:31"},{"expression":{"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3353,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"7851:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3354,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"7860:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3355,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"7868:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3358,"nodeType":"ExpressionStatement","src":"7851:24:31"},{"expression":{"id":3359,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"7896:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3248,"id":3360,"nodeType":"Return","src":"7889:13:31"}]}]},"documentation":{"id":3238,"nodeType":"StructuredDocumentation","src":"3485:313:31","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3363,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:31","nodeType":"FunctionDefinition","parameters":{"id":3245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"x","nameLocation":"3827:1:31","nodeType":"VariableDeclaration","scope":3363,"src":"3819:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3242,"mutability":"mutable","name":"y","nameLocation":"3838:1:31","nodeType":"VariableDeclaration","scope":3363,"src":"3830:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3241,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3244,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:31","nodeType":"VariableDeclaration","scope":3363,"src":"3841:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:31"},"returnParameters":{"id":3248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3247,"mutability":"mutable","name":"result","nameLocation":"3893:6:31","nodeType":"VariableDeclaration","scope":3363,"src":"3885:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3246,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:31"},"scope":4029,"src":"3803:4116:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3405,"nodeType":"Block","src":"8161:192:31","statements":[{"assignments":[3379],"declarations":[{"constant":false,"id":3379,"mutability":"mutable","name":"result","nameLocation":"8179:6:31","nodeType":"VariableDeclaration","scope":3405,"src":"8171:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3378,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3385,"initialValue":{"arguments":[{"id":3381,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"8195:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3382,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"8198:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3383,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"8201:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3380,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3363,3406],"referencedDeclaration":3363,"src":"8188:6:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3387,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"8244:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}],"id":3386,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"8227:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2986_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3390,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"8264:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3391,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"8267:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3392,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"8270:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3389,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:31","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3402,"nodeType":"IfStatement","src":"8223:101:31","trueBody":{"id":3401,"nodeType":"Block","src":"8288:36:31","statements":[{"expression":{"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3397,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"8302:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3400,"nodeType":"ExpressionStatement","src":"8302:11:31"}]}},{"expression":{"id":3403,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"8340:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3377,"id":3404,"nodeType":"Return","src":"8333:13:31"}]},"documentation":{"id":3364,"nodeType":"StructuredDocumentation","src":"7925:121:31","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3406,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:31","nodeType":"FunctionDefinition","parameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"x","nameLocation":"8075:1:31","nodeType":"VariableDeclaration","scope":3406,"src":"8067:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3365,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3368,"mutability":"mutable","name":"y","nameLocation":"8086:1:31","nodeType":"VariableDeclaration","scope":3406,"src":"8078:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3367,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3370,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:31","nodeType":"VariableDeclaration","scope":3406,"src":"8089:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3369,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3373,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:31","nodeType":"VariableDeclaration","scope":3406,"src":"8110:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"},"typeName":{"id":3372,"nodeType":"UserDefinedTypeName","pathNode":{"id":3371,"name":"Rounding","nameLocations":["8110:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"8110:8:31"},"referencedDeclaration":2986,"src":"8110:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:31"},"returnParameters":{"id":3377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3406,"src":"8152:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3375,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:31"},"scope":4029,"src":"8051:302:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3517,"nodeType":"Block","src":"8644:1585:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3414,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"8658:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3420,"nodeType":"IfStatement","src":"8654:45:31","trueBody":{"id":3419,"nodeType":"Block","src":"8666:33:31","statements":[{"expression":{"hexValue":"30","id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3413,"id":3418,"nodeType":"Return","src":"8680:8:31"}]}},{"assignments":[3422],"declarations":[{"constant":false,"id":3422,"mutability":"mutable","name":"result","nameLocation":"9386:6:31","nodeType":"VariableDeclaration","scope":3517,"src":"9378:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3421,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3431,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3425,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"9406:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3424,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3685,3720],"referencedDeclaration":3685,"src":"9401:4:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3429,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:31"},{"id":3516,"nodeType":"UncheckedBlock","src":"9815:408:31","statements":[{"expression":{"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3432,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9839:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3433,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9849:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3434,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"9858:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9862:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3438,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3442,"nodeType":"ExpressionStatement","src":"9839:35:31"},{"expression":{"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3443,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9888:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3444,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9898:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3445,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"9907:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9911:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3449,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3453,"nodeType":"ExpressionStatement","src":"9888:35:31"},{"expression":{"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3454,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9937:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3455,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9947:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3456,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"9956:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9960:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3460,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3464,"nodeType":"ExpressionStatement","src":"9937:35:31"},{"expression":{"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3465,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9986:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3466,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"9996:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3467,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"10005:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10009:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3471,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3475,"nodeType":"ExpressionStatement","src":"9986:35:31"},{"expression":{"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3476,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10035:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10045:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3478,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"10054:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3479,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10058:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3486,"nodeType":"ExpressionStatement","src":"10035:35:31"},{"expression":{"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3487,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10084:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3488,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10094:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3489,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"10103:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3490,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10107:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3493,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3497,"nodeType":"ExpressionStatement","src":"10084:35:31"},{"expression":{"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3498,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10133:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3499,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10143:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3500,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"10152:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10156:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3504,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3508,"nodeType":"ExpressionStatement","src":"10133:35:31"},{"expression":{"arguments":[{"id":3510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10193:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3511,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"10201:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"10205:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3509,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"10189:3:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3413,"id":3515,"nodeType":"Return","src":"10182:30:31"}]}]},"documentation":{"id":3407,"nodeType":"StructuredDocumentation","src":"8359:223:31","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3518,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:31","nodeType":"FunctionDefinition","parameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"a","nameLocation":"8609:1:31","nodeType":"VariableDeclaration","scope":3518,"src":"8601:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3408,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:31"},"returnParameters":{"id":3413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3518,"src":"8635:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3411,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:31"},"scope":4029,"src":"8587:1642:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3552,"nodeType":"Block","src":"10405:164:31","statements":[{"id":3551,"nodeType":"UncheckedBlock","src":"10415:148:31","statements":[{"assignments":[3530],"declarations":[{"constant":false,"id":3530,"mutability":"mutable","name":"result","nameLocation":"10447:6:31","nodeType":"VariableDeclaration","scope":3551,"src":"10439:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3529,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3534,"initialValue":{"arguments":[{"id":3532,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"10461:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3531,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3518,3553],"referencedDeclaration":3518,"src":"10456:4:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3535,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"10484:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3537,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"10511:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}],"id":3536,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10494:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2986_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3539,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"10524:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3540,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"10533:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3542,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"10542:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:31","trueExpression":{"hexValue":"31","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3528,"id":3550,"nodeType":"Return","src":"10477:75:31"}]}]},"documentation":{"id":3519,"nodeType":"StructuredDocumentation","src":"10235:89:31","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3553,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:31","nodeType":"FunctionDefinition","parameters":{"id":3525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3521,"mutability":"mutable","name":"a","nameLocation":"10351:1:31","nodeType":"VariableDeclaration","scope":3553,"src":"10343:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3520,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3524,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:31","nodeType":"VariableDeclaration","scope":3553,"src":"10354:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"},"typeName":{"id":3523,"nodeType":"UserDefinedTypeName","pathNode":{"id":3522,"name":"Rounding","nameLocations":["10354:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"10354:8:31"},"referencedDeclaration":2986,"src":"10354:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:31"},"returnParameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3553,"src":"10396:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3526,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:31"},"scope":4029,"src":"10329:240:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3684,"nodeType":"Block","src":"10760:922:31","statements":[{"assignments":[3562],"declarations":[{"constant":false,"id":3562,"mutability":"mutable","name":"result","nameLocation":"10778:6:31","nodeType":"VariableDeclaration","scope":3684,"src":"10770:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3561,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3564,"initialValue":{"hexValue":"30","id":3563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:31"},{"id":3681,"nodeType":"UncheckedBlock","src":"10798:855:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"10826:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3579,"nodeType":"IfStatement","src":"10822:99:31","trueBody":{"id":3578,"nodeType":"Block","src":"10844:77:31","statements":[{"expression":{"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3570,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"10862:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3573,"nodeType":"ExpressionStatement","src":"10862:13:31"},{"expression":{"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3574,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10893:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3577,"nodeType":"ExpressionStatement","src":"10893:13:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3580,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"10938:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3594,"nodeType":"IfStatement","src":"10934:96:31","trueBody":{"id":3593,"nodeType":"Block","src":"10955:75:31","statements":[{"expression":{"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"10973:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3588,"nodeType":"ExpressionStatement","src":"10973:12:31"},{"expression":{"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3589,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11003:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3592,"nodeType":"ExpressionStatement","src":"11003:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11047:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3609,"nodeType":"IfStatement","src":"11043:96:31","trueBody":{"id":3608,"nodeType":"Block","src":"11064:75:31","statements":[{"expression":{"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3600,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11082:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3603,"nodeType":"ExpressionStatement","src":"11082:12:31"},{"expression":{"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11112:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3607,"nodeType":"ExpressionStatement","src":"11112:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11156:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3624,"nodeType":"IfStatement","src":"11152:96:31","trueBody":{"id":3623,"nodeType":"Block","src":"11173:75:31","statements":[{"expression":{"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11191:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3618,"nodeType":"ExpressionStatement","src":"11191:12:31"},{"expression":{"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3619,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11221:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3622,"nodeType":"ExpressionStatement","src":"11221:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11265:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3639,"nodeType":"IfStatement","src":"11261:93:31","trueBody":{"id":3638,"nodeType":"Block","src":"11281:73:31","statements":[{"expression":{"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11299:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3633,"nodeType":"ExpressionStatement","src":"11299:11:31"},{"expression":{"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11328:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3637,"nodeType":"ExpressionStatement","src":"11328:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11371:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3654,"nodeType":"IfStatement","src":"11367:93:31","trueBody":{"id":3653,"nodeType":"Block","src":"11387:73:31","statements":[{"expression":{"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3645,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11405:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3648,"nodeType":"ExpressionStatement","src":"11405:11:31"},{"expression":{"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3649,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11434:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3652,"nodeType":"ExpressionStatement","src":"11434:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3655,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11477:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3669,"nodeType":"IfStatement","src":"11473:93:31","trueBody":{"id":3668,"nodeType":"Block","src":"11493:73:31","statements":[{"expression":{"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11511:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3663,"nodeType":"ExpressionStatement","src":"11511:11:31"},{"expression":{"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3664,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11540:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3667,"nodeType":"ExpressionStatement","src":"11540:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"11583:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3680,"nodeType":"IfStatement","src":"11579:64:31","trueBody":{"id":3679,"nodeType":"Block","src":"11599:44:31","statements":[{"expression":{"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3675,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11617:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3678,"nodeType":"ExpressionStatement","src":"11617:11:31"}]}}]},{"expression":{"id":3682,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11669:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3560,"id":3683,"nodeType":"Return","src":"11662:13:31"}]},"documentation":{"id":3554,"nodeType":"StructuredDocumentation","src":"10575:119:31","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3685,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:31","nodeType":"FunctionDefinition","parameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3556,"mutability":"mutable","name":"value","nameLocation":"10721:5:31","nodeType":"VariableDeclaration","scope":3685,"src":"10713:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3555,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:31"},"returnParameters":{"id":3560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3685,"src":"10751:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:31"},"scope":4029,"src":"10699:983:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3719,"nodeType":"Block","src":"11915:168:31","statements":[{"id":3718,"nodeType":"UncheckedBlock","src":"11925:152:31","statements":[{"assignments":[3697],"declarations":[{"constant":false,"id":3697,"mutability":"mutable","name":"result","nameLocation":"11957:6:31","nodeType":"VariableDeclaration","scope":3718,"src":"11949:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3701,"initialValue":{"arguments":[{"id":3699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"11971:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3698,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3685,3720],"referencedDeclaration":3685,"src":"11966:4:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"11998:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3704,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"12025:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}],"id":3703,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"12008:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2986_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"12043:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"12052:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:31","trueExpression":{"hexValue":"31","id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3715,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3695,"id":3717,"nodeType":"Return","src":"11991:75:31"}]}]},"documentation":{"id":3686,"nodeType":"StructuredDocumentation","src":"11688:142:31","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3720,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:31","nodeType":"FunctionDefinition","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3688,"mutability":"mutable","name":"value","nameLocation":"11857:5:31","nodeType":"VariableDeclaration","scope":3720,"src":"11849:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3687,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3691,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:31","nodeType":"VariableDeclaration","scope":3720,"src":"11864:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"},"typeName":{"id":3690,"nodeType":"UserDefinedTypeName","pathNode":{"id":3689,"name":"Rounding","nameLocations":["11864:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"11864:8:31"},"referencedDeclaration":2986,"src":"11864:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:31"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3720,"src":"11906:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:31"},"scope":4029,"src":"11835:248:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3848,"nodeType":"Block","src":"12276:854:31","statements":[{"assignments":[3729],"declarations":[{"constant":false,"id":3729,"mutability":"mutable","name":"result","nameLocation":"12294:6:31","nodeType":"VariableDeclaration","scope":3848,"src":"12286:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3728,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3731,"initialValue":{"hexValue":"30","id":3730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:31"},{"id":3845,"nodeType":"UncheckedBlock","src":"12314:787:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12342:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3748,"nodeType":"IfStatement","src":"12338:103:31","trueBody":{"id":3747,"nodeType":"Block","src":"12361:80:31","statements":[{"expression":{"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3737,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12379:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3742,"nodeType":"ExpressionStatement","src":"12379:17:31"},{"expression":{"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12414:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3746,"nodeType":"ExpressionStatement","src":"12414:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12458:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3765,"nodeType":"IfStatement","src":"12454:103:31","trueBody":{"id":3764,"nodeType":"Block","src":"12477:80:31","statements":[{"expression":{"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12495:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3759,"nodeType":"ExpressionStatement","src":"12495:17:31"},{"expression":{"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12530:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3763,"nodeType":"ExpressionStatement","src":"12530:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12574:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3782,"nodeType":"IfStatement","src":"12570:103:31","trueBody":{"id":3781,"nodeType":"Block","src":"12593:80:31","statements":[{"expression":{"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3771,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12611:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3776,"nodeType":"ExpressionStatement","src":"12611:17:31"},{"expression":{"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3777,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12646:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3780,"nodeType":"ExpressionStatement","src":"12646:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12690:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3799,"nodeType":"IfStatement","src":"12686:100:31","trueBody":{"id":3798,"nodeType":"Block","src":"12708:78:31","statements":[{"expression":{"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3788,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12726:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3791,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3793,"nodeType":"ExpressionStatement","src":"12726:16:31"},{"expression":{"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3794,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12760:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3797,"nodeType":"ExpressionStatement","src":"12760:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12803:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:31","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3816,"nodeType":"IfStatement","src":"12799:100:31","trueBody":{"id":3815,"nodeType":"Block","src":"12821:78:31","statements":[{"expression":{"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12839:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:31","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3810,"nodeType":"ExpressionStatement","src":"12839:16:31"},{"expression":{"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3811,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12873:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3814,"nodeType":"ExpressionStatement","src":"12873:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12916:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3833,"nodeType":"IfStatement","src":"12912:100:31","trueBody":{"id":3832,"nodeType":"Block","src":"12934:78:31","statements":[{"expression":{"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3822,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12952:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3827,"nodeType":"ExpressionStatement","src":"12952:16:31"},{"expression":{"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3828,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12986:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3831,"nodeType":"ExpressionStatement","src":"12986:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"13029:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3844,"nodeType":"IfStatement","src":"13025:66:31","trueBody":{"id":3843,"nodeType":"Block","src":"13047:44:31","statements":[{"expression":{"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3839,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13065:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3842,"nodeType":"ExpressionStatement","src":"13065:11:31"}]}}]},{"expression":{"id":3846,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13117:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3727,"id":3847,"nodeType":"Return","src":"13110:13:31"}]},"documentation":{"id":3721,"nodeType":"StructuredDocumentation","src":"12089:120:31","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3849,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:31","nodeType":"FunctionDefinition","parameters":{"id":3724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3723,"mutability":"mutable","name":"value","nameLocation":"12237:5:31","nodeType":"VariableDeclaration","scope":3849,"src":"12229:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3722,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:31"},"returnParameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3849,"src":"12267:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3725,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:31"},"scope":4029,"src":"12214:916:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3883,"nodeType":"Block","src":"13365:170:31","statements":[{"id":3882,"nodeType":"UncheckedBlock","src":"13375:154:31","statements":[{"assignments":[3861],"declarations":[{"constant":false,"id":3861,"mutability":"mutable","name":"result","nameLocation":"13407:6:31","nodeType":"VariableDeclaration","scope":3882,"src":"13399:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3860,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3865,"initialValue":{"arguments":[{"id":3863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"13422:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3862,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3849,3884],"referencedDeclaration":3849,"src":"13416:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3866,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"13449:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3868,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"13476:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}],"id":3867,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"13459:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2986_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3871,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"13495:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"13504:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:31","trueExpression":{"hexValue":"31","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3859,"id":3881,"nodeType":"Return","src":"13442:76:31"}]}]},"documentation":{"id":3850,"nodeType":"StructuredDocumentation","src":"13136:143:31","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3884,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:31","nodeType":"FunctionDefinition","parameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3852,"mutability":"mutable","name":"value","nameLocation":"13307:5:31","nodeType":"VariableDeclaration","scope":3884,"src":"13299:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3855,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:31","nodeType":"VariableDeclaration","scope":3884,"src":"13314:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"},"typeName":{"id":3854,"nodeType":"UserDefinedTypeName","pathNode":{"id":3853,"name":"Rounding","nameLocations":["13314:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"13314:8:31"},"referencedDeclaration":2986,"src":"13314:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:31"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3884,"src":"13356:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3857,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:31"},"scope":4029,"src":"13284:251:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3970,"nodeType":"Block","src":"13855:600:31","statements":[{"assignments":[3893],"declarations":[{"constant":false,"id":3893,"mutability":"mutable","name":"result","nameLocation":"13873:6:31","nodeType":"VariableDeclaration","scope":3970,"src":"13865:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3892,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3895,"initialValue":{"hexValue":"30","id":3894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:31"},{"id":3967,"nodeType":"UncheckedBlock","src":"13893:533:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3896,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"13921:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3910,"nodeType":"IfStatement","src":"13917:98:31","trueBody":{"id":3909,"nodeType":"Block","src":"13939:76:31","statements":[{"expression":{"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"13957:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3904,"nodeType":"ExpressionStatement","src":"13957:13:31"},{"expression":{"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3905,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"13988:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3908,"nodeType":"ExpressionStatement","src":"13988:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"14032:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3925,"nodeType":"IfStatement","src":"14028:95:31","trueBody":{"id":3924,"nodeType":"Block","src":"14049:74:31","statements":[{"expression":{"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"14067:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3919,"nodeType":"ExpressionStatement","src":"14067:12:31"},{"expression":{"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3920,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"14097:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3923,"nodeType":"ExpressionStatement","src":"14097:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"14140:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3940,"nodeType":"IfStatement","src":"14136:95:31","trueBody":{"id":3939,"nodeType":"Block","src":"14157:74:31","statements":[{"expression":{"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"14175:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3934,"nodeType":"ExpressionStatement","src":"14175:12:31"},{"expression":{"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3935,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"14205:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3938,"nodeType":"ExpressionStatement","src":"14205:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3941,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"14248:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3955,"nodeType":"IfStatement","src":"14244:95:31","trueBody":{"id":3954,"nodeType":"Block","src":"14265:74:31","statements":[{"expression":{"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3946,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"14283:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3949,"nodeType":"ExpressionStatement","src":"14283:12:31"},{"expression":{"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"14313:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3953,"nodeType":"ExpressionStatement","src":"14313:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3956,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"14356:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3966,"nodeType":"IfStatement","src":"14352:64:31","trueBody":{"id":3965,"nodeType":"Block","src":"14372:44:31","statements":[{"expression":{"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"14390:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3964,"nodeType":"ExpressionStatement","src":"14390:11:31"}]}}]},{"expression":{"id":3968,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"14442:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3891,"id":3969,"nodeType":"Return","src":"14435:13:31"}]},"documentation":{"id":3885,"nodeType":"StructuredDocumentation","src":"13541:246:31","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3971,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:31","nodeType":"FunctionDefinition","parameters":{"id":3888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"value","nameLocation":"13816:5:31","nodeType":"VariableDeclaration","scope":3971,"src":"13808:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3886,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:31"},"returnParameters":{"id":3891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3971,"src":"13846:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3889,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:31"},"scope":4029,"src":"13792:663:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4008,"nodeType":"Block","src":"14692:177:31","statements":[{"id":4007,"nodeType":"UncheckedBlock","src":"14702:161:31","statements":[{"assignments":[3983],"declarations":[{"constant":false,"id":3983,"mutability":"mutable","name":"result","nameLocation":"14734:6:31","nodeType":"VariableDeclaration","scope":4007,"src":"14726:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3982,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3987,"initialValue":{"arguments":[{"id":3985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"14750:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3984,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3971,4009],"referencedDeclaration":3971,"src":"14743:6:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3988,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"14777:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3990,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"14804:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}],"id":3989,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"14787:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2986_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"14823:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:31","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3996,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3998,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"14838:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:31","trueExpression":{"hexValue":"31","id":4001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3981,"id":4006,"nodeType":"Return","src":"14770:82:31"}]}]},"documentation":{"id":3972,"nodeType":"StructuredDocumentation","src":"14461:144:31","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4009,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:31","nodeType":"FunctionDefinition","parameters":{"id":3978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3974,"mutability":"mutable","name":"value","nameLocation":"14634:5:31","nodeType":"VariableDeclaration","scope":4009,"src":"14626:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3973,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3977,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:31","nodeType":"VariableDeclaration","scope":4009,"src":"14641:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"},"typeName":{"id":3976,"nodeType":"UserDefinedTypeName","pathNode":{"id":3975,"name":"Rounding","nameLocations":["14641:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"14641:8:31"},"referencedDeclaration":2986,"src":"14641:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:31"},"returnParameters":{"id":3981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4009,"src":"14683:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3979,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:31"},"scope":4029,"src":"14610:259:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4027,"nodeType":"Block","src":"15067:48:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4020,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"15090:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}],"id":4019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4018,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:31","typeDescriptions":{}}},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":4022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":4024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4017,"id":4026,"nodeType":"Return","src":"15077:31:31"}]},"documentation":{"id":4010,"nodeType":"StructuredDocumentation","src":"14875:113:31","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":4028,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:31","nodeType":"FunctionDefinition","parameters":{"id":4014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4013,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:31","nodeType":"VariableDeclaration","scope":4028,"src":"15019:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"},"typeName":{"id":4012,"nodeType":"UserDefinedTypeName","pathNode":{"id":4011,"name":"Rounding","nameLocations":["15019:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"15019:8:31"},"referencedDeclaration":2986,"src":"15019:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2986","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:31"},"returnParameters":{"id":4017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4028,"src":"15061:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4015,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:31"},"scope":4029,"src":"14993:122:31","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4030,"src":"203:14914:31","usedErrors":[2981],"usedEvents":[]}],"src":"103:15015:31"},"id":31},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[4134]},"id":4135,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4031,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4032,"nodeType":"StructuredDocumentation","src":"135:80:32","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4134,"linearizedBaseContracts":[4134],"name":"SignedMath","nameLocation":"224:10:32","nodeType":"ContractDefinition","nodes":[{"body":{"id":4049,"nodeType":"Block","src":"376:37:32","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4042,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"393:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4043,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4037,"src":"397:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4046,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4037,"src":"405:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:32","trueExpression":{"id":4045,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"401:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4041,"id":4048,"nodeType":"Return","src":"386:20:32"}]},"documentation":{"id":4033,"nodeType":"StructuredDocumentation","src":"241:66:32","text":" @dev Returns the largest of two signed numbers."},"id":4050,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:32","nodeType":"FunctionDefinition","parameters":{"id":4038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4035,"mutability":"mutable","name":"a","nameLocation":"332:1:32","nodeType":"VariableDeclaration","scope":4050,"src":"325:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4034,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4037,"mutability":"mutable","name":"b","nameLocation":"342:1:32","nodeType":"VariableDeclaration","scope":4050,"src":"335:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4036,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:32"},"returnParameters":{"id":4041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4050,"src":"368:6:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4039,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:32"},"scope":4134,"src":"312:101:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4067,"nodeType":"Block","src":"555:37:32","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4060,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"572:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4061,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"576:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4064,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"584:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:32","trueExpression":{"id":4063,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"580:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4059,"id":4066,"nodeType":"Return","src":"565:20:32"}]},"documentation":{"id":4051,"nodeType":"StructuredDocumentation","src":"419:67:32","text":" @dev Returns the smallest of two signed numbers."},"id":4068,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:32","nodeType":"FunctionDefinition","parameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"a","nameLocation":"511:1:32","nodeType":"VariableDeclaration","scope":4068,"src":"504:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4052,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4055,"mutability":"mutable","name":"b","nameLocation":"521:1:32","nodeType":"VariableDeclaration","scope":4068,"src":"514:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4054,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:32"},"returnParameters":{"id":4059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4068,"src":"547:6:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4057,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:32"},"scope":4134,"src":"491:101:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4111,"nodeType":"Block","src":"797:162:32","statements":[{"assignments":[4079],"declarations":[{"constant":false,"id":4079,"mutability":"mutable","name":"x","nameLocation":"866:1:32","nodeType":"VariableDeclaration","scope":4111,"src":"859:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4078,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4092,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4080,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"871:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4081,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"875:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4083,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4084,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"882:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4085,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"886:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4087,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:32"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4093,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4079,"src":"911:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4098,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4079,"src":"931:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4096,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:32","typeDescriptions":{}}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:32","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4094,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:32","typeDescriptions":{}}},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4103,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"945:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4104,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"949:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4106,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4108,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4077,"id":4110,"nodeType":"Return","src":"904:48:32"}]},"documentation":{"id":4069,"nodeType":"StructuredDocumentation","src":"598:126:32","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4112,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:32","nodeType":"FunctionDefinition","parameters":{"id":4074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4071,"mutability":"mutable","name":"a","nameLocation":"753:1:32","nodeType":"VariableDeclaration","scope":4112,"src":"746:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4070,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4073,"mutability":"mutable","name":"b","nameLocation":"763:1:32","nodeType":"VariableDeclaration","scope":4112,"src":"756:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4072,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:32"},"returnParameters":{"id":4077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4112,"src":"789:6:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4075,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:32"},"scope":4134,"src":"729:230:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4132,"nodeType":"Block","src":"1103:158:32","statements":[{"id":4131,"nodeType":"UncheckedBlock","src":"1113:142:32","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4122,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"1228:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:32","subExpression":{"id":4126,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"1242:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:32","trueExpression":{"id":4125,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"1237:1:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4120,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:32","typeDescriptions":{}}},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4119,"id":4130,"nodeType":"Return","src":"1213:31:32"}]}]},"documentation":{"id":4113,"nodeType":"StructuredDocumentation","src":"965:78:32","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4133,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:32","nodeType":"FunctionDefinition","parameters":{"id":4116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4115,"mutability":"mutable","name":"n","nameLocation":"1068:1:32","nodeType":"VariableDeclaration","scope":4133,"src":"1061:8:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4114,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:32","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:32"},"returnParameters":{"id":4119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4133,"src":"1094:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:32"},"scope":4134,"src":"1048:213:32","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4135,"src":"216:1047:32","usedErrors":[],"usedEvents":[]}],"src":"109:1155:32"},"id":32},"contracts/AttestationService.sol":{"ast":{"absolutePath":"contracts/AttestationService.sol","exportedSymbols":{"AccessControlUpgradeable":[1417],"Attestation":[608],"AttestationRequest":[654],"AttestationRequestData":[647],"AttestationService":[4486],"ContextUpgradeable":[1899],"DelegatedAttestationRequest":[668],"DelegatedRevocationRequest":[719],"ERC165Upgradeable":[1939],"ERC1967Utils":[2335],"IAccessControl":[2022],"IEAS":[931],"IERC1822Proxiable":[2032],"ISchemaRegistry":[984],"ISchemaResolver":[1054],"ISemver":[994],"Initializable":[1671],"Math":[4029],"MultiAttestationRequest":[676],"MultiDelegatedAttestationRequest":[692],"MultiDelegatedRevocationRequest":[743],"MultiRevocationRequest":[727],"RevocationRequest":[705],"RevocationRequestData":[698],"SchemaRecord":[948],"Signature":[586],"SignedMath":[4134],"Strings":[2963],"UUPSUpgradeable":[1853]},"id":4487,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4136,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:33"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","id":4137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":932,"src":"58:72:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","id":4138,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":985,"src":"131:83:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","id":4139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":1055,"src":"215:92:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":4140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":1418,"src":"308:81:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":4141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":1672,"src":"390:75:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":4142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":1854,"src":"466:77:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":4143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":2964,"src":"544:51:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","id":4145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4487,"sourceUnit":625,"src":"596:93:33","symbolAliases":[{"foreign":{"id":4144,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"604:11:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4146,"name":"Initializable","nameLocations":["722:13:33"],"nodeType":"IdentifierPath","referencedDeclaration":1671,"src":"722:13:33"},"id":4147,"nodeType":"InheritanceSpecifier","src":"722:13:33"},{"baseName":{"id":4148,"name":"AccessControlUpgradeable","nameLocations":["737:24:33"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"737:24:33"},"id":4149,"nodeType":"InheritanceSpecifier","src":"737:24:33"},{"baseName":{"id":4150,"name":"UUPSUpgradeable","nameLocations":["763:15:33"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"763:15:33"},"id":4151,"nodeType":"InheritanceSpecifier","src":"763:15:33"}],"canonicalName":"AttestationService","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4486,"linearizedBaseContracts":[4486,1853,2032,1417,1939,2975,2022,1899,1671],"name":"AttestationService","nameLocation":"700:18:33","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4154,"mutability":"mutable","name":"eas","nameLocation":"798:3:33","nodeType":"VariableDeclaration","scope":4486,"src":"785:16:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"},"typeName":{"id":4153,"nodeType":"UserDefinedTypeName","pathNode":{"id":4152,"name":"IEAS","nameLocations":["785:4:33"],"nodeType":"IdentifierPath","referencedDeclaration":931,"src":"785:4:33"},"referencedDeclaration":931,"src":"785:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"visibility":"private"},{"constant":false,"id":4157,"mutability":"mutable","name":"schemaRegistry","nameLocation":"831:14:33","nodeType":"VariableDeclaration","scope":4486,"src":"807:38:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"},"typeName":{"id":4156,"nodeType":"UserDefinedTypeName","pathNode":{"id":4155,"name":"ISchemaRegistry","nameLocations":["807:15:33"],"nodeType":"IdentifierPath","referencedDeclaration":984,"src":"807:15:33"},"referencedDeclaration":984,"src":"807:15:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"visibility":"private"},{"constant":false,"id":4159,"mutability":"mutable","name":"_missionEnrollmentSchema","nameLocation":"868:24:33","nodeType":"VariableDeclaration","scope":4486,"src":"852:40:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"852:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"functionSelector":"bd462049","id":4164,"mutability":"constant","name":"ATTESTATION_CREATOR_ROLE","nameLocation":"922:24:33","nodeType":"VariableDeclaration","scope":4486,"src":"898:88:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"898:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4154544553544154494f4e5f43524541544f525f524f4c45","id":4162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"959:26:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_fe59eece44efc73d9bec857e15b77961120d43be620d135f2f6356bc328d55f1","typeString":"literal_string \"ATTESTATION_CREATOR_ROLE\""},"value":"ATTESTATION_CREATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fe59eece44efc73d9bec857e15b77961120d43be620d135f2f6356bc328d55f1","typeString":"literal_string \"ATTESTATION_CREATOR_ROLE\""}],"id":4161,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"949:9:33","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"949:37:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"id":4167,"mutability":"constant","name":"MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS","nameLocation":"1017:38:33","nodeType":"VariableDeclaration","scope":4486,"src":"992:108:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4165,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307846306243354343324234383636644141654362303639343330633630623234353230303737303337","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1058:42:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xF0bC5CC2B4866dAAeCb069430c60b24520077037"},"visibility":"private"},{"constant":false,"id":4171,"mutability":"mutable","name":"approvedAttestationCreators","nameLocation":"1140:27:33","nodeType":"VariableDeclaration","scope":4486,"src":"1107:60:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4170,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4168,"name":"address","nodeType":"ElementaryTypeName","src":"1115:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1107:24:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4169,"name":"bool","nodeType":"ElementaryTypeName","src":"1126:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"private"},{"anonymous":false,"eventSelector":"ed68f5afea10be5233231e5d15186bf1c9c0b9f6d3a767404d90688bccf293af","id":4175,"name":"SchemaCreated","nameLocation":"1180:13:33","nodeType":"EventDefinition","parameters":{"id":4174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4173,"indexed":true,"mutability":"mutable","name":"schemaId","nameLocation":"1210:8:33","nodeType":"VariableDeclaration","scope":4175,"src":"1194:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1194:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1193:26:33"},"src":"1174:46:33"},{"anonymous":false,"eventSelector":"63f86f3e95d67d75fed996a7db68f9e7eabf0600abbd54fccabf34ec3b5fa4a7","id":4183,"name":"AttestationCreated","nameLocation":"1231:18:33","nodeType":"EventDefinition","parameters":{"id":4182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4177,"indexed":true,"mutability":"mutable","name":"attestationId","nameLocation":"1266:13:33","nodeType":"VariableDeclaration","scope":4183,"src":"1250:29:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4176,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1250:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4179,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"1297:9:33","nodeType":"VariableDeclaration","scope":4183,"src":"1281:25:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4178,"name":"address","nodeType":"ElementaryTypeName","src":"1281:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4181,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"1324:8:33","nodeType":"VariableDeclaration","scope":4183,"src":"1308:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4180,"name":"address","nodeType":"ElementaryTypeName","src":"1308:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1249:84:33"},"src":"1225:109:33"},{"body":{"id":4190,"nodeType":"Block","src":"1407:39:33","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4187,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"1417:20:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1417:22:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4189,"nodeType":"ExpressionStatement","src":"1417:22:33"}]},"documentation":{"id":4184,"nodeType":"StructuredDocumentation","src":"1340:48:33","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":4191,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4185,"nodeType":"ParameterList","parameters":[],"src":"1404:2:33"},"returnParameters":{"id":4186,"nodeType":"ParameterList","parameters":[],"src":"1407:0:33"},"scope":4486,"src":"1393:53:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4247,"nodeType":"Block","src":"1530:384:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4201,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"1548:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1564:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1556:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4202,"name":"address","nodeType":"ElementaryTypeName","src":"1556:7:33","typeDescriptions":{}}},"id":4205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1556:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1548:18:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4207,"name":"_schemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"1570:15:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1597:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1589:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4208,"name":"address","nodeType":"ElementaryTypeName","src":"1589:7:33","typeDescriptions":{}}},"id":4211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1589:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1570:29:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1548:51:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642061646472657373","id":4214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1601:17:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226","typeString":"literal_string \"Invalid address\""},"value":"Invalid address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226","typeString":"literal_string \"Invalid address\""}],"id":4200,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1540:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1540:79:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4216,"nodeType":"ExpressionStatement","src":"1540:79:33"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4217,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"1629:20:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1629:22:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4219,"nodeType":"ExpressionStatement","src":"1629:22:33"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4220,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"1661:22:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4222,"nodeType":"ExpressionStatement","src":"1661:24:33"},{"expression":{"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4223,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"1696:3:33","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4225,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"1707:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4224,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"1702:4:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IEAS_$931_$","typeString":"type(contract IEAS)"}},"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1702:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"src":"1696:16:33","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"id":4228,"nodeType":"ExpressionStatement","src":"1696:16:33"},{"expression":{"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4229,"name":"schemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"1722:14:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4231,"name":"_schemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"1755:15:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4230,"name":"ISchemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"1739:15:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISchemaRegistry_$984_$","typeString":"type(contract ISchemaRegistry)"}},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:32:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"src":"1722:49:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"id":4234,"nodeType":"ExpressionStatement","src":"1722:49:33"},{"expression":{"arguments":[{"id":4236,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"1792:18:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4237,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1812:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1816:6:33","memberName":"sender","nodeType":"MemberAccess","src":"1812:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4235,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"1781:10:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1781:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4240,"nodeType":"ExpressionStatement","src":"1781:42:33"},{"expression":{"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4241,"name":"approvedAttestationCreators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"1833:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4243,"indexExpression":{"id":4242,"name":"MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"1861:38:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1833:67:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1903:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1833:74:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4246,"nodeType":"ExpressionStatement","src":"1833:74:33"}]},"functionSelector":"485cc955","id":4248,"implemented":true,"kind":"function","modifiers":[{"id":4198,"kind":"modifierInvocation","modifierName":{"id":4197,"name":"initializer","nameLocations":["1518:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":1525,"src":"1518:11:33"},"nodeType":"ModifierInvocation","src":"1518:11:33"}],"name":"initialize","nameLocation":"1461:10:33","nodeType":"FunctionDefinition","parameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4193,"mutability":"mutable","name":"_eas","nameLocation":"1480:4:33","nodeType":"VariableDeclaration","scope":4248,"src":"1472:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4192,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4195,"mutability":"mutable","name":"_schemaRegistry","nameLocation":"1494:15:33","nodeType":"VariableDeclaration","scope":4248,"src":"1486:23:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4194,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1471:39:33"},"returnParameters":{"id":4199,"nodeType":"ParameterList","parameters":[],"src":"1530:0:33"},"scope":4486,"src":"1452:462:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4290,"nodeType":"Block","src":"1999:373:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4255,"name":"_missionEnrollmentSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"2017:24:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2053:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2045:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2045:7:33","typeDescriptions":{}}},"id":4259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2045:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2017:38:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536368656d6120616c72656164792063726561746564","id":4261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2057:24:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_320bc07c8178160cb86581a0aa13b126e49a06b2a074c60803ef78499b8b2de0","typeString":"literal_string \"Schema already created\""},"value":"Schema already created"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_320bc07c8178160cb86581a0aa13b126e49a06b2a074c60803ef78499b8b2de0","typeString":"literal_string \"Schema already created\""}],"id":4254,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2009:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2009:73:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4263,"nodeType":"ExpressionStatement","src":"2009:73:33"},{"assignments":[4265],"declarations":[{"constant":false,"id":4265,"mutability":"mutable","name":"schema","nameLocation":"2106:6:33","nodeType":"VariableDeclaration","scope":4290,"src":"2092:20:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4264,"name":"string","nodeType":"ElementaryTypeName","src":"2092:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4267,"initialValue":{"hexValue":"616464726573732075736572416464726573732c75696e7432353620746f6b656e49642c75696e743235362074696d657374616d702c61646472657373206174746573746572","id":4266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2115:72:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7938286577deae3255a22639200988050aee7d22888f2c89de893baadff27ea","typeString":"literal_string \"address userAddress,uint256 tokenId,uint256 timestamp,address attester\""},"value":"address userAddress,uint256 tokenId,uint256 timestamp,address attester"},"nodeType":"VariableDeclarationStatement","src":"2092:95:33"},{"assignments":[4269],"declarations":[{"constant":false,"id":4269,"mutability":"mutable","name":"schemaId","nameLocation":"2205:8:33","nodeType":"VariableDeclaration","scope":4290,"src":"2197:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2197:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4281,"initialValue":{"arguments":[{"id":4272,"name":"schema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"2240:6:33","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"hexValue":"30","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2272:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2264:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4274,"name":"address","nodeType":"ElementaryTypeName","src":"2264:7:33","typeDescriptions":{}}},"id":4277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2264:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4273,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"2248:15:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISchemaResolver_$1054_$","typeString":"type(contract ISchemaResolver)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2248:27:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"}},{"hexValue":"74727565","id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2277:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4270,"name":"schemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"2216:14:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2231:8:33","memberName":"register","nodeType":"MemberAccess","referencedDeclaration":974,"src":"2216:23:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_contract$_ISchemaResolver_$1054_$_t_bool_$returns$_t_bytes32_$","typeString":"function (string memory,contract ISchemaResolver,bool) external returns (bytes32)"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2216:66:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2197:85:33"},{"expression":{"id":4284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4282,"name":"_missionEnrollmentSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"2292:24:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4283,"name":"schemaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"2319:8:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2292:35:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4285,"nodeType":"ExpressionStatement","src":"2292:35:33"},{"eventCall":{"arguments":[{"id":4287,"name":"schemaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"2356:8:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4286,"name":"SchemaCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4175,"src":"2342:13:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2342:23:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4289,"nodeType":"EmitStatement","src":"2337:28:33"}]},"functionSelector":"e27fadab","id":4291,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4251,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"1979:18:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4252,"kind":"modifierInvocation","modifierName":{"id":4250,"name":"onlyRole","nameLocations":["1970:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":1112,"src":"1970:8:33"},"nodeType":"ModifierInvocation","src":"1970:28:33"}],"name":"createMissionEnrollmentSchema","nameLocation":"1929:29:33","nodeType":"FunctionDefinition","parameters":{"id":4249,"nodeType":"ParameterList","parameters":[],"src":"1958:2:33"},"returnParameters":{"id":4253,"nodeType":"ParameterList","parameters":[],"src":"1999:0:33"},"scope":4486,"src":"1920:452:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4381,"nodeType":"Block","src":"2485:921:33","statements":[{"expression":{"arguments":[{"baseExpression":{"id":4301,"name":"approvedAttestationCreators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"2503:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4304,"indexExpression":{"expression":{"id":4302,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2531:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2535:6:33","memberName":"sender","nodeType":"MemberAccess","src":"2531:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2503:39:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420617574686f72697a656420746f20637265617465206174746573746174696f6e73","id":4305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2544:39:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_99cc956d7924542614737dd71154e80a10f9ecd188c70fa99b2ffc8dde91e9c6","typeString":"literal_string \"Not authorized to create attestations\""},"value":"Not authorized to create attestations"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99cc956d7924542614737dd71154e80a10f9ecd188c70fa99b2ffc8dde91e9c6","typeString":"literal_string \"Not authorized to create attestations\""}],"id":4300,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2495:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2495:89:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4307,"nodeType":"ExpressionStatement","src":"2495:89:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4309,"name":"_missionEnrollmentSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"2602:24:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2638:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2630:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2630:7:33","typeDescriptions":{}}},"id":4313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2602:38:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536368656d61206e6f742063726561746564","id":4315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2642:20:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7590e47e33f92b1ed6dc67c39e9be7a8f7016e52755f75e79272ee5abf05ab9","typeString":"literal_string \"Schema not created\""},"value":"Schema not created"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7590e47e33f92b1ed6dc67c39e9be7a8f7016e52755f75e79272ee5abf05ab9","typeString":"literal_string \"Schema not created\""}],"id":4308,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2594:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2594:69:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4317,"nodeType":"ExpressionStatement","src":"2594:69:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4319,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"2681:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2702:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2694:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4320,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:33","typeDescriptions":{}}},"id":4323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2694:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2681:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420726563697069656e74","id":4325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2706:19:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d","typeString":"literal_string \"Invalid recipient\""},"value":"Invalid recipient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d","typeString":"literal_string \"Invalid recipient\""}],"id":4318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2673:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2673:53:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4327,"nodeType":"ExpressionStatement","src":"2673:53:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4329,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"2744:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2755:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2744:12:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420746f6b656e204944","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2758:18:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48","typeString":"literal_string \"Invalid token ID\""},"value":"Invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48","typeString":"literal_string \"Invalid token ID\""}],"id":4328,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2736:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4334,"nodeType":"ExpressionStatement","src":"2736:41:33"},{"assignments":[4336],"declarations":[{"constant":false,"id":4336,"mutability":"mutable","name":"data","nameLocation":"2801:4:33","nodeType":"VariableDeclaration","scope":4381,"src":"2788:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4335,"name":"bytes","nodeType":"ElementaryTypeName","src":"2788:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4346,"initialValue":{"arguments":[{"id":4339,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"2819:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4340,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"2830:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4341,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2839:5:33","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2845:9:33","memberName":"timestamp","nodeType":"MemberAccess","src":"2839:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4343,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2856:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2860:6:33","memberName":"sender","nodeType":"MemberAccess","src":"2856:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4337,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2808:3:33","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2812:6:33","memberName":"encode","nodeType":"MemberAccess","src":"2808:10:33","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2808:59:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2788:79:33"},{"assignments":[4349],"declarations":[{"constant":false,"id":4349,"mutability":"mutable","name":"request","nameLocation":"2904:7:33","nodeType":"VariableDeclaration","scope":4381,"src":"2878:33:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":4348,"nodeType":"UserDefinedTypeName","pathNode":{"id":4347,"name":"AttestationRequest","nameLocations":["2878:18:33"],"nodeType":"IdentifierPath","referencedDeclaration":654,"src":"2878:18:33"},"referencedDeclaration":654,"src":"2878:18:33","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"}],"id":4364,"initialValue":{"arguments":[{"id":4351,"name":"_missionEnrollmentSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"2955:24:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4353,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"3051:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3094:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"74727565","id":4355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3124:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"arguments":[{"hexValue":"30","id":4358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3162:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3154:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3154:7:33","typeDescriptions":{}}},"id":4359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3154:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4360,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"3188:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3217:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4352,"name":"AttestationRequestData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"2999:22:33","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AttestationRequestData_$647_storage_ptr_$","typeString":"type(struct AttestationRequestData storage pointer)"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3040:9:33","3078:14:33","3113:9:33","3146:6:33","3182:4:33","3210:5:33"],"names":["recipient","expirationTime","revocable","refUID","data","value"],"nodeType":"FunctionCall","src":"2999:234:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_memory_ptr","typeString":"struct AttestationRequestData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_struct$_AttestationRequestData_$647_memory_ptr","typeString":"struct AttestationRequestData memory"}],"id":4350,"name":"AttestationRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"2914:18:33","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AttestationRequest_$654_storage_ptr_$","typeString":"type(struct AttestationRequest storage pointer)"}},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2947:6:33","2993:4:33"],"names":["schema","data"],"nodeType":"FunctionCall","src":"2914:330:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest memory"}},"nodeType":"VariableDeclarationStatement","src":"2878:366:33"},{"assignments":[4366],"declarations":[{"constant":false,"id":4366,"mutability":"mutable","name":"attestationId","nameLocation":"3263:13:33","nodeType":"VariableDeclaration","scope":4381,"src":"3255:21:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3255:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4371,"initialValue":{"arguments":[{"id":4369,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"3290:7:33","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest memory"}],"expression":{"id":4367,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"3279:3:33","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3283:6:33","memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":800,"src":"3279:10:33","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_AttestationRequest_$654_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct AttestationRequest memory) payable external returns (bytes32)"}},"id":4370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3279:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3255:43:33"},{"eventCall":{"arguments":[{"id":4373,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"3332:13:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4374,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"3347:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4375,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3358:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3362:6:33","memberName":"sender","nodeType":"MemberAccess","src":"3358:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4372,"name":"AttestationCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"3313:18:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3313:56:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4378,"nodeType":"EmitStatement","src":"3308:61:33"},{"expression":{"id":4379,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"3386:13:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4299,"id":4380,"nodeType":"Return","src":"3379:20:33"}]},"functionSelector":"624b04bd","id":4382,"implemented":true,"kind":"function","modifiers":[],"name":"createMissionEnrollmentAttestation","nameLocation":"2387:34:33","nodeType":"FunctionDefinition","parameters":{"id":4296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4293,"mutability":"mutable","name":"recipient","nameLocation":"2430:9:33","nodeType":"VariableDeclaration","scope":4382,"src":"2422:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4292,"name":"address","nodeType":"ElementaryTypeName","src":"2422:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4295,"mutability":"mutable","name":"tokenId","nameLocation":"2449:7:33","nodeType":"VariableDeclaration","scope":4382,"src":"2441:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4294,"name":"uint256","nodeType":"ElementaryTypeName","src":"2441:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2421:36:33"},"returnParameters":{"id":4299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4382,"src":"2476:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2476:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2475:9:33"},"scope":4486,"src":"2378:1028:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4417,"nodeType":"Block","src":"3491:257:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4390,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"3509:13:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3534:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4392,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3526:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3526:7:33","typeDescriptions":{}}},"id":4394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3526:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3509:27:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206174746573746174696f6e204944","id":4396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3538:24:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_be89daa06189757200215a4c2511aa872de4325ebdb77df3a283e69ff63e623f","typeString":"literal_string \"Invalid attestation ID\""},"value":"Invalid attestation ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_be89daa06189757200215a4c2511aa872de4325ebdb77df3a283e69ff63e623f","typeString":"literal_string \"Invalid attestation ID\""}],"id":4389,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3501:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3501:62:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4398,"nodeType":"ExpressionStatement","src":"3501:62:33"},{"assignments":[4401],"declarations":[{"constant":false,"id":4401,"mutability":"mutable","name":"attestation","nameLocation":"3592:11:33","nodeType":"VariableDeclaration","scope":4417,"src":"3573:30:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":4400,"nodeType":"UserDefinedTypeName","pathNode":{"id":4399,"name":"Attestation","nameLocations":["3573:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":608,"src":"3573:11:33"},"referencedDeclaration":608,"src":"3573:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":4406,"initialValue":{"arguments":[{"id":4404,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"3625:13:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4402,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"3606:3:33","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3610:14:33","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":904,"src":"3606:18:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$608_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3606:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"3573:66:33"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4407,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"3656:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_memory_ptr","typeString":"struct Attestation memory"}},"id":4408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3668:3:33","memberName":"uid","nodeType":"MemberAccess","referencedDeclaration":589,"src":"3656:15:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4409,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"3675:13:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3656:32:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"baseExpression":{"id":4411,"name":"approvedAttestationCreators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"3692:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4414,"indexExpression":{"expression":{"id":4412,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"3720:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$608_memory_ptr","typeString":"struct Attestation memory"}},"id":4413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3732:8:33","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":603,"src":"3720:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3692:49:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3656:85:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4388,"id":4416,"nodeType":"Return","src":"3649:92:33"}]},"functionSelector":"08f46957","id":4418,"implemented":true,"kind":"function","modifiers":[],"name":"verifyAttestation","nameLocation":"3421:17:33","nodeType":"FunctionDefinition","parameters":{"id":4385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4384,"mutability":"mutable","name":"attestationId","nameLocation":"3447:13:33","nodeType":"VariableDeclaration","scope":4418,"src":"3439:21:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3439:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3438:23:33"},"returnParameters":{"id":4388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4418,"src":"3485:4:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4386,"name":"bool","nodeType":"ElementaryTypeName","src":"3485:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3484:6:33"},"scope":4486,"src":"3412:336:33","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4432,"nodeType":"Block","src":"3846:60:33","statements":[{"expression":{"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4426,"name":"approvedAttestationCreators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"3856:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4428,"indexExpression":{"id":4427,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4420,"src":"3884:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3856:36:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3895:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3856:43:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4431,"nodeType":"ExpressionStatement","src":"3856:43:33"}]},"functionSelector":"1ecf2fbf","id":4433,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4423,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3826:18:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4424,"kind":"modifierInvocation","modifierName":{"id":4422,"name":"onlyRole","nameLocations":["3817:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":1112,"src":"3817:8:33"},"nodeType":"ModifierInvocation","src":"3817:28:33"}],"name":"grantAttestationCreatorRole","nameLocation":"3763:27:33","nodeType":"FunctionDefinition","parameters":{"id":4421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4420,"mutability":"mutable","name":"account","nameLocation":"3799:7:33","nodeType":"VariableDeclaration","scope":4433,"src":"3791:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4419,"name":"address","nodeType":"ElementaryTypeName","src":"3791:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3790:17:33"},"returnParameters":{"id":4425,"nodeType":"ParameterList","parameters":[],"src":"3846:0:33"},"scope":4486,"src":"3754:152:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4454,"nodeType":"Block","src":"4005:181:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4442,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"4023:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4443,"name":"MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"4034:38:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4023:49:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207265766f6b6520726f6c652066726f6d206d61696e206174746573746174696f6e2063726561746f72","id":4445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4074:50:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_b3ae426922f694fceb367a45d8bec40e467d2d775ec5cdb3e494c7a88dcc5de6","typeString":"literal_string \"Cannot revoke role from main attestation creator\""},"value":"Cannot revoke role from main attestation creator"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b3ae426922f694fceb367a45d8bec40e467d2d775ec5cdb3e494c7a88dcc5de6","typeString":"literal_string \"Cannot revoke role from main attestation creator\""}],"id":4441,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4015:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:110:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4447,"nodeType":"ExpressionStatement","src":"4015:110:33"},{"expression":{"id":4452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4448,"name":"approvedAttestationCreators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"4135:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4450,"indexExpression":{"id":4449,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"4163:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4135:36:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4174:5:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4135:44:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4453,"nodeType":"ExpressionStatement","src":"4135:44:33"}]},"functionSelector":"677339ce","id":4455,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4438,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3985:18:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4439,"kind":"modifierInvocation","modifierName":{"id":4437,"name":"onlyRole","nameLocations":["3976:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":1112,"src":"3976:8:33"},"nodeType":"ModifierInvocation","src":"3976:28:33"}],"name":"revokeAttestationCreatorRole","nameLocation":"3921:28:33","nodeType":"FunctionDefinition","parameters":{"id":4436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4435,"mutability":"mutable","name":"account","nameLocation":"3958:7:33","nodeType":"VariableDeclaration","scope":4455,"src":"3950:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4434,"name":"address","nodeType":"ElementaryTypeName","src":"3950:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3949:17:33"},"returnParameters":{"id":4440,"nodeType":"ParameterList","parameters":[],"src":"4005:0:33"},"scope":4486,"src":"3912:274:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4466,"nodeType":"Block","src":"4276:60:33","statements":[{"expression":{"baseExpression":{"id":4462,"name":"approvedAttestationCreators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"4293:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4464,"indexExpression":{"id":4463,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4457,"src":"4321:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4293:36:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4461,"id":4465,"nodeType":"Return","src":"4286:43:33"}]},"functionSelector":"4a0145b6","id":4467,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedAttestationCreator","nameLocation":"4201:28:33","nodeType":"FunctionDefinition","parameters":{"id":4458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4457,"mutability":"mutable","name":"account","nameLocation":"4238:7:33","nodeType":"VariableDeclaration","scope":4467,"src":"4230:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4456,"name":"address","nodeType":"ElementaryTypeName","src":"4230:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4229:17:33"},"returnParameters":{"id":4461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4467,"src":"4270:4:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4459,"name":"bool","nodeType":"ElementaryTypeName","src":"4270:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4269:6:33"},"scope":4486,"src":"4192:144:33","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4474,"nodeType":"Block","src":"4412:48:33","statements":[{"expression":{"id":4472,"name":"_missionEnrollmentSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"4429:24:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4471,"id":4473,"nodeType":"Return","src":"4422:31:33"}]},"functionSelector":"5956ce45","id":4475,"implemented":true,"kind":"function","modifiers":[],"name":"getMissionEnrollmentSchema","nameLocation":"4351:26:33","nodeType":"FunctionDefinition","parameters":{"id":4468,"nodeType":"ParameterList","parameters":[],"src":"4377:2:33"},"returnParameters":{"id":4471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4475,"src":"4403:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4403:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4402:9:33"},"scope":4486,"src":"4342:118:33","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1807],"body":{"id":4484,"nodeType":"Block","src":"4567:2:33","statements":[]},"id":4485,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4481,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"4547:18:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4482,"kind":"modifierInvocation","modifierName":{"id":4480,"name":"onlyRole","nameLocations":["4538:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":1112,"src":"4538:8:33"},"nodeType":"ModifierInvocation","src":"4538:28:33"}],"name":"_authorizeUpgrade","nameLocation":"4475:17:33","nodeType":"FunctionDefinition","overrides":{"id":4479,"nodeType":"OverrideSpecifier","overrides":[],"src":"4529:8:33"},"parameters":{"id":4478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4477,"mutability":"mutable","name":"newImplementation","nameLocation":"4501:17:33","nodeType":"VariableDeclaration","scope":4485,"src":"4493:25:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4476,"name":"address","nodeType":"ElementaryTypeName","src":"4493:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4492:27:33"},"returnParameters":{"id":4483,"nodeType":"ParameterList","parameters":[],"src":"4567:0:33"},"scope":4486,"src":"4466:103:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":4487,"src":"691:3880:33","usedErrors":[1434,1437,1698,1703,1949,1952,2067,2080,2358,2361],"usedEvents":[1442,1961,1970,1979,2046,4175,4183]}],"src":"32:4540:33"},"id":33},"contracts/Client.sol":{"ast":{"absolutePath":"contracts/Client.sol","exportedSymbols":{"Client":[4756],"ENS":[136],"EVM_EXTRA_ARGS_V1_TAG":[4493],"EVM_EXTRA_ARGS_V2_TAG":[4496],"IABIResolver":[356],"IAddrResolver":[374],"IAddressResolver":[395],"IContentHashResolver":[412],"IDNSRecordResolver":[445],"IDNSZoneResolver":[464],"IERC165":[2975],"IExtendedResolver":[476],"IInterfaceResolver":[497],"INameResolver":[514],"IPubkeyResolver":[535],"ITextResolver":[558],"Resolver":[335]},"id":4757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4488,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:34"},{"absolutePath":"@ensdomains/ens-contracts/contracts/registry/ENS.sol","file":"@ensdomains/ens-contracts/contracts/registry/ENS.sol","id":4489,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4757,"sourceUnit":137,"src":"57:62:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol","file":"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol","id":4490,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4757,"sourceUnit":336,"src":"120:68:34","symbolAliases":[],"unitAlias":""},{"constant":true,"id":4493,"mutability":"constant","name":"EVM_EXTRA_ARGS_V1_TAG","nameLocation":"206:21:34","nodeType":"VariableDeclaration","scope":4757,"src":"190:50:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4491,"name":"bytes4","nodeType":"ElementaryTypeName","src":"190:6:34","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783132333435363738","id":4492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"230:10:34","typeDescriptions":{"typeIdentifier":"t_rational_305419896_by_1","typeString":"int_const 305419896"},"value":"0x12345678"},"visibility":"internal"},{"constant":true,"id":4496,"mutability":"constant","name":"EVM_EXTRA_ARGS_V2_TAG","nameLocation":"258:21:34","nodeType":"VariableDeclaration","scope":4757,"src":"242:50:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4494,"name":"bytes4","nodeType":"ElementaryTypeName","src":"242:6:34","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783837363534333231","id":4495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"282:10:34","typeDescriptions":{"typeIdentifier":"t_rational_2271560481_by_1","typeString":"int_const 2271560481"},"value":"0x87654321"},"visibility":"internal"},{"abstract":false,"baseContracts":[],"canonicalName":"Client","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4756,"linearizedBaseContracts":[4756],"name":"Client","nameLocation":"328:6:34","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Client.EVMTokenAmount","documentation":{"id":4497,"nodeType":"StructuredDocumentation","src":"339:84:34","text":"@dev RMN depends on this struct, if changing, please notify the RMN maintainers."},"id":4502,"members":[{"constant":false,"id":4499,"mutability":"mutable","name":"token","nameLocation":"462:5:34","nodeType":"VariableDeclaration","scope":4502,"src":"454:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4498,"name":"address","nodeType":"ElementaryTypeName","src":"454:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4501,"mutability":"mutable","name":"amount","nameLocation":"518:6:34","nodeType":"VariableDeclaration","scope":4502,"src":"510:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4500,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"EVMTokenAmount","nameLocation":"433:14:34","nodeType":"StructDefinition","scope":4756,"src":"426:124:34","visibility":"public"},{"canonicalName":"Client.EVM2AnyMessage","id":4515,"members":[{"constant":false,"id":4504,"mutability":"mutable","name":"receiver","nameLocation":"693:8:34","nodeType":"VariableDeclaration","scope":4515,"src":"687:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4503,"name":"bytes","nodeType":"ElementaryTypeName","src":"687:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4506,"mutability":"mutable","name":"data","nameLocation":"765:4:34","nodeType":"VariableDeclaration","scope":4515,"src":"759:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4505,"name":"bytes","nodeType":"ElementaryTypeName","src":"759:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4510,"mutability":"mutable","name":"tokenAmounts","nameLocation":"808:12:34","nodeType":"VariableDeclaration","scope":4515,"src":"791:29:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$4502_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"},"typeName":{"baseType":{"id":4508,"nodeType":"UserDefinedTypeName","pathNode":{"id":4507,"name":"EVMTokenAmount","nameLocations":["791:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":4502,"src":"791:14:34"},"referencedDeclaration":4502,"src":"791:14:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$4502_storage_ptr","typeString":"struct Client.EVMTokenAmount"}},"id":4509,"nodeType":"ArrayTypeName","src":"791:16:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$4502_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"}},"visibility":"internal"},{"constant":false,"id":4512,"mutability":"mutable","name":"feeToken","nameLocation":"853:8:34","nodeType":"VariableDeclaration","scope":4515,"src":"845:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4511,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4514,"mutability":"mutable","name":"extraArgs","nameLocation":"939:9:34","nodeType":"VariableDeclaration","scope":4515,"src":"933:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4513,"name":"bytes","nodeType":"ElementaryTypeName","src":"933:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"EVM2AnyMessage","nameLocation":"666:14:34","nodeType":"StructDefinition","scope":4756,"src":"659:345:34","visibility":"public"},{"canonicalName":"Client.EVMExtraArgsV1","id":4518,"members":[{"constant":false,"id":4517,"mutability":"mutable","name":"gasLimit","nameLocation":"1044:8:34","nodeType":"VariableDeclaration","scope":4518,"src":"1036:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4516,"name":"uint256","nodeType":"ElementaryTypeName","src":"1036:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"EVMExtraArgsV1","nameLocation":"1015:14:34","nodeType":"StructDefinition","scope":4756,"src":"1008:49:34","visibility":"public"},{"body":{"id":4532,"nodeType":"Block","src":"1157:74:34","statements":[{"expression":{"arguments":[{"id":4528,"name":"EVM_EXTRA_ARGS_V1_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"1193:21:34","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4529,"name":"extraArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"1216:9:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$4518_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$4518_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}],"expression":{"id":4526,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1170:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1174:18:34","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1170:22:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1170:56:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4525,"id":4531,"nodeType":"Return","src":"1163:63:34"}]},"id":4533,"implemented":true,"kind":"function","modifiers":[],"name":"_argsToBytes","nameLocation":"1070:12:34","nodeType":"FunctionDefinition","parameters":{"id":4522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4521,"mutability":"mutable","name":"extraArgs","nameLocation":"1105:9:34","nodeType":"VariableDeclaration","scope":4533,"src":"1083:31:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$4518_memory_ptr","typeString":"struct Client.EVMExtraArgsV1"},"typeName":{"id":4520,"nodeType":"UserDefinedTypeName","pathNode":{"id":4519,"name":"EVMExtraArgsV1","nameLocations":["1083:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":4518,"src":"1083:14:34"},"referencedDeclaration":4518,"src":"1083:14:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$4518_storage_ptr","typeString":"struct Client.EVMExtraArgsV1"}},"visibility":"internal"}],"src":"1082:33:34"},"returnParameters":{"id":4525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4524,"mutability":"mutable","name":"bts","nameLocation":"1152:3:34","nodeType":"VariableDeclaration","scope":4533,"src":"1139:16:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4523,"name":"bytes","nodeType":"ElementaryTypeName","src":"1139:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1138:18:34"},"scope":4756,"src":"1061:170:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"Client.EVMExtraArgsV2","documentation":{"id":4534,"nodeType":"StructuredDocumentation","src":"1237:402:34","text":"@param gasLimit: gas limit for the callback on the destination chain.\n @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\n This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\n is not set, the message request will revert."},"id":4539,"members":[{"constant":false,"id":4536,"mutability":"mutable","name":"gasLimit","nameLocation":"1678:8:34","nodeType":"VariableDeclaration","scope":4539,"src":"1670:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4535,"name":"uint256","nodeType":"ElementaryTypeName","src":"1670:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4538,"mutability":"mutable","name":"allowOutOfOrderExecution","nameLocation":"1697:24:34","nodeType":"VariableDeclaration","scope":4539,"src":"1692:29:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4537,"name":"bool","nodeType":"ElementaryTypeName","src":"1692:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"EVMExtraArgsV2","nameLocation":"1649:14:34","nodeType":"StructDefinition","scope":4756,"src":"1642:84:34","visibility":"public"},{"body":{"id":4553,"nodeType":"Block","src":"1826:74:34","statements":[{"expression":{"arguments":[{"id":4549,"name":"EVM_EXTRA_ARGS_V2_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4496,"src":"1862:21:34","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4550,"name":"extraArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4542,"src":"1885:9:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV2_$4539_memory_ptr","typeString":"struct Client.EVMExtraArgsV2 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_struct$_EVMExtraArgsV2_$4539_memory_ptr","typeString":"struct Client.EVMExtraArgsV2 memory"}],"expression":{"id":4547,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1839:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1843:18:34","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1839:22:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1839:56:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4546,"id":4552,"nodeType":"Return","src":"1832:63:34"}]},"id":4554,"implemented":true,"kind":"function","modifiers":[],"name":"_argsToBytes","nameLocation":"1739:12:34","nodeType":"FunctionDefinition","parameters":{"id":4543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4542,"mutability":"mutable","name":"extraArgs","nameLocation":"1774:9:34","nodeType":"VariableDeclaration","scope":4554,"src":"1752:31:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV2_$4539_memory_ptr","typeString":"struct Client.EVMExtraArgsV2"},"typeName":{"id":4541,"nodeType":"UserDefinedTypeName","pathNode":{"id":4540,"name":"EVMExtraArgsV2","nameLocations":["1752:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":4539,"src":"1752:14:34"},"referencedDeclaration":4539,"src":"1752:14:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV2_$4539_storage_ptr","typeString":"struct Client.EVMExtraArgsV2"}},"visibility":"internal"}],"src":"1751:33:34"},"returnParameters":{"id":4546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4545,"mutability":"mutable","name":"bts","nameLocation":"1821:3:34","nodeType":"VariableDeclaration","scope":4554,"src":"1808:16:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4544,"name":"bytes","nodeType":"ElementaryTypeName","src":"1808:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1807:18:34"},"scope":4756,"src":"1730:170:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4616,"nodeType":"Block","src":"2267:319:34","statements":[{"assignments":[4566],"declarations":[{"constant":false,"id":4566,"mutability":"mutable","name":"ens","nameLocation":"2277:3:34","nodeType":"VariableDeclaration","scope":4616,"src":"2273:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$136","typeString":"contract ENS"},"typeName":{"id":4565,"nodeType":"UserDefinedTypeName","pathNode":{"id":4564,"name":"ENS","nameLocations":["2273:3:34"],"nodeType":"IdentifierPath","referencedDeclaration":136,"src":"2273:3:34"},"referencedDeclaration":136,"src":"2273:3:34","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$136","typeString":"contract ENS"}},"visibility":"internal"}],"id":4570,"initialValue":{"arguments":[{"id":4568,"name":"ensRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4559,"src":"2287:11:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4567,"name":"ENS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"2283:3:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ENS_$136_$","typeString":"type(contract ENS)"}},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2283:16:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$136","typeString":"contract ENS"}},"nodeType":"VariableDeclarationStatement","src":"2273:26:34"},{"assignments":[4572],"declarations":[{"constant":false,"id":4572,"mutability":"mutable","name":"node","nameLocation":"2313:4:34","nodeType":"VariableDeclaration","scope":4616,"src":"2305:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2305:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4576,"initialValue":{"arguments":[{"id":4574,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4557,"src":"2332:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4573,"name":"reverseNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4641,"src":"2320:11:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:17:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2305:32:34"},{"assignments":[4578],"declarations":[{"constant":false,"id":4578,"mutability":"mutable","name":"resolver","nameLocation":"2351:8:34","nodeType":"VariableDeclaration","scope":4616,"src":"2343:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4577,"name":"address","nodeType":"ElementaryTypeName","src":"2343:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4583,"initialValue":{"arguments":[{"id":4581,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4572,"src":"2375:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4579,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4566,"src":"2362:3:34","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$136","typeString":"contract ENS"}},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2366:8:34","memberName":"resolver","nodeType":"MemberAccess","referencedDeclaration":112,"src":"2362:12:34","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2362:18:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2343:37:34"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4584,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"2390:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2410:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2402:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4585,"name":"address","nodeType":"ElementaryTypeName","src":"2402:7:34","typeDescriptions":{}}},"id":4588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2402:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2390:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4593,"nodeType":"IfStatement","src":"2386:55:34","trueBody":{"id":4592,"nodeType":"Block","src":"2414:27:34","statements":[{"expression":{"hexValue":"66616c7365","id":4590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2429:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4563,"id":4591,"nodeType":"Return","src":"2422:12:34"}]}},{"assignments":[4596],"declarations":[{"constant":false,"id":4596,"mutability":"mutable","name":"resolverContract","nameLocation":"2455:16:34","nodeType":"VariableDeclaration","scope":4616,"src":"2446:25:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$335","typeString":"contract Resolver"},"typeName":{"id":4595,"nodeType":"UserDefinedTypeName","pathNode":{"id":4594,"name":"Resolver","nameLocations":["2446:8:34"],"nodeType":"IdentifierPath","referencedDeclaration":335,"src":"2446:8:34"},"referencedDeclaration":335,"src":"2446:8:34","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$335","typeString":"contract Resolver"}},"visibility":"internal"}],"id":4600,"initialValue":{"arguments":[{"id":4598,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"2483:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4597,"name":"Resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2474:8:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Resolver_$335_$","typeString":"type(contract Resolver)"}},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2474:18:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$335","typeString":"contract Resolver"}},"nodeType":"VariableDeclarationStatement","src":"2446:46:34"},{"assignments":[4602],"declarations":[{"constant":false,"id":4602,"mutability":"mutable","name":"name","nameLocation":"2512:4:34","nodeType":"VariableDeclaration","scope":4616,"src":"2498:18:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4601,"name":"string","nodeType":"ElementaryTypeName","src":"2498:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4607,"initialValue":{"arguments":[{"id":4605,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4572,"src":"2541:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4603,"name":"resolverContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4596,"src":"2519:16:34","typeDescriptions":{"typeIdentifier":"t_contract$_Resolver_$335","typeString":"contract Resolver"}},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2536:4:34","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":513,"src":"2519:21:34","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) view external returns (string memory)"}},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2519:27:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2498:48:34"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4610,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"2565:4:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2559:5:34","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4608,"name":"bytes","nodeType":"ElementaryTypeName","src":"2559:5:34","typeDescriptions":{}}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2559:11:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2571:6:34","memberName":"length","nodeType":"MemberAccess","src":"2559:18:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2580:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2559:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4563,"id":4615,"nodeType":"Return","src":"2552:29:34"}]},"documentation":{"id":4555,"nodeType":"StructuredDocumentation","src":"1904:265:34","text":"@notice Verifies if an address has a valid ENS name associated with it\n @param addr The address to verify\n @param ensRegistry The address of the ENS registry contract\n @return bool Returns true if the address has a valid ENS name, false otherwise"},"id":4617,"implemented":true,"kind":"function","modifiers":[],"name":"verifyOnchainIdentity","nameLocation":"2181:21:34","nodeType":"FunctionDefinition","parameters":{"id":4560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4557,"mutability":"mutable","name":"addr","nameLocation":"2211:4:34","nodeType":"VariableDeclaration","scope":4617,"src":"2203:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4556,"name":"address","nodeType":"ElementaryTypeName","src":"2203:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4559,"mutability":"mutable","name":"ensRegistry","nameLocation":"2225:11:34","nodeType":"VariableDeclaration","scope":4617,"src":"2217:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4558,"name":"address","nodeType":"ElementaryTypeName","src":"2217:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2202:35:34"},"returnParameters":{"id":4563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4617,"src":"2261:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4561,"name":"bool","nodeType":"ElementaryTypeName","src":"2261:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2260:6:34"},"scope":4756,"src":"2172:414:34","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4640,"nodeType":"Block","src":"2657:209:34","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532","id":4629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2731:66:34","typeDescriptions":{"typeIdentifier":"t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1","typeString":"int_const 6595...(69 digits omitted)...3154"},"value":"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1","typeString":"int_const 6595...(69 digits omitted)...3154"}],"id":4628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2723:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4627,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2723:7:34","typeDescriptions":{}}},"id":4630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:75:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"id":4634,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"2837:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4632,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2820:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2824:12:34","memberName":"encodePacked","nodeType":"MemberAccess","src":"2820:16:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2820:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4631,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2810:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:33:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4625,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2695:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2699:12:34","memberName":"encodePacked","nodeType":"MemberAccess","src":"2695:16:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2695:158:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4624,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2676:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2676:185:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4623,"id":4639,"nodeType":"Return","src":"2663:198:34"}]},"id":4641,"implemented":true,"kind":"function","modifiers":[],"name":"reverseNode","nameLocation":"2599:11:34","nodeType":"FunctionDefinition","parameters":{"id":4620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4619,"mutability":"mutable","name":"addr","nameLocation":"2619:4:34","nodeType":"VariableDeclaration","scope":4641,"src":"2611:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4618,"name":"address","nodeType":"ElementaryTypeName","src":"2611:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2610:14:34"},"returnParameters":{"id":4623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4641,"src":"2648:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4621,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2648:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2647:9:34"},"scope":4756,"src":"2590:276:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4711,"nodeType":"Block","src":"2939:416:34","statements":[{"assignments":[4649],"declarations":[{"constant":false,"id":4649,"mutability":"mutable","name":"node","nameLocation":"2953:4:34","nodeType":"VariableDeclaration","scope":4711,"src":"2945:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4648,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2945:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4651,"initialValue":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2960:66:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0000000000000000000000000000000000000000000000000000000000000000"},"nodeType":"VariableDeclarationStatement","src":"2945:81:34"},{"assignments":[4653],"declarations":[{"constant":false,"id":4653,"mutability":"mutable","name":"i","nameLocation":"3037:1:34","nodeType":"VariableDeclaration","scope":4711,"src":"3032:6:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4652,"name":"uint","nodeType":"ElementaryTypeName","src":"3032:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4655,"initialValue":{"hexValue":"30","id":4654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3041:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3032:10:34"},{"body":{"id":4707,"nodeType":"Block","src":"3072:262:34","statements":[{"assignments":[4661],"declarations":[{"constant":false,"id":4661,"mutability":"mutable","name":"labelLen","nameLocation":"3085:8:34","nodeType":"VariableDeclaration","scope":4707,"src":"3080:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4660,"name":"uint","nodeType":"ElementaryTypeName","src":"3080:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4668,"initialValue":{"arguments":[{"baseExpression":{"id":4664,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"3102:4:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4666,"indexExpression":{"id":4665,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"3107:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3102:7:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":4663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3096:5:34","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4662,"name":"uint8","nodeType":"ElementaryTypeName","src":"3096:5:34","typeDescriptions":{}}},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3096:14:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"3080:30:34"},{"expression":{"id":4670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3118:3:34","subExpression":{"id":4669,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"3118:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4671,"nodeType":"ExpressionStatement","src":"3118:3:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4672,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"3133:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4673,"name":"labelLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"3137:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3133:12:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4675,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"3148:4:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3153:6:34","memberName":"length","nodeType":"MemberAccess","src":"3148:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3133:26:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4679,"nodeType":"IfStatement","src":"3129:37:34","trueBody":{"id":4678,"nodeType":"Break","src":"3161:5:34"}},{"assignments":[4681],"declarations":[{"constant":false,"id":4681,"mutability":"mutable","name":"labelHash","nameLocation":"3182:9:34","nodeType":"VariableDeclaration","scope":4707,"src":"3174:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4680,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3174:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4692,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":4686,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"3227:4:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4687,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"3233:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4688,"name":"labelLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"3236:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4685,"name":"slice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"3221:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3221:24:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4683,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3204:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3208:12:34","memberName":"encodePacked","nodeType":"MemberAccess","src":"3204:16:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3204:42:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4682,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3194:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3194:53:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3174:73:34"},{"expression":{"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4693,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4649,"src":"3255:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":4697,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4649,"src":"3289:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4698,"name":"labelHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"3295:9:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4695,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3272:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3276:12:34","memberName":"encodePacked","nodeType":"MemberAccess","src":"3272:16:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3272:33:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4694,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3262:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3262:44:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3255:51:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4702,"nodeType":"ExpressionStatement","src":"3255:51:34"},{"expression":{"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4703,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"3314:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4704,"name":"labelLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"3319:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3314:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4706,"nodeType":"ExpressionStatement","src":"3314:13:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4656,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"3055:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4657,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"3059:4:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3064:6:34","memberName":"length","nodeType":"MemberAccess","src":"3059:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3055:15:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4708,"nodeType":"WhileStatement","src":"3048:286:34"},{"expression":{"id":4709,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4649,"src":"3346:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4647,"id":4710,"nodeType":"Return","src":"3339:11:34"}]},"id":4712,"implemented":true,"kind":"function","modifiers":[],"name":"namehash","nameLocation":"2879:8:34","nodeType":"FunctionDefinition","parameters":{"id":4644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4643,"mutability":"mutable","name":"name","nameLocation":"2901:4:34","nodeType":"VariableDeclaration","scope":4712,"src":"2888:17:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4642,"name":"bytes","nodeType":"ElementaryTypeName","src":"2888:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2887:19:34"},"returnParameters":{"id":4647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4646,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4712,"src":"2930:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4645,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2930:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2929:9:34"},"scope":4756,"src":"2870:485:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4754,"nodeType":"Block","src":"3452:129:34","statements":[{"assignments":[4724],"declarations":[{"constant":false,"id":4724,"mutability":"mutable","name":"b","nameLocation":"3471:1:34","nodeType":"VariableDeclaration","scope":4754,"src":"3458:14:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4723,"name":"bytes","nodeType":"ElementaryTypeName","src":"3458:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4729,"initialValue":{"arguments":[{"id":4727,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"3485:3:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3475:9:34","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4725,"name":"bytes","nodeType":"ElementaryTypeName","src":"3479:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:14:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3458:31:34"},{"body":{"id":4750,"nodeType":"Block","src":"3526:37:34","statements":[{"expression":{"id":4748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4740,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"3534:1:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4742,"indexExpression":{"id":4741,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"3536:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3534:4:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4743,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"3541:4:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4747,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4744,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"3546:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4745,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"3550:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3546:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3541:15:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"3534:22:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4749,"nodeType":"ExpressionStatement","src":"3534:22:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"3512:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4735,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"3516:3:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3512:7:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4751,"initializationExpression":{"assignments":[4731],"declarations":[{"constant":false,"id":4731,"mutability":"mutable","name":"i","nameLocation":"3505:1:34","nodeType":"VariableDeclaration","scope":4751,"src":"3500:6:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4730,"name":"uint","nodeType":"ElementaryTypeName","src":"3500:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4733,"initialValue":{"hexValue":"30","id":4732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3509:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3500:10:34"},"loopExpression":{"expression":{"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3521:3:34","subExpression":{"id":4737,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"3521:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4739,"nodeType":"ExpressionStatement","src":"3521:3:34"},"nodeType":"ForStatement","src":"3495:68:34"},{"expression":{"id":4752,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"3575:1:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4722,"id":4753,"nodeType":"Return","src":"3568:8:34"}]},"id":4755,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nameLocation":"3368:5:34","nodeType":"FunctionDefinition","parameters":{"id":4719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4714,"mutability":"mutable","name":"data","nameLocation":"3387:4:34","nodeType":"VariableDeclaration","scope":4755,"src":"3374:17:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4713,"name":"bytes","nodeType":"ElementaryTypeName","src":"3374:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4716,"mutability":"mutable","name":"start","nameLocation":"3398:5:34","nodeType":"VariableDeclaration","scope":4755,"src":"3393:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4715,"name":"uint","nodeType":"ElementaryTypeName","src":"3393:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4718,"mutability":"mutable","name":"len","nameLocation":"3410:3:34","nodeType":"VariableDeclaration","scope":4755,"src":"3405:8:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4717,"name":"uint","nodeType":"ElementaryTypeName","src":"3405:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3373:41:34"},"returnParameters":{"id":4722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4755,"src":"3438:12:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4720,"name":"bytes","nodeType":"ElementaryTypeName","src":"3438:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3437:14:34"},"scope":4756,"src":"3359:222:34","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4757,"src":"320:3263:34","usedErrors":[],"usedEvents":[]}],"src":"32:3552:34"},"id":34},"contracts/utils/AttestationUtils.sol":{"ast":{"absolutePath":"contracts/utils/AttestationUtils.sol","exportedSymbols":{"Attestation":[608],"AttestationRequest":[654],"AttestationRequestData":[647],"AttestationUtils":[4920],"DelegatedAttestationRequest":[668],"DelegatedRevocationRequest":[719],"IEAS":[931],"ISchemaRegistry":[984],"ISchemaResolver":[1054],"ISemver":[994],"MultiAttestationRequest":[676],"MultiDelegatedAttestationRequest":[692],"MultiDelegatedRevocationRequest":[743],"MultiRevocationRequest":[727],"RevocationRequest":[705],"RevocationRequestData":[698],"SchemaRecord":[948],"Signature":[586]},"id":4921,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4758,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:35"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","id":4759,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":932,"src":"57:72:35","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","id":4760,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":985,"src":"130:83:35","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AttestationUtils","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4920,"linearizedBaseContracts":[4920],"name":"AttestationUtils","nameLocation":"223:16:35","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AttestationUtils.EAS","id":4767,"members":[{"constant":false,"id":4763,"mutability":"mutable","name":"eas","nameLocation":"266:3:35","nodeType":"VariableDeclaration","scope":4767,"src":"261:8:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"},"typeName":{"id":4762,"nodeType":"UserDefinedTypeName","pathNode":{"id":4761,"name":"IEAS","nameLocations":["261:4:35"],"nodeType":"IdentifierPath","referencedDeclaration":931,"src":"261:4:35"},"referencedDeclaration":931,"src":"261:4:35","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"visibility":"internal"},{"constant":false,"id":4766,"mutability":"mutable","name":"schemaRegistry","nameLocation":"291:14:35","nodeType":"VariableDeclaration","scope":4767,"src":"275:30:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"},"typeName":{"id":4765,"nodeType":"UserDefinedTypeName","pathNode":{"id":4764,"name":"ISchemaRegistry","nameLocations":["275:15:35"],"nodeType":"IdentifierPath","referencedDeclaration":984,"src":"275:15:35"},"referencedDeclaration":984,"src":"275:15:35","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"visibility":"internal"}],"name":"EAS","nameLocation":"251:3:35","nodeType":"StructDefinition","scope":4920,"src":"244:66:35","visibility":"public"},{"errorSelector":"bf37b20e","id":4769,"name":"InvalidSchema","nameLocation":"320:13:35","nodeType":"ErrorDefinition","parameters":{"id":4768,"nodeType":"ParameterList","parameters":[],"src":"333:2:35"},"src":"314:22:35"},{"errorSelector":"1e4ec46b","id":4771,"name":"InvalidReceiver","nameLocation":"345:15:35","nodeType":"ErrorDefinition","parameters":{"id":4770,"nodeType":"ParameterList","parameters":[],"src":"360:2:35"},"src":"339:24:35"},{"errorSelector":"3f6cc768","id":4773,"name":"InvalidTokenId","nameLocation":"372:14:35","nodeType":"ErrorDefinition","parameters":{"id":4772,"nodeType":"ParameterList","parameters":[],"src":"386:2:35"},"src":"366:23:35"},{"errorSelector":"8baa579f","id":4775,"name":"InvalidSignature","nameLocation":"398:16:35","nodeType":"ErrorDefinition","parameters":{"id":4774,"nodeType":"ParameterList","parameters":[],"src":"414:2:35"},"src":"392:25:35"},{"body":{"id":4858,"nodeType":"Block","src":"592:606:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4791,"name":"schema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"602:6:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"620:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"612:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"612:7:35","typeDescriptions":{}}},"id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"612:10:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"602:20:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4800,"nodeType":"IfStatement","src":"598:48:35","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4797,"name":"InvalidSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"631:13:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"631:15:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4799,"nodeType":"RevertStatement","src":"624:22:35"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4801,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"656:8:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"676:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"668:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4802,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:35","typeDescriptions":{}}},"id":4805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"668:10:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"656:22:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4810,"nodeType":"IfStatement","src":"652:52:35","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4807,"name":"InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4771,"src":"687:15:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"687:17:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4809,"nodeType":"RevertStatement","src":"680:24:35"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4811,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"714:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"725:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"714:12:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4817,"nodeType":"IfStatement","src":"710:41:35","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4814,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4773,"src":"735:14:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"735:16:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4816,"nodeType":"RevertStatement","src":"728:23:35"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4818,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"761:9:35","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"771:6:35","memberName":"length","nodeType":"MemberAccess","src":"761:16:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"781:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"761:21:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4825,"nodeType":"IfStatement","src":"757:52:35","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4822,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"791:16:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"791:18:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4824,"nodeType":"RevertStatement","src":"784:25:35"}},{"assignments":[4827],"declarations":[{"constant":false,"id":4827,"mutability":"mutable","name":"data","nameLocation":"829:4:35","nodeType":"VariableDeclaration","scope":4858,"src":"816:17:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4826,"name":"bytes","nodeType":"ElementaryTypeName","src":"816:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4833,"initialValue":{"arguments":[{"id":4830,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"853:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4831,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"862:9:35","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":4828,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"836:3:35","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"840:12:35","memberName":"encodePacked","nodeType":"MemberAccess","src":"836:16:35","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"836:36:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"816:56:35"},{"assignments":[4836],"declarations":[{"constant":false,"id":4836,"mutability":"mutable","name":"request","nameLocation":"905:7:35","nodeType":"VariableDeclaration","scope":4858,"src":"879:33:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":4835,"nodeType":"UserDefinedTypeName","pathNode":{"id":4834,"name":"AttestationRequest","nameLocations":["879:18:35"],"nodeType":"IdentifierPath","referencedDeclaration":654,"src":"879:18:35"},"referencedDeclaration":654,"src":"879:18:35","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"}],"id":4851,"initialValue":{"arguments":[{"id":4838,"name":"schema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"950:6:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4840,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"1014:8:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1048:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"74727565","id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1070:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"arguments":[{"hexValue":"30","id":4845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1100:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1092:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4843,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1092:7:35","typeDescriptions":{}}},"id":4846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1092:10:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4847,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"1118:4:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1139:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4839,"name":"AttestationRequestData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"970:22:35","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AttestationRequestData_$647_storage_ptr_$","typeString":"type(struct AttestationRequestData storage pointer)"}},"id":4849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1003:9:35","1032:14:35","1059:9:35","1084:6:35","1112:4:35","1132:5:35"],"names":["recipient","expirationTime","revocable","refUID","data","value"],"nodeType":"FunctionCall","src":"970:179:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$647_memory_ptr","typeString":"struct AttestationRequestData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_struct$_AttestationRequestData_$647_memory_ptr","typeString":"struct AttestationRequestData memory"}],"id":4837,"name":"AttestationRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"915:18:35","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AttestationRequest_$654_storage_ptr_$","typeString":"type(struct AttestationRequest storage pointer)"}},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["942:6:35","964:4:35"],"names":["schema","data"],"nodeType":"FunctionCall","src":"915:241:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest memory"}},"nodeType":"VariableDeclarationStatement","src":"879:277:35"},{"expression":{"arguments":[{"id":4855,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4836,"src":"1185:7:35","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_AttestationRequest_$654_memory_ptr","typeString":"struct AttestationRequest memory"}],"expression":{"expression":{"id":4852,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"1170:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS memory"}},"id":4853,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1174:3:35","memberName":"eas","nodeType":"MemberAccess","referencedDeclaration":4763,"src":"1170:7:35","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$931","typeString":"contract IEAS"}},"id":4854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1178:6:35","memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":800,"src":"1170:14:35","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_AttestationRequest_$654_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct AttestationRequest memory) payable external returns (bytes32)"}},"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1170:23:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4790,"id":4857,"nodeType":"Return","src":"1163:30:35"}]},"id":4859,"implemented":true,"kind":"function","modifiers":[],"name":"submitAttestation","nameLocation":"430:17:35","nodeType":"FunctionDefinition","parameters":{"id":4787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4778,"mutability":"mutable","name":"eas","nameLocation":"464:3:35","nodeType":"VariableDeclaration","scope":4859,"src":"453:14:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS"},"typeName":{"id":4777,"nodeType":"UserDefinedTypeName","pathNode":{"id":4776,"name":"EAS","nameLocations":["453:3:35"],"nodeType":"IdentifierPath","referencedDeclaration":4767,"src":"453:3:35"},"referencedDeclaration":4767,"src":"453:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_storage_ptr","typeString":"struct AttestationUtils.EAS"}},"visibility":"internal"},{"constant":false,"id":4780,"mutability":"mutable","name":"schema","nameLocation":"481:6:35","nodeType":"VariableDeclaration","scope":4859,"src":"473:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4779,"name":"bytes32","nodeType":"ElementaryTypeName","src":"473:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4782,"mutability":"mutable","name":"receiver","nameLocation":"501:8:35","nodeType":"VariableDeclaration","scope":4859,"src":"493:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4781,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4784,"mutability":"mutable","name":"tokenId","nameLocation":"523:7:35","nodeType":"VariableDeclaration","scope":4859,"src":"515:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4783,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4786,"mutability":"mutable","name":"signature","nameLocation":"551:9:35","nodeType":"VariableDeclaration","scope":4859,"src":"536:24:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4785,"name":"bytes","nodeType":"ElementaryTypeName","src":"536:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"447:117:35"},"returnParameters":{"id":4790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4859,"src":"583:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"583:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"582:9:35"},"scope":4920,"src":"421:777:35","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4876,"nodeType":"Block","src":"1270:136:35","statements":[{"assignments":[4868],"declarations":[{"constant":false,"id":4868,"mutability":"mutable","name":"schema","nameLocation":"1290:6:35","nodeType":"VariableDeclaration","scope":4876,"src":"1276:20:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4867,"name":"string","nodeType":"ElementaryTypeName","src":"1276:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4870,"initialValue":{"hexValue":"616464726573732075736572416464726573732c737472696e6720656e734e616d652c75696e7432353620726567697374726174696f6e44617465","id":4869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1299:61:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_6725011be12ab90fd8a1241d4d5d37cb96ff8317116a19c603406a9b0445aa6d","typeString":"literal_string \"address userAddress,string ensName,uint256 registrationDate\""},"value":"address userAddress,string ensName,uint256 registrationDate"},"nodeType":"VariableDeclarationStatement","src":"1276:84:35"},{"expression":{"arguments":[{"id":4872,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"1389:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS memory"}},{"id":4873,"name":"schema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"1394:6:35","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4871,"name":"_registerSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"1373:15:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_EAS_$4767_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct AttestationUtils.EAS memory,string memory) returns (bytes32)"}},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4866,"id":4875,"nodeType":"Return","src":"1366:35:35"}]},"id":4877,"implemented":true,"kind":"function","modifiers":[],"name":"createENSSchema","nameLocation":"1211:15:35","nodeType":"FunctionDefinition","parameters":{"id":4863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4862,"mutability":"mutable","name":"eas","nameLocation":"1238:3:35","nodeType":"VariableDeclaration","scope":4877,"src":"1227:14:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS"},"typeName":{"id":4861,"nodeType":"UserDefinedTypeName","pathNode":{"id":4860,"name":"EAS","nameLocations":["1227:3:35"],"nodeType":"IdentifierPath","referencedDeclaration":4767,"src":"1227:3:35"},"referencedDeclaration":4767,"src":"1227:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_storage_ptr","typeString":"struct AttestationUtils.EAS"}},"visibility":"internal"}],"src":"1226:16:35"},"returnParameters":{"id":4866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4877,"src":"1261:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1261:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1260:9:35"},"scope":4920,"src":"1202:204:35","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4894,"nodeType":"Block","src":"1479:151:35","statements":[{"assignments":[4886],"declarations":[{"constant":false,"id":4886,"mutability":"mutable","name":"schema","nameLocation":"1499:6:35","nodeType":"VariableDeclaration","scope":4894,"src":"1485:20:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4885,"name":"string","nodeType":"ElementaryTypeName","src":"1485:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4888,"initialValue":{"hexValue":"616464726573732075736572416464726573732c75696e7432353620706f6170546f6b656e49642c737472696e67206576656e744e616d652c75696e74323536206576656e7444617465","id":4887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1508:76:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_74ff1c4d23ccd5a6019fe4b80b3501d16a7a872b72dd7003d085a478fb5cd55b","typeString":"literal_string \"address userAddress,uint256 poapTokenId,string eventName,uint256 eventDate\""},"value":"address userAddress,uint256 poapTokenId,string eventName,uint256 eventDate"},"nodeType":"VariableDeclarationStatement","src":"1485:99:35"},{"expression":{"arguments":[{"id":4890,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"1613:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS memory"}},{"id":4891,"name":"schema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"1618:6:35","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4889,"name":"_registerSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"1597:15:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_EAS_$4767_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct AttestationUtils.EAS memory,string memory) returns (bytes32)"}},"id":4892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1597:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4884,"id":4893,"nodeType":"Return","src":"1590:35:35"}]},"id":4895,"implemented":true,"kind":"function","modifiers":[],"name":"createPOAPSchema","nameLocation":"1419:16:35","nodeType":"FunctionDefinition","parameters":{"id":4881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4880,"mutability":"mutable","name":"eas","nameLocation":"1447:3:35","nodeType":"VariableDeclaration","scope":4895,"src":"1436:14:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS"},"typeName":{"id":4879,"nodeType":"UserDefinedTypeName","pathNode":{"id":4878,"name":"EAS","nameLocations":["1436:3:35"],"nodeType":"IdentifierPath","referencedDeclaration":4767,"src":"1436:3:35"},"referencedDeclaration":4767,"src":"1436:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_storage_ptr","typeString":"struct AttestationUtils.EAS"}},"visibility":"internal"}],"src":"1435:16:35"},"returnParameters":{"id":4884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4895,"src":"1470:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1470:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1469:9:35"},"scope":4920,"src":"1410:220:35","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4918,"nodeType":"Block","src":"1723:88:35","statements":[{"expression":{"arguments":[{"id":4908,"name":"schema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4900,"src":"1764:6:35","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"hexValue":"30","id":4912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1796:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1788:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4910,"name":"address","nodeType":"ElementaryTypeName","src":"1788:7:35","typeDescriptions":{}}},"id":4913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1788:10:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4909,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"1772:15:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISchemaResolver_$1054_$","typeString":"type(contract ISchemaResolver)"}},"id":4914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:27:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"}},{"hexValue":"74727565","id":4915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1801:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_contract$_ISchemaResolver_$1054","typeString":"contract ISchemaResolver"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"expression":{"id":4905,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"1736:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS memory"}},"id":4906,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1740:14:35","memberName":"schemaRegistry","nodeType":"MemberAccess","referencedDeclaration":4766,"src":"1736:18:35","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$984","typeString":"contract ISchemaRegistry"}},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1755:8:35","memberName":"register","nodeType":"MemberAccess","referencedDeclaration":974,"src":"1736:27:35","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_contract$_ISchemaResolver_$1054_$_t_bool_$returns$_t_bytes32_$","typeString":"function (string memory,contract ISchemaResolver,bool) external returns (bytes32)"}},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1736:70:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4904,"id":4917,"nodeType":"Return","src":"1729:77:35"}]},"id":4919,"implemented":true,"kind":"function","modifiers":[],"name":"_registerSchema","nameLocation":"1643:15:35","nodeType":"FunctionDefinition","parameters":{"id":4901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4898,"mutability":"mutable","name":"eas","nameLocation":"1670:3:35","nodeType":"VariableDeclaration","scope":4919,"src":"1659:14:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_memory_ptr","typeString":"struct AttestationUtils.EAS"},"typeName":{"id":4897,"nodeType":"UserDefinedTypeName","pathNode":{"id":4896,"name":"EAS","nameLocations":["1659:3:35"],"nodeType":"IdentifierPath","referencedDeclaration":4767,"src":"1659:3:35"},"referencedDeclaration":4767,"src":"1659:3:35","typeDescriptions":{"typeIdentifier":"t_struct$_EAS_$4767_storage_ptr","typeString":"struct AttestationUtils.EAS"}},"visibility":"internal"},{"constant":false,"id":4900,"mutability":"mutable","name":"schema","nameLocation":"1689:6:35","nodeType":"VariableDeclaration","scope":4919,"src":"1675:20:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4899,"name":"string","nodeType":"ElementaryTypeName","src":"1675:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1658:38:35"},"returnParameters":{"id":4904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4919,"src":"1714:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1713:9:35"},"scope":4920,"src":"1634:177:35","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4921,"src":"215:1598:35","usedErrors":[4769,4771,4773,4775],"usedEvents":[]}],"src":"32:1782:35"},"id":35},"contracts/utils/EthereumProviderUtils.sol":{"ast":{"absolutePath":"contracts/utils/EthereumProviderUtils.sol","exportedSymbols":{"EthereumProviderUtils":[4933]},"id":4934,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4922,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:36"},{"abstract":false,"baseContracts":[],"canonicalName":"EthereumProviderUtils","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4933,"linearizedBaseContracts":[4933],"name":"EthereumProviderUtils","nameLocation":"65:21:36","nodeType":"ContractDefinition","nodes":[{"body":{"id":4931,"nodeType":"Block","src":"254:115:36","statements":[{"expression":{"id":4929,"name":"provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4924,"src":"334:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4928,"id":4930,"nodeType":"Return","src":"327:15:36"}]},"id":4932,"implemented":true,"kind":"function","modifiers":[],"name":"convertProviderToSigner","nameLocation":"180:23:36","nodeType":"FunctionDefinition","parameters":{"id":4925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4924,"mutability":"mutable","name":"provider","nameLocation":"212:8:36","nodeType":"VariableDeclaration","scope":4932,"src":"204:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4923,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"203:18:36"},"returnParameters":{"id":4928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4932,"src":"245:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4926,"name":"address","nodeType":"ElementaryTypeName","src":"245:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"244:9:36"},"scope":4933,"src":"171:198:36","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4934,"src":"57:314:36","usedErrors":[],"usedEvents":[]}],"src":"32:340:36"},"id":36}},"contracts":{"@ensdomains/ens-contracts/contracts/registry/ENS.sol":{"ENS":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NewOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"resolver","type":"address"}],"name":"NewResolver","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"NewTTL","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"recordExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"resolver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setSubnodeOwner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setSubnodeRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForAll(address,address)":"e985e9c5","owner(bytes32)":"02571be3","recordExists(bytes32)":"f79fe538","resolver(bytes32)":"0178b8bf","setApprovalForAll(address,bool)":"a22cb465","setOwner(bytes32,address)":"5b0fc9c3","setRecord(bytes32,address,address,uint64)":"cf408823","setResolver(bytes32,address)":"1896f70a","setSubnodeOwner(bytes32,bytes32,address)":"06ab5923","setSubnodeRecord(bytes32,bytes32,address,address,uint64)":"5ef2c7f0","setTTL(bytes32,uint64)":"14ab9038","ttl(bytes32)":"16a25cbd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":\"ENS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  // Logged when an operator is added or removed.\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\\n\\n  function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns (bytes32);\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function setApprovalForAll(address operator, bool approved) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n\\n  function recordExists(bytes32 node) external view returns (bool);\\n\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcc1d60392693813028a258e400d16dd9632261c8e26ca33061c9d8286edcfc43\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol":{"Resolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"ContentChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"content","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"}],"name":"isApprovedFor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"nodehash","type":"bytes32"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicallWithNodeCheck","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"multihash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"resolve","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentType","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setABI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"},{"internalType":"bytes","name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bool","name":"","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"setContent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setDnsrr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"internalType":"address","name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setMultihash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"_name","type":"string"}],"name":"setName","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"},{"internalType":"string","name":"value","type":"string"}],"name":"setText","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}},"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}},"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}},"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}},"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}},"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}},"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}},"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ABI(bytes32,uint256)":"2203ab56","addr(bytes32)":"3b3b57de","addr(bytes32,uint256)":"f1cb7e06","approve(bytes32,address,bool)":"a4b91a01","content(bytes32)":"2dff6941","contenthash(bytes32)":"bc1c58d1","dnsRecord(bytes32,bytes32,uint16)":"a8fa5682","interfaceImplementer(bytes32,bytes4)":"124a319c","isApprovedFor(address,bytes32,address)":"a9784b3e","isApprovedForAll(address,address)":"e985e9c5","multicall(bytes[])":"ac9650d8","multicallWithNodeCheck(bytes32,bytes[])":"e32954eb","multihash(bytes32)":"e89401a1","name(bytes32)":"691f3431","pubkey(bytes32)":"c8690233","resolve(bytes,bytes)":"9061b923","setABI(bytes32,uint256,bytes)":"623195b0","setAddr(bytes32,address)":"d5fa2b00","setAddr(bytes32,uint256,bytes)":"8b95dd71","setApprovalForAll(address,bool)":"a22cb465","setContent(bytes32,bytes32)":"c3d014d6","setContenthash(bytes32,bytes)":"304e6ade","setDnsrr(bytes32,bytes)":"76196c88","setInterface(bytes32,bytes4,address)":"e59d895d","setMultihash(bytes32,bytes)":"aa4cb547","setName(bytes32,string)":"77372213","setPubkey(bytes32,bytes32,bytes32)":"29cd62ea","setText(bytes32,string,string)":"10f13a8c","supportsInterface(bytes4)":"01ffc9a7","text(bytes32,string)":"59d1d43c","zonehash(bytes32)":"5c98042b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"content\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"isApprovedFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"multihash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"setContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDnsrr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setMultihash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}},\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}},\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"},\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"notice\":\"A generic resolver interface which includes all the functions including the ones deprecated\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\":\"Resolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n  IERC165,\\n  IABIResolver,\\n  IAddressResolver,\\n  IAddrResolver,\\n  IContentHashResolver,\\n  IDNSRecordResolver,\\n  IDNSZoneResolver,\\n  IInterfaceResolver,\\n  INameResolver,\\n  IPubkeyResolver,\\n  ITextResolver,\\n  IExtendedResolver\\n{\\n  /* Deprecated events */\\n  event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n  function setApprovalForAll(address, bool) external;\\n\\n  function approve(bytes32 node, address delegate, bool approved) external;\\n\\n  function isApprovedForAll(address account, address operator) external;\\n\\n  function isApprovedFor(address owner, bytes32 node, address delegate) external;\\n\\n  function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n\\n  function setAddr(bytes32 node, address addr) external;\\n\\n  function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n  function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n  function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n  function setName(bytes32 node, string calldata _name) external;\\n\\n  function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n  function setText(bytes32 node, string calldata key, string calldata value) external;\\n\\n  function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n\\n  function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n\\n  function multicallWithNodeCheck(bytes32 nodehash, bytes[] calldata data) external returns (bytes[] memory results);\\n\\n  /* Deprecated functions */\\n  function content(bytes32 node) external view returns (bytes32);\\n\\n  function multihash(bytes32 node) external view returns (bytes memory);\\n\\n  function setContent(bytes32 node, bytes32 hash) external;\\n\\n  function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xda9ca352faee1eb4841e910c4e8eb223dc24dcd8ab2e3b00047e7e669b72af56\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x56e138d363d3ce001205e96492a8ac0a35114e76fd1cef4e428823904de9a0a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n  event AddrChanged(bytes32 indexed node, address a);\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xbcd9810777380ca702291fc3e74690c492fc49f6fa0f78256fbc7a3e01315732\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n  event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress);\\n\\n  function addr(bytes32 node, uint256 coinType) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa6bc0f0833a1c4052674cd41d245c8c23908e0ccb090c9ef0adffb21907fdf54\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x43e90f6c6f3ba68d48bc98c3d2d5b26d8ca1047dfbf074f6a4cb88f77dca396d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf01e1226dc438f32be21a5feb2528942dffecd96ab0c4eb1a582c476050d4f4d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n  // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n  event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n  /**\\n   * zonehash obtains the hash for the zone.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x704bc5fd3ba96b2449fd1daeaf2c6d4579f839e6c6a908a321f7e8eb9a40d7a4\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n  function resolve(bytes memory name, bytes memory data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x603c4bd5b9219a7d6a6248e7687a848966bf27c3dc10ca2315f168d8e069d804\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n  event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 165 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xbbe45357ac199d06362207c454ffa7580bd187b13007aea9c1f061da4e99c45d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xce8c74368be656cc2880b1ba3147198eeb36f244d0887b16caf4fe5eef7438b7\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x The X coordinate of the curve point for the public key.\\n   * @return y The Y coordinate of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x32cf06260cfe504394b1ee106a403ead28eb649ed36c8ef4047ef5979f90b21c\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1a38ad6fcdd080f359defb1ce17d10a83eca14c278f170b3be45f6c43899b312\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."},"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."},"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."},"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."},"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."},"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."},"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."},"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."},"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"notice":"A generic resolver interface which includes all the functions including the ones deprecated","version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol":{"IABIResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ABI(bytes32,uint256)":"2203ab56"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":\"IABIResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x56e138d363d3ce001205e96492a8ac0a35114e76fd1cef4e428823904de9a0a2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."}},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol":{"IAddrResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32)":"3b3b57de"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"}},\"notice\":\"Interface for the legacy (ETH-only) addr function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":\"IAddrResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n  event AddrChanged(bytes32 indexed node, address a);\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xbcd9810777380ca702291fc3e74690c492fc49f6fa0f78256fbc7a3e01315732\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."}},"notice":"Interface for the legacy (ETH-only) addr function.","version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol":{"IAddressResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32,uint256)":"f1cb7e06"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for the new (multicoin) addr function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":\"IAddressResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n  event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress);\\n\\n  function addr(bytes32 node, uint256 coinType) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa6bc0f0833a1c4052674cd41d245c8c23908e0ccb090c9ef0adffb21907fdf54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface for the new (multicoin) addr function.","version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol":{"IContentHashResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"contenthash(bytes32)":"bc1c58d1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":\"IContentHashResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x43e90f6c6f3ba68d48bc98c3d2d5b26d8ca1047dfbf074f6a4cb88f77dca396d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."}},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol":{"IDNSRecordResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"dnsRecord(bytes32,bytes32,uint16)":"a8fa5682"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":\"IDNSRecordResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf01e1226dc438f32be21a5feb2528942dffecd96ab0c4eb1a582c476050d4f4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."}},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol":{"IDNSZoneResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"zonehash(bytes32)":"5c98042b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":\"IDNSZoneResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n  // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n  event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n  /**\\n   * zonehash obtains the hash for the zone.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x704bc5fd3ba96b2449fd1daeaf2c6d4579f839e6c6a908a321f7e8eb9a40d7a4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol":{"IExtendedResolver":{"abi":[{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"resolve","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"resolve(bytes,bytes)":"9061b923"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":\"IExtendedResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n  function resolve(bytes memory name, bytes memory data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x603c4bd5b9219a7d6a6248e7687a848966bf27c3dc10ca2315f168d8e069d804\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol":{"IInterfaceResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"interfaceImplementer(bytes32,bytes4)":"124a319c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":\"IInterfaceResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n  event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 165 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xbbe45357ac199d06362207c454ffa7580bd187b13007aea9c1f061da4e99c45d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."}},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol":{"INameResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"name(bytes32)":"691f3431"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":\"INameResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xce8c74368be656cc2880b1ba3147198eeb36f244d0887b16caf4fe5eef7438b7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."}},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol":{"IPubkeyResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pubkey(bytes32)":"c8690233"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":\"IPubkeyResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x The X coordinate of the curve point for the public key.\\n   * @return y The Y coordinate of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x32cf06260cfe504394b1ee106a403ead28eb649ed36c8ef4047ef5979f90b21c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."}},"version":1}}},"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol":{"ITextResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"text(bytes32,string)":"59d1d43c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":\"ITextResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1a38ad6fcdd080f359defb1ce17d10a83eca14c278f170b3be45f6c43899b312\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."}},"version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"IEAS":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Attested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"revoker","type":"address"},{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"RevokedOffchain","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"Timestamped","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedAttestationRequest","name":"delegatedRequest","type":"tuple"}],"name":"attestByDelegation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getAttestation","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"revoker","type":"address"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"isAttestationValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiAttest","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedAttestationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiAttestByDelegation","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiRevoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedRevocationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiRevokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"}],"internalType":"struct RevocationRequest","name":"request","type":"tuple"}],"name":"revoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedRevocationRequest","name":"delegatedRequest","type":"tuple"}],"name":"revokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"revokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"timestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID the revoked attestation."}},"Revoked(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID the revoked attestation."}},"RevokedOffchain(address,bytes32,uint64)":{"params":{"data":"The data.","revoker":"The address of the revoker.","timestamp":"The timestamp."}},"Timestamped(bytes32,uint64)":{"params":{"data":"The data.","timestamp":"The timestamp."}}},"kind":"dev","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"params":{"request":"The arguments of the attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attest({         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",         data: {             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",             expirationTime: 0,             revocable: true,             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",             data: \"0xF00D\",             value: 0         }     })"}},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })"}},"getAttestation(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"The attestation data members."}},"getRevokeOffchain(address,bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"getSchemaRegistry()":{"returns":{"_0":"The address of the global schema registry."}},"getTimestamp(bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"isAttestationValid(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"Whether an attestation exists."}},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])"}},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])"}},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])"}},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])"}},"multiRevokeOffchain(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"multiTimestamp(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"revoke((bytes32,(bytes32,uint256)))":{"params":{"request":"The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })"}},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })"}},"revokeOffchain(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"timestamp(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"IEAS","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":"f17325e7","attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":"3c042715","getAttestation(bytes32)":"a3112a64","getRevokeOffchain(address,bytes32)":"b469318d","getSchemaRegistry()":"f10b5cc8","getTimestamp(bytes32)":"d45c4435","isAttestationValid(bytes32)":"e30bb563","multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":"44adc90e","multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":"95411525","multiRevoke((bytes32,(bytes32,uint256)[])[])":"4cb7e9e5","multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":"0eabf660","multiRevokeOffchain(bytes32[])":"13893f61","multiTimestamp(bytes32[])":"e71ff365","revoke((bytes32,(bytes32,uint256)))":"46926267","revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":"a6d4dbc7","revokeOffchain(bytes32)":"cf190f34","timestamp(bytes32)":"4d003070","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"RevokedOffchain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Timestamped\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct DelegatedAttestationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"attestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchemaRegistry\",\"outputs\":[{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"isAttestationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct MultiDelegatedAttestationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiRevocationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct MultiDelegatedRevocationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct RevocationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct DelegatedRevocationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"revokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"revokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Attested(address,address,bytes32,bytes32)\":{\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schemaUID\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"Revoked(address,address,bytes32,bytes32)\":{\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schemaUID\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"RevokedOffchain(address,bytes32,uint64)\":{\"params\":{\"data\":\"The data.\",\"revoker\":\"The address of the revoker.\",\"timestamp\":\"The timestamp.\"}},\"Timestamped(bytes32,uint64)\":{\"params\":{\"data\":\"The data.\",\"timestamp\":\"The timestamp.\"}}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))\":{\"params\":{\"request\":\"The arguments of the attestation request.\"},\"returns\":{\"_0\":\"The UID of the new attestation. Example:     attest({         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",         data: {             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",             expirationTime: 0,             revocable: true,             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",             data: \\\"0xF00D\\\",             value: 0         }     })\"}},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"params\":{\"delegatedRequest\":\"The arguments of the delegated attestation request.\"},\"returns\":{\"_0\":\"The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })\"}},\"getAttestation(bytes32)\":{\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"The attestation data members.\"}},\"getRevokeOffchain(address,bytes32)\":{\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"getSchemaRegistry()\":{\"returns\":{\"_0\":\"The address of the global schema registry.\"}},\"getTimestamp(bytes32)\":{\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"isAttestationValid(bytes32)\":{\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"Whether an attestation exists.\"}},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])\":{\"params\":{\"multiRequests\":\"The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization.\"},\"returns\":{\"_0\":\"The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])\"}},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization.\"},\"returns\":{\"_0\":\"The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])\"}},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"params\":{\"multiRequests\":\"The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])\"}},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])\"}},\"multiRevokeOffchain(bytes32[])\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"multiTimestamp(bytes32[])\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"revoke((bytes32,(bytes32,uint256)))\":{\"params\":{\"request\":\"The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })\"}},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"params\":{\"delegatedRequest\":\"The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })\"}},\"revokeOffchain(bytes32)\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"timestamp(bytes32)\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"IEAS\",\"version\":1},\"userdoc\":{\"events\":{\"Attested(address,address,bytes32,bytes32)\":{\"notice\":\"Emitted when an attestation has been made.\"},\"Revoked(address,address,bytes32,bytes32)\":{\"notice\":\"Emitted when an attestation has been revoked.\"},\"RevokedOffchain(address,bytes32,uint64)\":{\"notice\":\"Emitted when a data has been revoked.\"},\"Timestamped(bytes32,uint64)\":{\"notice\":\"Emitted when a data has been timestamped.\"}},\"kind\":\"user\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))\":{\"notice\":\"Attests to a specific schema.\"},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"notice\":\"Attests to a specific schema via the provided ECDSA signature.\"},\"getAttestation(bytes32)\":{\"notice\":\"Returns an existing attestation by UID.\"},\"getRevokeOffchain(address,bytes32)\":{\"notice\":\"Returns the timestamp that the specified data was timestamped with.\"},\"getSchemaRegistry()\":{\"notice\":\"Returns the address of the global schema registry.\"},\"getTimestamp(bytes32)\":{\"notice\":\"Returns the timestamp that the specified data was timestamped with.\"},\"isAttestationValid(bytes32)\":{\"notice\":\"Checks whether an attestation exists.\"},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])\":{\"notice\":\"Attests to multiple schemas.\"},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"notice\":\"Attests to multiple schemas using via provided ECDSA signatures.\"},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"notice\":\"Revokes existing attestations to multiple schemas.\"},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"notice\":\"Revokes existing attestations to multiple schemas via provided ECDSA signatures.\"},\"multiRevokeOffchain(bytes32[])\":{\"notice\":\"Revokes the specified multiple bytes32 data.\"},\"multiTimestamp(bytes32[])\":{\"notice\":\"Timestamps the specified multiple bytes32 data.\"},\"revoke((bytes32,(bytes32,uint256)))\":{\"notice\":\"Revokes an existing attestation to a specific schema.\"},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"notice\":\"Revokes an existing attestation to a specific schema via the provided ECDSA signature.\"},\"revokeOffchain(bytes32)\":{\"notice\":\"Revokes the specified bytes32 data.\"},\"timestamp(bytes32)\":{\"notice\":\"Timestamps the specified bytes32 data.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"EAS - Ethereum Attestation Service interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":\"IEAS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x242e0203b314c8539fd4ad3c1f0b7a9c1178fe55b223f4bc007eb9cbf271854c\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been made."},"Revoked(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been revoked."},"RevokedOffchain(address,bytes32,uint64)":{"notice":"Emitted when a data has been revoked."},"Timestamped(bytes32,uint64)":{"notice":"Emitted when a data has been timestamped."}},"kind":"user","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"notice":"Attests to a specific schema."},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Attests to a specific schema via the provided ECDSA signature."},"getAttestation(bytes32)":{"notice":"Returns an existing attestation by UID."},"getRevokeOffchain(address,bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"getSchemaRegistry()":{"notice":"Returns the address of the global schema registry."},"getTimestamp(bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"isAttestationValid(bytes32)":{"notice":"Checks whether an attestation exists."},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"notice":"Attests to multiple schemas."},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Attests to multiple schemas using via provided ECDSA signatures."},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"notice":"Revokes existing attestations to multiple schemas."},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Revokes existing attestations to multiple schemas via provided ECDSA signatures."},"multiRevokeOffchain(bytes32[])":{"notice":"Revokes the specified multiple bytes32 data."},"multiTimestamp(bytes32[])":{"notice":"Timestamps the specified multiple bytes32 data."},"revoke((bytes32,(bytes32,uint256)))":{"notice":"Revokes an existing attestation to a specific schema."},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Revokes an existing attestation to a specific schema via the provided ECDSA signature."},"revokeOffchain(bytes32)":{"notice":"Revokes the specified bytes32 data."},"timestamp(bytes32)":{"notice":"Timestamps the specified bytes32 data."},"version()":{"notice":"Returns the full semver contract version."}},"notice":"EAS - Ethereum Attestation Service interface.","version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"ISchemaRegistry":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"address","name":"registerer","type":"address"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"indexed":false,"internalType":"struct SchemaRecord","name":"schema","type":"tuple"}],"name":"Registered","type":"event"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"schema","type":"string"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"}],"name":"register","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Registered(bytes32,address,(bytes32,address,bool,string))":{"params":{"registerer":"The address of the account used to register the schema.","schema":"The schema data.","uid":"The schema UID."}}},"kind":"dev","methods":{"getSchema(bytes32)":{"params":{"uid":"The UID of the schema to retrieve."},"returns":{"_0":"The schema data members."}},"register(string,address,bool)":{"params":{"resolver":"An optional schema resolver.","revocable":"Whether the schema allows revocations explicitly.","schema":"The schema data schema."},"returns":{"_0":"The UID of the new schema."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"ISchemaRegistry","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getSchema(bytes32)":"a2ea7c6e","register(string,address,bool)":"60d7a278","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct SchemaRecord\",\"name\":\"schema\",\"type\":\"tuple\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,address,bool,string))\":{\"params\":{\"registerer\":\"The address of the account used to register the schema.\",\"schema\":\"The schema data.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"getSchema(bytes32)\":{\"params\":{\"uid\":\"The UID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"register(string,address,bool)\":{\"params\":{\"resolver\":\"An optional schema resolver.\",\"revocable\":\"Whether the schema allows revocations explicitly.\",\"schema\":\"The schema data schema.\"},\"returns\":{\"_0\":\"The UID of the new schema.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"ISchemaRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,address,bool,string))\":{\"notice\":\"Emitted when a new schema has been registered\"}},\"kind\":\"user\",\"methods\":{\"getSchema(bytes32)\":{\"notice\":\"Returns an existing schema by UID\"},\"register(string,address,bool)\":{\"notice\":\"Submits and reserves a new schema\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"The interface of global attestation schemas for the Ethereum Attestation Service protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":\"ISchemaRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Registered(bytes32,address,(bytes32,address,bool,string))":{"notice":"Emitted when a new schema has been registered"}},"kind":"user","methods":{"getSchema(bytes32)":{"notice":"Returns an existing schema by UID"},"register(string,address,bool)":{"notice":"Submits and reserves a new schema"},"version()":{"notice":"Returns the full semver contract version."}},"notice":"The interface of global attestation schemas for the Ethereum Attestation Service protocol.","version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol":{"ISemver":{"abi":[{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"ISemver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"ISemver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"A semver interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":\"ISemver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"notice":"A semver interface.","version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"ISchemaResolver":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"ISchemaResolver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"isPayable()\":{\"returns\":{\"_0\":\"Whether the resolver supports ETH transfers.\"}},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"ISchemaResolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation and verifies whether it's valid.\"},\"isPayable()\":{\"notice\":\"Checks if the resolver can be sent ETH.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes multiple attestations and verifies whether they are valid.\"},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes revocation of multiple attestation and verifies they can be revoked.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation revocation and verifies if it can be revoked.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"The interface of an optional schema resolver.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":\"ISchemaResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"notice":"The interface of an optional schema resolver.","version":1}}},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"UUPSUnauthorizedCallContext","type":"error"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"name":"UUPSUnsupportedProxiableUUID","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"UUPSUnauthorizedCallContext()":[{"details":"The call is from an unauthorized context."}],"UUPSUnsupportedProxiableUUID(bytes32)":[{"details":"The storage `slot` is unsupported as a UUID."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"UPGRADE_INTERFACE_VERSION":{"details":"The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)` and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called, while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string. If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must be the empty byte string if no function should be called, making it impossible to invoke the `receive` function during an upgrade."},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","proxiableUUID()":"52d1902d","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"UPGRADE_INTERFACE_VERSION\":{\"details\":\"The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)` and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called, while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string. If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must be the empty byte string if no function should be called, making it impossible to invoke the `receive` function during an upgrade.\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"IERC1822Proxiable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol":{"ERC1967Utils":{"abi":[{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"ERC1967InvalidAdmin","type":"error"},{"inputs":[{"internalType":"address","name":"beacon","type":"address"}],"name":"ERC1967InvalidBeacon","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.","errors":{"ERC1967InvalidAdmin(address)":[{"details":"The `admin` of the proxy is invalid."}],"ERC1967InvalidBeacon(address)":[{"details":"The `beacon` of the proxy is invalid."}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}]},"events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1."},"BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1."},"IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ea8c8366e52f427a192f8ba8b908f85b61f8d95304d41967298d78d6fabdde164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0xA8 0xC8 CALLDATASIZE PUSH15 0x52F427A192F8BA8B908F85B61F8D95 ADDRESS 0x4D COINBASE SWAP7 PUSH19 0x98D78D6FABDDE164736F6C6343000814003300 ","sourceMap":"449:6273:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;449:6273:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ea8c8366e52f427a192f8ba8b908f85b61f8d95304d41967298d78d6fabdde164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0xA8 0xC8 CALLDATASIZE PUSH15 0x52F427A192F8BA8B908F85B61F8D95 ADDRESS 0x4D COINBASE SWAP7 PUSH19 0x98D78D6FABDDE164736F6C6343000814003300 ","sourceMap":"449:6273:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_checkNonPayable()":"infinite","_setAdmin(address)":"infinite","_setBeacon(address)":"infinite","_setImplementation(address)":"infinite","changeAdmin(address)":"infinite","getAdmin()":"infinite","getBeacon()":"infinite","getImplementation()":"infinite","upgradeBeaconToAndCall(address,bytes memory)":"infinite","upgradeToAndCall(address,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidBeacon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\",\"errors\":{\"ERC1967InvalidAdmin(address)\":[{\"details\":\"The `admin` of the proxy is invalid.\"}],\"ERC1967InvalidBeacon(address)\":[{\"details\":\"The `beacon` of the proxy is invalid.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\"},\"BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\"},\"IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":\"ERC1967Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"IBeacon":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {UpgradeableBeacon} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {UpgradeableBeacon} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"devdoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c244b7872d94e0792134be0fa26ec4f28f8fa41c4f9ba66c6fa7e47ab2412d4564736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 PREVRANDAO 0xB7 DUP8 0x2D SWAP5 0xE0 PUSH26 0x2134BE0FA26EC4F28F8FA41C4F9BA66C6FA7E47AB2412D456473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"195:6066:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;195:6066:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c244b7872d94e0792134be0fa26ec4f28f8fa41c4f9ba66c6fa7e47ab2412d4564736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 PREVRANDAO 0xB7 DUP8 0x2D SWAP5 0xE0 PUSH26 0x2134BE0FA26EC4F28F8FA41C4F9BA66C6FA7E47AB2412D456473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"195:6066:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220583b3ef807856132c45a9a98bb268eafff0b6239cb3395e70660bce5113c4a7964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC EXTCODESIZE RETURNDATACOPY 0xF8 SMOD DUP6 PUSH2 0x32C4 GAS SWAP11 SWAP9 0xBB 0x26 DUP15 0xAF SELFDESTRUCT SIGNEXTEND PUSH3 0x39CB33 SWAP6 0xE7 MOD PUSH1 0xBC 0xE5 GT EXTCODECOPY 0x4A PUSH26 0x64736F6C63430008140033000000000000000000000000000000 ","sourceMap":"1245:2685:28:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1245:2685:28;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220583b3ef807856132c45a9a98bb268eafff0b6239cb3395e70660bce5113c4a7964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC EXTCODESIZE RETURNDATACOPY 0xF8 SMOD DUP6 PUSH2 0x32C4 GAS SWAP11 SWAP9 0xBB 0x26 DUP15 0xAF SELFDESTRUCT SIGNEXTEND PUSH3 0x39CB33 SWAP6 0xE7 MOD PUSH1 0xBC 0xE5 GT EXTCODECOPY 0x4A PUSH26 0x64736F6C63430008140033000000000000000000000000000000 ","sourceMap":"1245:2685:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:31:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:31;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:31:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:32:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:32;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:32:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/AttestationService.sol":{"AttestationService":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"UUPSUnauthorizedCallContext","type":"error"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"name":"UUPSUnsupportedProxiableUUID","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"}],"name":"AttestationCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"schemaId","type":"bytes32"}],"name":"SchemaCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"ATTESTATION_CREATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"createMissionEnrollmentAttestation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createMissionEnrollmentSchema","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getMissionEnrollmentSchema","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantAttestationCreatorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_eas","type":"address"},{"internalType":"address","name":"_schemaRegistry","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isApprovedAttestationCreator","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeAttestationCreatorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"verifyAttestation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"UUPSUnauthorizedCallContext()":[{"details":"The call is from an unauthorized context."}],"UUPSUnsupportedProxiableUUID(bytes32)":[{"details":"The storage `slot` is unsupported as a UUID."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4191":{"entryPoint":null,"id":4191,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_1639":{"entryPoint":34,"id":1639,"parameterSlots":0,"returnSlots":0},"@_getInitializableStorage_1670":{"entryPoint":null,"id":1670,"parameterSlots":0,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:216:37","statements":[{"nodeType":"YulBlock","src":"6:3:37","statements":[]},{"body":{"nodeType":"YulBlock","src":"113:101:37","statements":[{"nodeType":"YulAssignment","src":"123:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"135:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"146:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"131:3:37"},"nodeType":"YulFunctionCall","src":"131:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"123:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"165:9:37"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"180:6:37"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"196:2:37","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"192:3:37"},"nodeType":"YulFunctionCall","src":"192:10:37"},{"kind":"number","nodeType":"YulLiteral","src":"204:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"188:3:37"},"nodeType":"YulFunctionCall","src":"188:18:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"176:3:37"},"nodeType":"YulFunctionCall","src":"176:31:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"158:6:37"},"nodeType":"YulFunctionCall","src":"158:50:37"},"nodeType":"YulExpressionStatement","src":"158:50:37"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"82:9:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"93:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"104:4:37","type":""}],"src":"14:200:37"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(64, 1), 1)))\n    }\n}","id":37,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523060805234801561001457600080fd5b5061001d610022565b6100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b60805161174b6100fd60003960008181610d9801528181610dc10152610f05015261174b6000f3fe6080604052600436106101145760003560e01c806352d1902d116100a0578063a217fddf11610064578063a217fddf146102f4578063ad3cb1cc14610309578063bd46204914610347578063d547741f1461037b578063e27fadab1461039b57600080fd5b806352d1902d1461026a5780635956ce451461027f578063624b04bd14610294578063677339ce146102b457806391d14854146102d457600080fd5b80632f2ff15d116100e75780632f2ff15d146101be57806336568abe146101de578063485cc955146101fe5780634a0145b61461021e5780634f1ef2861461025757600080fd5b806301ffc9a71461011957806308f469571461014e5780631ecf2fbf1461016e578063248a9ca314610190575b600080fd5b34801561012557600080fd5b5061013961013436600461119a565b6103b0565b60405190151581526020015b60405180910390f35b34801561015a57600080fd5b506101396101693660046111c4565b6103e7565b34801561017a57600080fd5b5061018e6101893660046111f2565b6104dc565b005b34801561019c57600080fd5b506101b06101ab3660046111c4565b61050c565b604051908152602001610145565b3480156101ca57600080fd5b5061018e6101d936600461120f565b61052e565b3480156101ea57600080fd5b5061018e6101f936600461120f565b610550565b34801561020a57600080fd5b5061018e61021936600461123f565b610588565b34801561022a57600080fd5b506101396102393660046111f2565b6001600160a01b031660009081526003602052604090205460ff1690565b61018e610265366004611306565b61077e565b34801561027657600080fd5b506101b061079d565b34801561028b57600080fd5b506002546101b0565b3480156102a057600080fd5b506101b06102af366004611399565b6107ba565b3480156102c057600080fd5b5061018e6102cf3660046111f2565b610a2a565b3480156102e057600080fd5b506101396102ef36600461120f565b610add565b34801561030057600080fd5b506101b0600081565b34801561031557600080fd5b5061033a604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101459190611415565b34801561035357600080fd5b506101b07ffe59eece44efc73d9bec857e15b77961120d43be620d135f2f6356bc328d55f181565b34801561038757600080fd5b5061018e61039636600461120f565b610b15565b3480156103a757600080fd5b5061018e610b31565b60006001600160e01b03198216637965db0b60e01b14806103e157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000816104345760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a5908185d1d195cdd185d1a5bdb88125160521b60448201526064015b60405180910390fd5b600080546040516328c44a9960e21b8152600481018590526001600160a01b039091169063a3112a6490602401600060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a691908101906114ad565b8051909150831480156104d5575060e08101516001600160a01b031660009081526003602052604090205460ff165b9392505050565b60006104e781610c55565b506001600160a01b03166000908152600360205260409020805460ff19166001179055565b60009081526000805160206116f6833981519152602052604090206001015490565b6105378261050c565b61054081610c55565b61054a8383610c62565b50505050565b6001600160a01b03811633146105795760405163334bd91960e11b815260040160405180910390fd5b6105838282610d07565b505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156105ce5750825b905060008267ffffffffffffffff1660011480156105eb5750303b155b9050811580156105f9575080155b156106175760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561064157845460ff60401b1916600160401b1785555b6001600160a01b0387161580159061066157506001600160a01b03861615155b61069f5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161042b565b6106a7610d83565b6106af610d83565b600080546001600160a01b03808a166001600160a01b031992831617835560018054918a16919092161790556106e59033610c62565b5073f0bc5cc2b4866daaecb069430c60b2452007703760005260036020527fe25ada2f8bc6473c574413df8a42fc5776cb36009b41f9ba7f561ed55bb2b549805460ff19166001179055831561077557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610786610d8d565b61078f82610e32565b6107998282610e3d565b5050565b60006107a7610efa565b5060008051602061169083398151915290565b3360009081526003602052604081205460ff166108275760405162461bcd60e51b815260206004820152602560248201527f4e6f7420617574686f72697a656420746f20637265617465206174746573746160448201526474696f6e7360d81b606482015260840161042b565b60025461086b5760405162461bcd60e51b815260206004820152601260248201527114d8da195b58481b9bdd0818dc99585d195960721b604482015260640161042b565b6001600160a01b0383166108b55760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b604482015260640161042b565b816000036108f85760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b604482015260640161042b565b604080516001600160a01b038516602082015290810183905242606082015233608082015260009060a00160408051601f1981840301815282820182526002548352815160c0810183526001600160a01b03808916825260006020838101829052600184870152606084018290526080840185905260a084018290528601929092528154935163f17325e760e01b81529295509092169063f17325e7906109a39085906004016115a4565b6020604051808303816000875af11580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e69190611627565b60405190915033906001600160a01b0388169083907f63f86f3e95d67d75fed996a7db68f9e7eabf0600abbd54fccabf34ec3b5fa4a790600090a495945050505050565b6000610a3581610c55565b73f0bc5cc2b4866daaecb069430c60b24520077036196001600160a01b03831601610abb5760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f74207265766f6b6520726f6c652066726f6d206d61696e2061747460448201526f32b9ba30ba34b7b71031b932b0ba37b960811b606482015260840161042b565b506001600160a01b03166000908152600360205260409020805460ff19169055565b60009182526000805160206116f6833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610b1e8261050c565b610b2781610c55565b61054a8383610d07565b6000610b3c81610c55565b60025415610b855760405162461bcd60e51b815260206004820152601660248201527514d8da195b5848185b1c9958591e4818dc99585d195960521b604482015260640161042b565b60006040518060800160405280604681526020016116b06046913960018054604051630c1af44f60e31b81529293506000926001600160a01b03909116916360d7a27891610bda918691869190600401611640565b6020604051808303816000875af1158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190611627565b600281905560405190915081907fed68f5afea10be5233231e5d15186bf1c9c0b9f6d3a767404d90688bccf293af90600090a2505050565b610c5f8133610f43565b50565b60006000805160206116f6833981519152610c7d8484610add565b610cfd576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610cb33390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506103e1565b60009150506103e1565b60006000805160206116f6833981519152610d228484610add565b15610cfd576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506103e1565b610d8b610f7c565b565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610e1457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e08600080516020611690833981519152546001600160a01b031690565b6001600160a01b031614155b15610d8b5760405163703e46dd60e11b815260040160405180910390fd5b600061079981610c55565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e97575060408051601f3d908101601f19168201909252610e9491810190611627565b60015b610ebf57604051634c9c8ce360e01b81526001600160a01b038316600482015260240161042b565b6000805160206116908339815191528114610ef057604051632a87526960e21b81526004810182905260240161042b565b6105838383610fc5565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d8b5760405163703e46dd60e11b815260040160405180910390fd5b610f4d8282610add565b6107995760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161042b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610d8b57604051631afcd79f60e31b815260040160405180910390fd5b610fce8261101b565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611013576105838282611080565b6107996110f6565b806001600160a01b03163b60000361105157604051634c9c8ce360e01b81526001600160a01b038216600482015260240161042b565b60008051602061169083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161109d9190611673565b600060405180830381855af49150503d80600081146110d8576040519150601f19603f3d011682016040523d82523d6000602084013e6110dd565b606091505b50915091506110ed858383611115565b95945050505050565b3415610d8b5760405163b398979f60e01b815260040160405180910390fd5b60608261112a5761112582611171565b6104d5565b815115801561114157506001600160a01b0384163b155b1561116a57604051639996b31560e01b81526001600160a01b038516600482015260240161042b565b5092915050565b8051156111815780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156111ac57600080fd5b81356001600160e01b0319811681146104d557600080fd5b6000602082840312156111d657600080fd5b5035919050565b6001600160a01b0381168114610c5f57600080fd5b60006020828403121561120457600080fd5b81356104d5816111dd565b6000806040838503121561122257600080fd5b823591506020830135611234816111dd565b809150509250929050565b6000806040838503121561125257600080fd5b823561125d816111dd565b91506020830135611234816111dd565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156112a7576112a761126d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156112d6576112d661126d565b604052919050565b600067ffffffffffffffff8211156112f8576112f861126d565b50601f01601f191660200190565b6000806040838503121561131957600080fd5b8235611324816111dd565b9150602083013567ffffffffffffffff81111561134057600080fd5b8301601f8101851361135157600080fd5b803561136461135f826112de565b6112ad565b81815286602083850101111561137957600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080604083850312156113ac57600080fd5b82356113b7816111dd565b946020939093013593505050565b60005b838110156113e05781810151838201526020016113c8565b50506000910152565b600081518084526114018160208601602086016113c5565b601f01601f19169290920160200192915050565b6020815260006104d560208301846113e9565b805167ffffffffffffffff8116811461144057600080fd5b919050565b8051611440816111dd565b8051801515811461144057600080fd5b600082601f83011261147157600080fd5b815161147f61135f826112de565b81815284602083860101111561149457600080fd5b6114a58260208301602087016113c5565b949350505050565b6000602082840312156114bf57600080fd5b815167ffffffffffffffff808211156114d757600080fd5b9083019061014082860312156114ec57600080fd5b6114f4611283565b825181526020830151602082015261150e60408401611428565b604082015261151f60608401611428565b606082015261153060808401611428565b608082015260a083015160a082015261154b60c08401611445565b60c082015261155c60e08401611445565b60e082015261010061156f818501611450565b90820152610120838101518381111561158757600080fd5b61159388828701611460565b918301919091525095945050505050565b60208152815160208201526000602083015160408084015260018060a01b03815116606084015267ffffffffffffffff60208201511660808401526040810151151560a0840152606081015160c0840152608081015160c060e085015261160f6101208501826113e9565b905060a0820151610100850152809250505092915050565b60006020828403121561163957600080fd5b5051919050565b60608152600061165360608301866113e9565b6001600160a01b0394909416602083015250901515604090910152919050565b600082516116858184602087016113c5565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc616464726573732075736572416464726573732c75696e7432353620746f6b656e49642c75696e743235362074696d657374616d702c6164647265737320617474657374657202dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220ff6165ce9236c68bcd0d2b5a4b3f4d490fc1259abfcbafb35209fcce2e083a6664736f6c63430008140033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D PUSH2 0x22 JUMP JUMPDEST PUSH2 0xD4 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH9 0x10000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x72 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND EQ PUSH2 0xD1 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x174B PUSH2 0xFD PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xD98 ADD MSTORE DUP2 DUP2 PUSH2 0xDC1 ADD MSTORE PUSH2 0xF05 ADD MSTORE PUSH2 0x174B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x114 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xBD462049 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0xE27FADAB EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x5956CE45 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x624B04BD EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0x677339CE EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x4A0145B6 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x8F46957 EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x1ECF2FBF EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x190 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0x119A JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F2 JUMP JUMPDEST PUSH2 0x4DC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x50C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x145 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0x550 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x219 CALLDATASIZE PUSH1 0x4 PUSH2 0x123F JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x265 CALLDATASIZE PUSH1 0x4 PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x77E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x79D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x1B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x2AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x7BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0x11F2 JUMP JUMPDEST PUSH2 0xA2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0xADD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0x1415 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH32 0xFE59EECE44EFC73D9BEC857E15B77961120D43BE620D135F2F6356BC328D55F1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0xB15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x3E1 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x125B9D985B1A5908185D1D195CDD185D1A5BDB881251 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4A6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14AD JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP DUP4 EQ DUP1 ISZERO PUSH2 0x4D5 JUMPI POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E7 DUP2 PUSH2 0xC55 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x537 DUP3 PUSH2 0x50C JUMP JUMPDEST PUSH2 0x540 DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x54A DUP4 DUP4 PUSH2 0xC62 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x579 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x583 DUP3 DUP3 PUSH2 0xD07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x5CE JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x5EB JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x5F9 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x641 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x661 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO ISZERO JUMPDEST PUSH2 0x69F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x496E76616C69642061646472657373 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH2 0x6A7 PUSH2 0xD83 JUMP JUMPDEST PUSH2 0x6AF PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR DUP4 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP2 DUP11 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH2 0x6E5 SWAP1 CALLER PUSH2 0xC62 JUMP JUMPDEST POP PUSH20 0xF0BC5CC2B4866DAAECB069430C60B24520077037 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH32 0xE25ADA2F8BC6473C574413DF8A42FC5776CB36009B41F9BA7F561ED55BB2B549 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 ISZERO PUSH2 0x775 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x786 PUSH2 0xD8D JUMP JUMPDEST PUSH2 0x78F DUP3 PUSH2 0xE32 JUMP JUMPDEST PUSH2 0x799 DUP3 DUP3 PUSH2 0xE3D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A7 PUSH2 0xEFA JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x827 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F206372656174652061747465737461 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x74696F6E73 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x14D8DA195B58481B9BDD0818DC99585D1959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x125B9D985B1A59081D1BDAD95B881251 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 ADD DUP3 MSTORE PUSH1 0x2 SLOAD DUP4 MSTORE DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 DUP5 DUP8 ADD MSTORE PUSH1 0x60 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP5 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD DUP3 SWAP1 MSTORE DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP2 SLOAD SWAP4 MLOAD PUSH4 0xF17325E7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP6 POP SWAP1 SWAP3 AND SWAP1 PUSH4 0xF17325E7 SWAP1 PUSH2 0x9A3 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E6 SWAP2 SWAP1 PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP4 SWAP1 PUSH32 0x63F86F3E95D67D75FED996A7DB68F9E7EABF0600ABBD54FCCABF34EC3B5FA4A7 SWAP1 PUSH1 0x0 SWAP1 LOG4 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA35 DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH20 0xF0BC5CC2B4866DAAECB069430C60B24520077036 NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207265766F6B6520726F6C652066726F6D206D61696E20617474 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x32B9BA30BA34B7B71031B932B0BA37B9 PUSH1 0x81 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x42B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB1E DUP3 PUSH2 0x50C JUMP JUMPDEST PUSH2 0xB27 DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x54A DUP4 DUP4 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3C DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH1 0x2 SLOAD ISZERO PUSH2 0xB85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D8DA195B5848185B1C9958591E4818DC99585D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16B0 PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC1AF44F PUSH1 0xE3 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x60D7A278 SWAP2 PUSH2 0xBDA SWAP2 DUP7 SWAP2 DUP7 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1640 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC1D SWAP2 SWAP1 PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 POP DUP2 SWAP1 PUSH32 0xED68F5AFEA10BE5233231E5D15186BF1C9C0B9F6D3A767404D90688BCCF293AF SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0xC5F DUP2 CALLER PUSH2 0xF43 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xC7D DUP5 DUP5 PUSH2 0xADD JUMP JUMPDEST PUSH2 0xCFD JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xCB3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD22 DUP5 DUP5 PUSH2 0xADD JUMP JUMPDEST ISZERO PUSH2 0xCFD JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x3E1 JUMP JUMPDEST PUSH2 0xD8B PUSH2 0xF7C JUMP JUMPDEST JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0xE14 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE08 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x799 DUP2 PUSH2 0xC55 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE97 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE94 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xEBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xEF0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST PUSH2 0x583 DUP4 DUP4 PUSH2 0xFC5 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF4D DUP3 DUP3 PUSH2 0xADD JUMP JUMPDEST PUSH2 0x799 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x42B JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFCE DUP3 PUSH2 0x101B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x1013 JUMPI PUSH2 0x583 DUP3 DUP3 PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x799 PUSH2 0x10F6 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x1051 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10D8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x10ED DUP6 DUP4 DUP4 PUSH2 0x1115 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x112A JUMPI PUSH2 0x1125 DUP3 PUSH2 0x1171 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x1141 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x116A JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1181 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4D5 DUP2 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x11DD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x125D DUP2 PUSH2 0x11DD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x11DD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12A7 JUMPI PUSH2 0x12A7 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12D6 JUMPI PUSH2 0x12D6 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12F8 JUMPI PUSH2 0x12F8 PUSH2 0x126D JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1324 DUP2 PUSH2 0x11DD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1364 PUSH2 0x135F DUP3 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0x12AD JUMP JUMPDEST DUP2 DUP2 MSTORE DUP7 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP4 DUP4 ADD ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x13B7 DUP2 PUSH2 0x11DD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13E0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13C8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1401 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x13C5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4D5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x13E9 JUMP JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1440 DUP2 PUSH2 0x11DD JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x147F PUSH2 0x135F DUP3 PUSH2 0x12DE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A5 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x13C5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x14EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F4 PUSH2 0x1283 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x150E PUSH1 0x40 DUP5 ADD PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x151F PUSH1 0x60 DUP5 ADD PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1530 PUSH1 0x80 DUP5 ADD PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x154B PUSH1 0xC0 DUP5 ADD PUSH2 0x1445 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x155C PUSH1 0xE0 DUP5 ADD PUSH2 0x1445 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x156F DUP2 DUP6 ADD PUSH2 0x1450 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x1587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1593 DUP9 DUP3 DUP8 ADD PUSH2 0x1460 JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP1 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x160F PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0x13E9 JUMP JUMPDEST SWAP1 POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x100 DUP6 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1653 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x20 DUP4 ADD MSTORE POP SWAP1 ISZERO ISZERO PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1685 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x13C5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC6164647265737320757365 PUSH19 0x416464726573732C75696E7432353620746F6B PUSH6 0x6E49642C7569 PUSH15 0x743235362074696D657374616D702C PUSH2 0x6464 PUSH19 0x65737320617474657374657202DD7BC7DEC4DC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800A2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH2 0x65CE SWAP3 CALLDATASIZE 0xC6 DUP12 0xCD 0xD 0x2B GAS 0x4B EXTCODEHASH 0x4D 0x49 0xF 0xC1 0x25 SWAP11 0xBF 0xCB 0xAF 0xB3 MSTORE MULMOD 0xFC 0xCE 0x2E ADDMOD GASPRICE PUSH7 0x64736F6C634300 ADDMOD EQ STOP CALLER ","sourceMap":"691:3880:33:-:0;;;1171:4:20;1128:48;;1393:53:33;;;;;;;;;-1:-1:-1;1417:22:33;:20;:22::i;:::-;691:3880;;7711:422:19;8870:21;7900:15;;;;;;;7896:76;;;7938:23;;-1:-1:-1;;;7938:23:19;;;;;;;;;;;7896:76;7985:14;;-1:-1:-1;;;;;7985:14:19;;;:34;7981:146;;8035:33;;-1:-1:-1;;;;;;8035:33:19;-1:-1:-1;;;;;8035:33:19;;;;;8087:29;;158:50:37;;;8087:29:19;;146:2:37;131:18;8087:29:19;;;;;;;7981:146;7760:373;7711:422::o;14:200:37:-;691:3880:33;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ATTESTATION_CREATOR_ROLE_4164":{"entryPoint":null,"id":4164,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_1083":{"entryPoint":null,"id":1083,"parameterSlots":0,"returnSlots":0},"@UPGRADE_INTERFACE_VERSION_1695":{"entryPoint":null,"id":1695,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_1118":{"entryPoint":3459,"id":1118,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_1725":{"entryPoint":null,"id":1725,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_4485":{"entryPoint":3634,"id":4485,"parameterSlots":1,"returnSlots":0},"@_checkInitializing_1593":{"entryPoint":3964,"id":1593,"parameterSlots":0,"returnSlots":0},"@_checkNonPayable_2334":{"entryPoint":4342,"id":2334,"parameterSlots":0,"returnSlots":0},"@_checkNotDelegated_1801":{"entryPoint":3834,"id":1801,"parameterSlots":0,"returnSlots":0},"@_checkProxy_1785":{"entryPoint":3469,"id":1785,"parameterSlots":0,"returnSlots":0},"@_checkRole_1184":{"entryPoint":3157,"id":1184,"parameterSlots":1,"returnSlots":0},"@_checkRole_1205":{"entryPoint":3907,"id":1205,"parameterSlots":2,"returnSlots":0},"@_getAccessControlStorage_1101":{"entryPoint":null,"id":1101,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_1670":{"entryPoint":null,"id":1670,"parameterSlots":0,"returnSlots":1},"@_grantRole_1370":{"entryPoint":3170,"id":1370,"parameterSlots":2,"returnSlots":1},"@_isInitializing_1661":{"entryPoint":null,"id":1661,"parameterSlots":0,"returnSlots":1},"@_msgSender_1881":{"entryPoint":null,"id":1881,"parameterSlots":0,"returnSlots":1},"@_revert_2597":{"entryPoint":4465,"id":2597,"parameterSlots":1,"returnSlots":0},"@_revokeRole_1416":{"entryPoint":3335,"id":1416,"parameterSlots":2,"returnSlots":1},"@_setImplementation_2120":{"entryPoint":4123,"id":2120,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_1852":{"entryPoint":3645,"id":1852,"parameterSlots":2,"returnSlots":0},"@createMissionEnrollmentAttestation_4382":{"entryPoint":1978,"id":4382,"parameterSlots":2,"returnSlots":1},"@createMissionEnrollmentSchema_4291":{"entryPoint":2865,"id":4291,"parameterSlots":0,"returnSlots":0},"@functionDelegateCall_2517":{"entryPoint":4224,"id":2517,"parameterSlots":2,"returnSlots":1},"@getAddressSlot_2630":{"entryPoint":null,"id":2630,"parameterSlots":1,"returnSlots":1},"@getImplementation_2093":{"entryPoint":null,"id":2093,"parameterSlots":0,"returnSlots":1},"@getMissionEnrollmentSchema_4475":{"entryPoint":null,"id":4475,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_1226":{"entryPoint":1292,"id":1226,"parameterSlots":1,"returnSlots":1},"@grantAttestationCreatorRole_4433":{"entryPoint":1244,"id":4433,"parameterSlots":1,"returnSlots":0},"@grantRole_1245":{"entryPoint":1326,"id":1245,"parameterSlots":2,"returnSlots":0},"@hasRole_1171":{"entryPoint":2781,"id":1171,"parameterSlots":2,"returnSlots":1},"@initialize_4248":{"entryPoint":1416,"id":4248,"parameterSlots":2,"returnSlots":0},"@isApprovedAttestationCreator_4467":{"entryPoint":null,"id":4467,"parameterSlots":1,"returnSlots":1},"@proxiableUUID_1743":{"entryPoint":1949,"id":1743,"parameterSlots":0,"returnSlots":1},"@renounceRole_1287":{"entryPoint":1360,"id":1287,"parameterSlots":2,"returnSlots":0},"@revokeAttestationCreatorRole_4455":{"entryPoint":2602,"id":4455,"parameterSlots":1,"returnSlots":0},"@revokeRole_1264":{"entryPoint":2837,"id":1264,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1146":{"entryPoint":944,"id":1146,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1938":{"entryPoint":null,"id":1938,"parameterSlots":1,"returnSlots":1},"@upgradeToAndCall_1763":{"entryPoint":1918,"id":1763,"parameterSlots":2,"returnSlots":0},"@upgradeToAndCall_2154":{"entryPoint":4037,"id":2154,"parameterSlots":2,"returnSlots":0},"@verifyAttestation_4418":{"entryPoint":999,"id":4418,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_2557":{"entryPoint":4373,"id":2557,"parameterSlots":3,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":5189,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":5200,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":5216,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4594,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4671,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":4870,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5017,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":4548,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":5671,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":4623,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Attestation_$608_memory_ptr_fromMemory":{"entryPoint":5293,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint64_fromMemory":{"entryPoint":5160,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string":{"entryPoint":5097,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5747,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5141,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_contract$_ISchemaResolver_$1054_t_bool__to_t_string_memory_ptr_t_address_t_bool__fromStack_reversed":{"entryPoint":5696,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_320bc07c8178160cb86581a0aa13b126e49a06b2a074c60803ef78499b8b2de0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_99cc956d7924542614737dd71154e80a10f9ecd188c70fa99b2ffc8dde91e9c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a7590e47e33f92b1ed6dc67c39e9be7a8f7016e52755f75e79272ee5abf05ab9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b3ae426922f694fceb367a45d8bec40e467d2d775ec5cdb3e494c7a88dcc5de6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_be89daa06189757200215a4c2511aa872de4325ebdb77df3a283e69ff63e623f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_AttestationRequest_$654_memory_ptr__to_t_struct$_AttestationRequest_$654_memory_ptr__fromStack_reversed":{"entryPoint":5540,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":4781,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_1806":{"entryPoint":4739,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":4830,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5061,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x41":{"entryPoint":4717,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":4573,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12843:37","statements":[{"nodeType":"YulBlock","src":"6:3:37","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:37","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:37"},"nodeType":"YulFunctionCall","src":"131:12:37"},"nodeType":"YulExpressionStatement","src":"131:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:37"},"nodeType":"YulFunctionCall","src":"100:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:37"},"nodeType":"YulFunctionCall","src":"96:32:37"},"nodeType":"YulIf","src":"93:52:37"},{"nodeType":"YulVariableDeclaration","src":"154:36:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:37"},"nodeType":"YulFunctionCall","src":"167:23:37"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:37"},"nodeType":"YulFunctionCall","src":"256:12:37"},"nodeType":"YulExpressionStatement","src":"256:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:37"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:37"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:37","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:37","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:37"},"nodeType":"YulFunctionCall","src":"230:20:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:37"},"nodeType":"YulFunctionCall","src":"219:32:37"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:37"},"nodeType":"YulFunctionCall","src":"209:43:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:37"},"nodeType":"YulFunctionCall","src":"202:51:37"},"nodeType":"YulIf","src":"199:71:37"},{"nodeType":"YulAssignment","src":"279:15:37","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:37"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:37","type":""}],"src":"14:286:37"},{"body":{"nodeType":"YulBlock","src":"400:92:37","statements":[{"nodeType":"YulAssignment","src":"410:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:37"},"nodeType":"YulFunctionCall","src":"418:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:37"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:37"},"nodeType":"YulFunctionCall","src":"470:14:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:37"},"nodeType":"YulFunctionCall","src":"463:22:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:37"},"nodeType":"YulFunctionCall","src":"445:41:37"},"nodeType":"YulExpressionStatement","src":"445:41:37"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:37","type":""}],"src":"305:187:37"},{"body":{"nodeType":"YulBlock","src":"567:110:37","statements":[{"body":{"nodeType":"YulBlock","src":"613:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"622:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"625:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"615:6:37"},"nodeType":"YulFunctionCall","src":"615:12:37"},"nodeType":"YulExpressionStatement","src":"615:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"588:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"584:3:37"},"nodeType":"YulFunctionCall","src":"584:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"609:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"580:3:37"},"nodeType":"YulFunctionCall","src":"580:32:37"},"nodeType":"YulIf","src":"577:52:37"},{"nodeType":"YulAssignment","src":"638:33:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"661:9:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"648:12:37"},"nodeType":"YulFunctionCall","src":"648:23:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"638:6:37"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"533:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"544:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"556:6:37","type":""}],"src":"497:180:37"},{"body":{"nodeType":"YulBlock","src":"727:86:37","statements":[{"body":{"nodeType":"YulBlock","src":"791:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"800:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"803:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"793:6:37"},"nodeType":"YulFunctionCall","src":"793:12:37"},"nodeType":"YulExpressionStatement","src":"793:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"750:5:37"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"761:5:37"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"776:3:37","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"781:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"772:3:37"},"nodeType":"YulFunctionCall","src":"772:11:37"},{"kind":"number","nodeType":"YulLiteral","src":"785:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"768:3:37"},"nodeType":"YulFunctionCall","src":"768:19:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"757:3:37"},"nodeType":"YulFunctionCall","src":"757:31:37"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"747:2:37"},"nodeType":"YulFunctionCall","src":"747:42:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"740:6:37"},"nodeType":"YulFunctionCall","src":"740:50:37"},"nodeType":"YulIf","src":"737:70:37"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"716:5:37","type":""}],"src":"682:131:37"},{"body":{"nodeType":"YulBlock","src":"888:177:37","statements":[{"body":{"nodeType":"YulBlock","src":"934:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"943:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"946:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"936:6:37"},"nodeType":"YulFunctionCall","src":"936:12:37"},"nodeType":"YulExpressionStatement","src":"936:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"909:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"918:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"905:3:37"},"nodeType":"YulFunctionCall","src":"905:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"930:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"901:3:37"},"nodeType":"YulFunctionCall","src":"901:32:37"},"nodeType":"YulIf","src":"898:52:37"},{"nodeType":"YulVariableDeclaration","src":"959:36:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"985:9:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"972:12:37"},"nodeType":"YulFunctionCall","src":"972:23:37"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"963:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:37"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1004:24:37"},"nodeType":"YulFunctionCall","src":"1004:31:37"},"nodeType":"YulExpressionStatement","src":"1004:31:37"},{"nodeType":"YulAssignment","src":"1044:15:37","value":{"name":"value","nodeType":"YulIdentifier","src":"1054:5:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1044:6:37"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"854:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"865:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"877:6:37","type":""}],"src":"818:247:37"},{"body":{"nodeType":"YulBlock","src":"1171:76:37","statements":[{"nodeType":"YulAssignment","src":"1181:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1193:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"1204:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1189:3:37"},"nodeType":"YulFunctionCall","src":"1189:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1181:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1223:9:37"},{"name":"value0","nodeType":"YulIdentifier","src":"1234:6:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1216:6:37"},"nodeType":"YulFunctionCall","src":"1216:25:37"},"nodeType":"YulExpressionStatement","src":"1216:25:37"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1140:9:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1151:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1162:4:37","type":""}],"src":"1070:177:37"},{"body":{"nodeType":"YulBlock","src":"1339:228:37","statements":[{"body":{"nodeType":"YulBlock","src":"1385:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1394:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1397:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1387:6:37"},"nodeType":"YulFunctionCall","src":"1387:12:37"},"nodeType":"YulExpressionStatement","src":"1387:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1360:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"1369:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1356:3:37"},"nodeType":"YulFunctionCall","src":"1356:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"1381:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1352:3:37"},"nodeType":"YulFunctionCall","src":"1352:32:37"},"nodeType":"YulIf","src":"1349:52:37"},{"nodeType":"YulAssignment","src":"1410:33:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1433:9:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1420:12:37"},"nodeType":"YulFunctionCall","src":"1420:23:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1410:6:37"}]},{"nodeType":"YulVariableDeclaration","src":"1452:45:37","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1482:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"1493:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1478:3:37"},"nodeType":"YulFunctionCall","src":"1478:18:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1465:12:37"},"nodeType":"YulFunctionCall","src":"1465:32:37"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1456:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1531:5:37"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1506:24:37"},"nodeType":"YulFunctionCall","src":"1506:31:37"},"nodeType":"YulExpressionStatement","src":"1506:31:37"},{"nodeType":"YulAssignment","src":"1546:15:37","value":{"name":"value","nodeType":"YulIdentifier","src":"1556:5:37"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1546:6:37"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1297:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1308:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1320:6:37","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1328:6:37","type":""}],"src":"1252:315:37"},{"body":{"nodeType":"YulBlock","src":"1659:301:37","statements":[{"body":{"nodeType":"YulBlock","src":"1705:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1714:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1717:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1707:6:37"},"nodeType":"YulFunctionCall","src":"1707:12:37"},"nodeType":"YulExpressionStatement","src":"1707:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1680:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"1689:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1676:3:37"},"nodeType":"YulFunctionCall","src":"1676:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"1701:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1672:3:37"},"nodeType":"YulFunctionCall","src":"1672:32:37"},"nodeType":"YulIf","src":"1669:52:37"},{"nodeType":"YulVariableDeclaration","src":"1730:36:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1756:9:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1743:12:37"},"nodeType":"YulFunctionCall","src":"1743:23:37"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1734:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:37"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1775:24:37"},"nodeType":"YulFunctionCall","src":"1775:31:37"},"nodeType":"YulExpressionStatement","src":"1775:31:37"},{"nodeType":"YulAssignment","src":"1815:15:37","value":{"name":"value","nodeType":"YulIdentifier","src":"1825:5:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1815:6:37"}]},{"nodeType":"YulVariableDeclaration","src":"1839:47:37","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1871:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"1882:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1867:3:37"},"nodeType":"YulFunctionCall","src":"1867:18:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1854:12:37"},"nodeType":"YulFunctionCall","src":"1854:32:37"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1843:7:37","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1920:7:37"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1895:24:37"},"nodeType":"YulFunctionCall","src":"1895:33:37"},"nodeType":"YulExpressionStatement","src":"1895:33:37"},{"nodeType":"YulAssignment","src":"1937:17:37","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1947:7:37"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1937:6:37"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1617:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1628:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1640:6:37","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1648:6:37","type":""}],"src":"1572:388:37"},{"body":{"nodeType":"YulBlock","src":"1997:95:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2014:1:37","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2021:3:37","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2026:10:37","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2017:3:37"},"nodeType":"YulFunctionCall","src":"2017:20:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2007:6:37"},"nodeType":"YulFunctionCall","src":"2007:31:37"},"nodeType":"YulExpressionStatement","src":"2007:31:37"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2054:1:37","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2057:4:37","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2047:6:37"},"nodeType":"YulFunctionCall","src":"2047:15:37"},"nodeType":"YulExpressionStatement","src":"2047:15:37"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2078:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2081:4:37","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2071:6:37"},"nodeType":"YulFunctionCall","src":"2071:15:37"},"nodeType":"YulExpressionStatement","src":"2071:15:37"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1965:127:37"},{"body":{"nodeType":"YulBlock","src":"2143:209:37","statements":[{"nodeType":"YulAssignment","src":"2153:19:37","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2169:2:37","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2163:5:37"},"nodeType":"YulFunctionCall","src":"2163:9:37"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2153:6:37"}]},{"nodeType":"YulVariableDeclaration","src":"2181:37:37","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2203:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"2211:6:37","type":"","value":"0x0140"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2199:3:37"},"nodeType":"YulFunctionCall","src":"2199:19:37"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2185:10:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"2293:22:37","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2295:16:37"},"nodeType":"YulFunctionCall","src":"2295:18:37"},"nodeType":"YulExpressionStatement","src":"2295:18:37"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2236:10:37"},{"kind":"number","nodeType":"YulLiteral","src":"2248:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2233:2:37"},"nodeType":"YulFunctionCall","src":"2233:34:37"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2272:10:37"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2284:6:37"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2269:2:37"},"nodeType":"YulFunctionCall","src":"2269:22:37"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2230:2:37"},"nodeType":"YulFunctionCall","src":"2230:62:37"},"nodeType":"YulIf","src":"2227:88:37"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2331:2:37","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2335:10:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2324:6:37"},"nodeType":"YulFunctionCall","src":"2324:22:37"},"nodeType":"YulExpressionStatement","src":"2324:22:37"}]},"name":"allocate_memory_1806","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2132:6:37","type":""}],"src":"2097:255:37"},{"body":{"nodeType":"YulBlock","src":"2402:230:37","statements":[{"nodeType":"YulAssignment","src":"2412:19:37","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2428:2:37","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2422:5:37"},"nodeType":"YulFunctionCall","src":"2422:9:37"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2412:6:37"}]},{"nodeType":"YulVariableDeclaration","src":"2440:58:37","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2462:6:37"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2478:4:37"},{"kind":"number","nodeType":"YulLiteral","src":"2484:2:37","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2474:3:37"},"nodeType":"YulFunctionCall","src":"2474:13:37"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2493:2:37","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2489:3:37"},"nodeType":"YulFunctionCall","src":"2489:7:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2470:3:37"},"nodeType":"YulFunctionCall","src":"2470:27:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2458:3:37"},"nodeType":"YulFunctionCall","src":"2458:40:37"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2444:10:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"2573:22:37","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2575:16:37"},"nodeType":"YulFunctionCall","src":"2575:18:37"},"nodeType":"YulExpressionStatement","src":"2575:18:37"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2516:10:37"},{"kind":"number","nodeType":"YulLiteral","src":"2528:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2513:2:37"},"nodeType":"YulFunctionCall","src":"2513:34:37"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2552:10:37"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2564:6:37"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2549:2:37"},"nodeType":"YulFunctionCall","src":"2549:22:37"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2510:2:37"},"nodeType":"YulFunctionCall","src":"2510:62:37"},"nodeType":"YulIf","src":"2507:88:37"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2611:2:37","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2615:10:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2604:6:37"},"nodeType":"YulFunctionCall","src":"2604:22:37"},"nodeType":"YulExpressionStatement","src":"2604:22:37"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2382:4:37","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2391:6:37","type":""}],"src":"2357:275:37"},{"body":{"nodeType":"YulBlock","src":"2694:129:37","statements":[{"body":{"nodeType":"YulBlock","src":"2738:22:37","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2740:16:37"},"nodeType":"YulFunctionCall","src":"2740:18:37"},"nodeType":"YulExpressionStatement","src":"2740:18:37"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2710:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"2718:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2707:2:37"},"nodeType":"YulFunctionCall","src":"2707:30:37"},"nodeType":"YulIf","src":"2704:56:37"},{"nodeType":"YulAssignment","src":"2769:48:37","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2789:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"2797:2:37","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:37"},"nodeType":"YulFunctionCall","src":"2785:15:37"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2806:2:37","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2802:3:37"},"nodeType":"YulFunctionCall","src":"2802:7:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2781:3:37"},"nodeType":"YulFunctionCall","src":"2781:29:37"},{"kind":"number","nodeType":"YulLiteral","src":"2812:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2777:3:37"},"nodeType":"YulFunctionCall","src":"2777:40:37"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2769:4:37"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2674:6:37","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2685:4:37","type":""}],"src":"2637:186:37"},{"body":{"nodeType":"YulBlock","src":"2924:710:37","statements":[{"body":{"nodeType":"YulBlock","src":"2970:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2979:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2982:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2972:6:37"},"nodeType":"YulFunctionCall","src":"2972:12:37"},"nodeType":"YulExpressionStatement","src":"2972:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2945:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"2954:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2941:3:37"},"nodeType":"YulFunctionCall","src":"2941:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"2966:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2937:3:37"},"nodeType":"YulFunctionCall","src":"2937:32:37"},"nodeType":"YulIf","src":"2934:52:37"},{"nodeType":"YulVariableDeclaration","src":"2995:36:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3021:9:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3008:12:37"},"nodeType":"YulFunctionCall","src":"3008:23:37"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2999:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3065:5:37"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3040:24:37"},"nodeType":"YulFunctionCall","src":"3040:31:37"},"nodeType":"YulExpressionStatement","src":"3040:31:37"},{"nodeType":"YulAssignment","src":"3080:15:37","value":{"name":"value","nodeType":"YulIdentifier","src":"3090:5:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3080:6:37"}]},{"nodeType":"YulVariableDeclaration","src":"3104:46:37","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3135:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"3146:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3131:3:37"},"nodeType":"YulFunctionCall","src":"3131:18:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3118:12:37"},"nodeType":"YulFunctionCall","src":"3118:32:37"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3108:6:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"3193:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3202:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3205:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3195:6:37"},"nodeType":"YulFunctionCall","src":"3195:12:37"},"nodeType":"YulExpressionStatement","src":"3195:12:37"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3165:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"3173:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3162:2:37"},"nodeType":"YulFunctionCall","src":"3162:30:37"},"nodeType":"YulIf","src":"3159:50:37"},{"nodeType":"YulVariableDeclaration","src":"3218:32:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3232:9:37"},{"name":"offset","nodeType":"YulIdentifier","src":"3243:6:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3228:3:37"},"nodeType":"YulFunctionCall","src":"3228:22:37"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3222:2:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"3298:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3307:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3310:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3300:6:37"},"nodeType":"YulFunctionCall","src":"3300:12:37"},"nodeType":"YulExpressionStatement","src":"3300:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3277:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"3281:4:37","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3273:3:37"},"nodeType":"YulFunctionCall","src":"3273:13:37"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3288:7:37"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3269:3:37"},"nodeType":"YulFunctionCall","src":"3269:27:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3262:6:37"},"nodeType":"YulFunctionCall","src":"3262:35:37"},"nodeType":"YulIf","src":"3259:55:37"},{"nodeType":"YulVariableDeclaration","src":"3323:26:37","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3346:2:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3333:12:37"},"nodeType":"YulFunctionCall","src":"3333:16:37"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3327:2:37","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3358:61:37","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3415:2:37"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"3387:27:37"},"nodeType":"YulFunctionCall","src":"3387:31:37"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3371:15:37"},"nodeType":"YulFunctionCall","src":"3371:48:37"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"3362:5:37","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3435:5:37"},{"name":"_2","nodeType":"YulIdentifier","src":"3442:2:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3428:6:37"},"nodeType":"YulFunctionCall","src":"3428:17:37"},"nodeType":"YulExpressionStatement","src":"3428:17:37"},{"body":{"nodeType":"YulBlock","src":"3491:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3500:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3503:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3493:6:37"},"nodeType":"YulFunctionCall","src":"3493:12:37"},"nodeType":"YulExpressionStatement","src":"3493:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3468:2:37"},{"name":"_2","nodeType":"YulIdentifier","src":"3472:2:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3464:3:37"},"nodeType":"YulFunctionCall","src":"3464:11:37"},{"kind":"number","nodeType":"YulLiteral","src":"3477:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3460:3:37"},"nodeType":"YulFunctionCall","src":"3460:20:37"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3482:7:37"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3457:2:37"},"nodeType":"YulFunctionCall","src":"3457:33:37"},"nodeType":"YulIf","src":"3454:53:37"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3533:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"3540:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3529:3:37"},"nodeType":"YulFunctionCall","src":"3529:14:37"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3549:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"3553:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3545:3:37"},"nodeType":"YulFunctionCall","src":"3545:11:37"},{"name":"_2","nodeType":"YulIdentifier","src":"3558:2:37"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3516:12:37"},"nodeType":"YulFunctionCall","src":"3516:45:37"},"nodeType":"YulExpressionStatement","src":"3516:45:37"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3585:5:37"},{"name":"_2","nodeType":"YulIdentifier","src":"3592:2:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3581:3:37"},"nodeType":"YulFunctionCall","src":"3581:14:37"},{"kind":"number","nodeType":"YulLiteral","src":"3597:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3577:3:37"},"nodeType":"YulFunctionCall","src":"3577:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"3602:1:37","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3570:6:37"},"nodeType":"YulFunctionCall","src":"3570:34:37"},"nodeType":"YulExpressionStatement","src":"3570:34:37"},{"nodeType":"YulAssignment","src":"3613:15:37","value":{"name":"array","nodeType":"YulIdentifier","src":"3623:5:37"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3613:6:37"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2882:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2893:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2905:6:37","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2913:6:37","type":""}],"src":"2828:806:37"},{"body":{"nodeType":"YulBlock","src":"3726:228:37","statements":[{"body":{"nodeType":"YulBlock","src":"3772:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3781:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3784:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3774:6:37"},"nodeType":"YulFunctionCall","src":"3774:12:37"},"nodeType":"YulExpressionStatement","src":"3774:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3747:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"3756:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3743:3:37"},"nodeType":"YulFunctionCall","src":"3743:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3739:3:37"},"nodeType":"YulFunctionCall","src":"3739:32:37"},"nodeType":"YulIf","src":"3736:52:37"},{"nodeType":"YulVariableDeclaration","src":"3797:36:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3823:9:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3810:12:37"},"nodeType":"YulFunctionCall","src":"3810:23:37"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3801:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3867:5:37"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3842:24:37"},"nodeType":"YulFunctionCall","src":"3842:31:37"},"nodeType":"YulExpressionStatement","src":"3842:31:37"},{"nodeType":"YulAssignment","src":"3882:15:37","value":{"name":"value","nodeType":"YulIdentifier","src":"3892:5:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3882:6:37"}]},{"nodeType":"YulAssignment","src":"3906:42:37","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3933:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"3944:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3929:3:37"},"nodeType":"YulFunctionCall","src":"3929:18:37"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3916:12:37"},"nodeType":"YulFunctionCall","src":"3916:32:37"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3906:6:37"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3684:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3695:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3707:6:37","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3715:6:37","type":""}],"src":"3639:315:37"},{"body":{"nodeType":"YulBlock","src":"4025:184:37","statements":[{"nodeType":"YulVariableDeclaration","src":"4035:10:37","value":{"kind":"number","nodeType":"YulLiteral","src":"4044:1:37","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4039:1:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"4104:63:37","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4129:3:37"},{"name":"i","nodeType":"YulIdentifier","src":"4134:1:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4125:3:37"},"nodeType":"YulFunctionCall","src":"4125:11:37"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4148:3:37"},{"name":"i","nodeType":"YulIdentifier","src":"4153:1:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4144:3:37"},"nodeType":"YulFunctionCall","src":"4144:11:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4138:5:37"},"nodeType":"YulFunctionCall","src":"4138:18:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4118:6:37"},"nodeType":"YulFunctionCall","src":"4118:39:37"},"nodeType":"YulExpressionStatement","src":"4118:39:37"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4065:1:37"},{"name":"length","nodeType":"YulIdentifier","src":"4068:6:37"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4062:2:37"},"nodeType":"YulFunctionCall","src":"4062:13:37"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4076:19:37","statements":[{"nodeType":"YulAssignment","src":"4078:15:37","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4087:1:37"},{"kind":"number","nodeType":"YulLiteral","src":"4090:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4083:3:37"},"nodeType":"YulFunctionCall","src":"4083:10:37"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4078:1:37"}]}]},"pre":{"nodeType":"YulBlock","src":"4058:3:37","statements":[]},"src":"4054:113:37"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4187:3:37"},{"name":"length","nodeType":"YulIdentifier","src":"4192:6:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4183:3:37"},"nodeType":"YulFunctionCall","src":"4183:16:37"},{"kind":"number","nodeType":"YulLiteral","src":"4201:1:37","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4176:6:37"},"nodeType":"YulFunctionCall","src":"4176:27:37"},"nodeType":"YulExpressionStatement","src":"4176:27:37"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4003:3:37","type":""},{"name":"dst","nodeType":"YulTypedName","src":"4008:3:37","type":""},{"name":"length","nodeType":"YulTypedName","src":"4013:6:37","type":""}],"src":"3959:250:37"},{"body":{"nodeType":"YulBlock","src":"4264:221:37","statements":[{"nodeType":"YulVariableDeclaration","src":"4274:26:37","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4294:5:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4288:5:37"},"nodeType":"YulFunctionCall","src":"4288:12:37"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4278:6:37","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4316:3:37"},{"name":"length","nodeType":"YulIdentifier","src":"4321:6:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4309:6:37"},"nodeType":"YulFunctionCall","src":"4309:19:37"},"nodeType":"YulExpressionStatement","src":"4309:19:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4376:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"4383:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:37"},"nodeType":"YulFunctionCall","src":"4372:16:37"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4394:3:37"},{"kind":"number","nodeType":"YulLiteral","src":"4399:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4390:3:37"},"nodeType":"YulFunctionCall","src":"4390:14:37"},{"name":"length","nodeType":"YulIdentifier","src":"4406:6:37"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4337:34:37"},"nodeType":"YulFunctionCall","src":"4337:76:37"},"nodeType":"YulExpressionStatement","src":"4337:76:37"},{"nodeType":"YulAssignment","src":"4422:57:37","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4437:3:37"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4450:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"4458:2:37","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4446:3:37"},"nodeType":"YulFunctionCall","src":"4446:15:37"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4467:2:37","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4463:3:37"},"nodeType":"YulFunctionCall","src":"4463:7:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4442:3:37"},"nodeType":"YulFunctionCall","src":"4442:29:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4433:3:37"},"nodeType":"YulFunctionCall","src":"4433:39:37"},{"kind":"number","nodeType":"YulLiteral","src":"4474:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4429:3:37"},"nodeType":"YulFunctionCall","src":"4429:50:37"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4422:3:37"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4241:5:37","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4248:3:37","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4256:3:37","type":""}],"src":"4214:271:37"},{"body":{"nodeType":"YulBlock","src":"4611:99:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"4639:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4621:6:37"},"nodeType":"YulFunctionCall","src":"4621:21:37"},"nodeType":"YulExpressionStatement","src":"4621:21:37"},{"nodeType":"YulAssignment","src":"4651:53:37","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4677:6:37"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4689:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"4700:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4685:3:37"},"nodeType":"YulFunctionCall","src":"4685:18:37"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4659:17:37"},"nodeType":"YulFunctionCall","src":"4659:45:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4651:4:37"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4580:9:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4591:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4602:4:37","type":""}],"src":"4490:220:37"},{"body":{"nodeType":"YulBlock","src":"4889:172:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4906:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"4917:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4899:6:37"},"nodeType":"YulFunctionCall","src":"4899:21:37"},"nodeType":"YulExpressionStatement","src":"4899:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4940:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"4951:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4936:3:37"},"nodeType":"YulFunctionCall","src":"4936:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"4956:2:37","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4929:6:37"},"nodeType":"YulFunctionCall","src":"4929:30:37"},"nodeType":"YulExpressionStatement","src":"4929:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4979:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"4990:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4975:3:37"},"nodeType":"YulFunctionCall","src":"4975:18:37"},{"hexValue":"496e76616c6964206174746573746174696f6e204944","kind":"string","nodeType":"YulLiteral","src":"4995:24:37","type":"","value":"Invalid attestation ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4968:6:37"},"nodeType":"YulFunctionCall","src":"4968:52:37"},"nodeType":"YulExpressionStatement","src":"4968:52:37"},{"nodeType":"YulAssignment","src":"5029:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5041:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"5052:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5037:3:37"},"nodeType":"YulFunctionCall","src":"5037:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5029:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_be89daa06189757200215a4c2511aa872de4325ebdb77df3a283e69ff63e623f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4866:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4880:4:37","type":""}],"src":"4715:346:37"},{"body":{"nodeType":"YulBlock","src":"5125:116:37","statements":[{"nodeType":"YulAssignment","src":"5135:22:37","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5150:6:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5144:5:37"},"nodeType":"YulFunctionCall","src":"5144:13:37"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5135:5:37"}]},{"body":{"nodeType":"YulBlock","src":"5219:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5228:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5231:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5221:6:37"},"nodeType":"YulFunctionCall","src":"5221:12:37"},"nodeType":"YulExpressionStatement","src":"5221:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5179:5:37"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5190:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"5197:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5186:3:37"},"nodeType":"YulFunctionCall","src":"5186:30:37"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5176:2:37"},"nodeType":"YulFunctionCall","src":"5176:41:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5169:6:37"},"nodeType":"YulFunctionCall","src":"5169:49:37"},"nodeType":"YulIf","src":"5166:69:37"}]},"name":"abi_decode_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5104:6:37","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5115:5:37","type":""}],"src":"5066:175:37"},{"body":{"nodeType":"YulBlock","src":"5306:78:37","statements":[{"nodeType":"YulAssignment","src":"5316:22:37","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5331:6:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5325:5:37"},"nodeType":"YulFunctionCall","src":"5325:13:37"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5316:5:37"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5372:5:37"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5347:24:37"},"nodeType":"YulFunctionCall","src":"5347:31:37"},"nodeType":"YulExpressionStatement","src":"5347:31:37"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5285:6:37","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5296:5:37","type":""}],"src":"5246:138:37"},{"body":{"nodeType":"YulBlock","src":"5446:107:37","statements":[{"nodeType":"YulAssignment","src":"5456:22:37","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5471:6:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5465:5:37"},"nodeType":"YulFunctionCall","src":"5465:13:37"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5456:5:37"}]},{"body":{"nodeType":"YulBlock","src":"5531:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5540:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5543:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5533:6:37"},"nodeType":"YulFunctionCall","src":"5533:12:37"},"nodeType":"YulExpressionStatement","src":"5533:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5500:5:37"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5521:5:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5514:6:37"},"nodeType":"YulFunctionCall","src":"5514:13:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5507:6:37"},"nodeType":"YulFunctionCall","src":"5507:21:37"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5497:2:37"},"nodeType":"YulFunctionCall","src":"5497:32:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5490:6:37"},"nodeType":"YulFunctionCall","src":"5490:40:37"},"nodeType":"YulIf","src":"5487:60:37"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5425:6:37","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5436:5:37","type":""}],"src":"5389:164:37"},{"body":{"nodeType":"YulBlock","src":"5621:378:37","statements":[{"body":{"nodeType":"YulBlock","src":"5670:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5679:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5682:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5672:6:37"},"nodeType":"YulFunctionCall","src":"5672:12:37"},"nodeType":"YulExpressionStatement","src":"5672:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5649:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"5657:4:37","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5645:3:37"},"nodeType":"YulFunctionCall","src":"5645:17:37"},{"name":"end","nodeType":"YulIdentifier","src":"5664:3:37"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5641:3:37"},"nodeType":"YulFunctionCall","src":"5641:27:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5634:6:37"},"nodeType":"YulFunctionCall","src":"5634:35:37"},"nodeType":"YulIf","src":"5631:55:37"},{"nodeType":"YulVariableDeclaration","src":"5695:23:37","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5711:6:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5705:5:37"},"nodeType":"YulFunctionCall","src":"5705:13:37"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5699:2:37","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5727:63:37","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5786:2:37"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"5758:27:37"},"nodeType":"YulFunctionCall","src":"5758:31:37"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"5742:15:37"},"nodeType":"YulFunctionCall","src":"5742:48:37"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"5731:7:37","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"5806:7:37"},{"name":"_1","nodeType":"YulIdentifier","src":"5815:2:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5799:6:37"},"nodeType":"YulFunctionCall","src":"5799:19:37"},"nodeType":"YulExpressionStatement","src":"5799:19:37"},{"body":{"nodeType":"YulBlock","src":"5866:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5875:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5878:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5868:6:37"},"nodeType":"YulFunctionCall","src":"5868:12:37"},"nodeType":"YulExpressionStatement","src":"5868:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5841:6:37"},{"name":"_1","nodeType":"YulIdentifier","src":"5849:2:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5837:3:37"},"nodeType":"YulFunctionCall","src":"5837:15:37"},{"kind":"number","nodeType":"YulLiteral","src":"5854:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5833:3:37"},"nodeType":"YulFunctionCall","src":"5833:26:37"},{"name":"end","nodeType":"YulIdentifier","src":"5861:3:37"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5830:2:37"},"nodeType":"YulFunctionCall","src":"5830:35:37"},"nodeType":"YulIf","src":"5827:55:37"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5930:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"5938:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5926:3:37"},"nodeType":"YulFunctionCall","src":"5926:17:37"},{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"5949:7:37"},{"kind":"number","nodeType":"YulLiteral","src":"5958:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5945:3:37"},"nodeType":"YulFunctionCall","src":"5945:18:37"},{"name":"_1","nodeType":"YulIdentifier","src":"5965:2:37"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5891:34:37"},"nodeType":"YulFunctionCall","src":"5891:77:37"},"nodeType":"YulExpressionStatement","src":"5891:77:37"},{"nodeType":"YulAssignment","src":"5977:16:37","value":{"name":"array_1","nodeType":"YulIdentifier","src":"5986:7:37"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5977:5:37"}]}]},"name":"abi_decode_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5595:6:37","type":""},{"name":"end","nodeType":"YulTypedName","src":"5603:3:37","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5611:5:37","type":""}],"src":"5558:441:37"},{"body":{"nodeType":"YulBlock","src":"6113:1161:37","statements":[{"body":{"nodeType":"YulBlock","src":"6159:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6168:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6171:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6161:6:37"},"nodeType":"YulFunctionCall","src":"6161:12:37"},"nodeType":"YulExpressionStatement","src":"6161:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6134:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"6143:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6130:3:37"},"nodeType":"YulFunctionCall","src":"6130:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"6155:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6126:3:37"},"nodeType":"YulFunctionCall","src":"6126:32:37"},"nodeType":"YulIf","src":"6123:52:37"},{"nodeType":"YulVariableDeclaration","src":"6184:30:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6204:9:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6198:5:37"},"nodeType":"YulFunctionCall","src":"6198:16:37"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6188:6:37","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6223:28:37","value":{"kind":"number","nodeType":"YulLiteral","src":"6233:18:37","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6227:2:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"6278:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6287:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6290:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6280:6:37"},"nodeType":"YulFunctionCall","src":"6280:12:37"},"nodeType":"YulExpressionStatement","src":"6280:12:37"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6266:6:37"},{"name":"_1","nodeType":"YulIdentifier","src":"6274:2:37"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6263:2:37"},"nodeType":"YulFunctionCall","src":"6263:14:37"},"nodeType":"YulIf","src":"6260:34:37"},{"nodeType":"YulVariableDeclaration","src":"6303:32:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6317:9:37"},{"name":"offset","nodeType":"YulIdentifier","src":"6328:6:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6313:3:37"},"nodeType":"YulFunctionCall","src":"6313:22:37"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6307:2:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"6377:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6386:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6389:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6379:6:37"},"nodeType":"YulFunctionCall","src":"6379:12:37"},"nodeType":"YulExpressionStatement","src":"6379:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6355:7:37"},{"name":"_2","nodeType":"YulIdentifier","src":"6364:2:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6351:3:37"},"nodeType":"YulFunctionCall","src":"6351:16:37"},{"kind":"number","nodeType":"YulLiteral","src":"6369:6:37","type":"","value":"0x0140"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6347:3:37"},"nodeType":"YulFunctionCall","src":"6347:29:37"},"nodeType":"YulIf","src":"6344:49:37"},{"nodeType":"YulVariableDeclaration","src":"6402:35:37","value":{"arguments":[],"functionName":{"name":"allocate_memory_1806","nodeType":"YulIdentifier","src":"6415:20:37"},"nodeType":"YulFunctionCall","src":"6415:22:37"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6406:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6453:5:37"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6466:2:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6460:5:37"},"nodeType":"YulFunctionCall","src":"6460:9:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6446:6:37"},"nodeType":"YulFunctionCall","src":"6446:24:37"},"nodeType":"YulExpressionStatement","src":"6446:24:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6490:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"6497:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6486:3:37"},"nodeType":"YulFunctionCall","src":"6486:14:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6512:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"6516:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6508:3:37"},"nodeType":"YulFunctionCall","src":"6508:11:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6502:5:37"},"nodeType":"YulFunctionCall","src":"6502:18:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6479:6:37"},"nodeType":"YulFunctionCall","src":"6479:42:37"},"nodeType":"YulExpressionStatement","src":"6479:42:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6541:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"6548:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6537:3:37"},"nodeType":"YulFunctionCall","src":"6537:14:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6586:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"6590:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6582:3:37"},"nodeType":"YulFunctionCall","src":"6582:11:37"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"6553:28:37"},"nodeType":"YulFunctionCall","src":"6553:41:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6530:6:37"},"nodeType":"YulFunctionCall","src":"6530:65:37"},"nodeType":"YulExpressionStatement","src":"6530:65:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6615:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"6622:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6611:3:37"},"nodeType":"YulFunctionCall","src":"6611:14:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6660:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"6664:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6656:3:37"},"nodeType":"YulFunctionCall","src":"6656:11:37"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"6627:28:37"},"nodeType":"YulFunctionCall","src":"6627:41:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6604:6:37"},"nodeType":"YulFunctionCall","src":"6604:65:37"},"nodeType":"YulExpressionStatement","src":"6604:65:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6689:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"6696:3:37","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6685:3:37"},"nodeType":"YulFunctionCall","src":"6685:15:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6735:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"6739:3:37","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:37"},"nodeType":"YulFunctionCall","src":"6731:12:37"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"6702:28:37"},"nodeType":"YulFunctionCall","src":"6702:42:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6678:6:37"},"nodeType":"YulFunctionCall","src":"6678:67:37"},"nodeType":"YulExpressionStatement","src":"6678:67:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6765:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"6772:3:37","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6761:3:37"},"nodeType":"YulFunctionCall","src":"6761:15:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6788:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"6792:3:37","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6784:3:37"},"nodeType":"YulFunctionCall","src":"6784:12:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6778:5:37"},"nodeType":"YulFunctionCall","src":"6778:19:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6754:6:37"},"nodeType":"YulFunctionCall","src":"6754:44:37"},"nodeType":"YulExpressionStatement","src":"6754:44:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6818:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"6825:3:37","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6814:3:37"},"nodeType":"YulFunctionCall","src":"6814:15:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6865:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"6869:3:37","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6861:3:37"},"nodeType":"YulFunctionCall","src":"6861:12:37"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"6831:29:37"},"nodeType":"YulFunctionCall","src":"6831:43:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6807:6:37"},"nodeType":"YulFunctionCall","src":"6807:68:37"},"nodeType":"YulExpressionStatement","src":"6807:68:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6895:5:37"},{"kind":"number","nodeType":"YulLiteral","src":"6902:3:37","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6891:3:37"},"nodeType":"YulFunctionCall","src":"6891:15:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6942:2:37"},{"kind":"number","nodeType":"YulLiteral","src":"6946:3:37","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6938:3:37"},"nodeType":"YulFunctionCall","src":"6938:12:37"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"6908:29:37"},"nodeType":"YulFunctionCall","src":"6908:43:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6884:6:37"},"nodeType":"YulFunctionCall","src":"6884:68:37"},"nodeType":"YulExpressionStatement","src":"6884:68:37"},{"nodeType":"YulVariableDeclaration","src":"6961:13:37","value":{"kind":"number","nodeType":"YulLiteral","src":"6971:3:37","type":"","value":"256"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"6965:2:37","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6994:5:37"},{"name":"_3","nodeType":"YulIdentifier","src":"7001:2:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6990:3:37"},"nodeType":"YulFunctionCall","src":"6990:14:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7037:2:37"},{"name":"_3","nodeType":"YulIdentifier","src":"7041:2:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:37"},"nodeType":"YulFunctionCall","src":"7033:11:37"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"7006:26:37"},"nodeType":"YulFunctionCall","src":"7006:39:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6983:6:37"},"nodeType":"YulFunctionCall","src":"6983:63:37"},"nodeType":"YulExpressionStatement","src":"6983:63:37"},{"nodeType":"YulVariableDeclaration","src":"7055:13:37","value":{"kind":"number","nodeType":"YulLiteral","src":"7065:3:37","type":"","value":"288"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"7059:2:37","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7077:34:37","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7103:2:37"},{"name":"_4","nodeType":"YulIdentifier","src":"7107:2:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7099:3:37"},"nodeType":"YulFunctionCall","src":"7099:11:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7093:5:37"},"nodeType":"YulFunctionCall","src":"7093:18:37"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"7081:8:37","type":""}]},{"body":{"nodeType":"YulBlock","src":"7140:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7149:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7152:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7142:6:37"},"nodeType":"YulFunctionCall","src":"7142:12:37"},"nodeType":"YulExpressionStatement","src":"7142:12:37"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"7126:8:37"},{"name":"_1","nodeType":"YulIdentifier","src":"7136:2:37"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7123:2:37"},"nodeType":"YulFunctionCall","src":"7123:16:37"},"nodeType":"YulIf","src":"7120:36:37"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7176:5:37"},{"name":"_4","nodeType":"YulIdentifier","src":"7183:2:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7172:3:37"},"nodeType":"YulFunctionCall","src":"7172:14:37"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7220:2:37"},{"name":"offset_1","nodeType":"YulIdentifier","src":"7224:8:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7216:3:37"},"nodeType":"YulFunctionCall","src":"7216:17:37"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7235:7:37"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"7188:27:37"},"nodeType":"YulFunctionCall","src":"7188:55:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7165:6:37"},"nodeType":"YulFunctionCall","src":"7165:79:37"},"nodeType":"YulExpressionStatement","src":"7165:79:37"},{"nodeType":"YulAssignment","src":"7253:15:37","value":{"name":"value","nodeType":"YulIdentifier","src":"7263:5:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7253:6:37"}]}]},"name":"abi_decode_tuple_t_struct$_Attestation_$608_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6079:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6090:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6102:6:37","type":""}],"src":"6004:1270:37"},{"body":{"nodeType":"YulBlock","src":"7453:165:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7470:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"7481:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7463:6:37"},"nodeType":"YulFunctionCall","src":"7463:21:37"},"nodeType":"YulExpressionStatement","src":"7463:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7504:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"7515:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7500:3:37"},"nodeType":"YulFunctionCall","src":"7500:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"7520:2:37","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7493:6:37"},"nodeType":"YulFunctionCall","src":"7493:30:37"},"nodeType":"YulExpressionStatement","src":"7493:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7543:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"7554:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7539:3:37"},"nodeType":"YulFunctionCall","src":"7539:18:37"},{"hexValue":"496e76616c69642061646472657373","kind":"string","nodeType":"YulLiteral","src":"7559:17:37","type":"","value":"Invalid address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7532:6:37"},"nodeType":"YulFunctionCall","src":"7532:45:37"},"nodeType":"YulExpressionStatement","src":"7532:45:37"},{"nodeType":"YulAssignment","src":"7586:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7598:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"7609:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7594:3:37"},"nodeType":"YulFunctionCall","src":"7594:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7586:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7430:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7444:4:37","type":""}],"src":"7279:339:37"},{"body":{"nodeType":"YulBlock","src":"7731:101:37","statements":[{"nodeType":"YulAssignment","src":"7741:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7753:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"7764:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7749:3:37"},"nodeType":"YulFunctionCall","src":"7749:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7741:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7783:9:37"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7798:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"7806:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7794:3:37"},"nodeType":"YulFunctionCall","src":"7794:31:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7776:6:37"},"nodeType":"YulFunctionCall","src":"7776:50:37"},"nodeType":"YulExpressionStatement","src":"7776:50:37"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7700:9:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7711:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7722:4:37","type":""}],"src":"7623:209:37"},{"body":{"nodeType":"YulBlock","src":"8011:227:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8028:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8039:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8021:6:37"},"nodeType":"YulFunctionCall","src":"8021:21:37"},"nodeType":"YulExpressionStatement","src":"8021:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8062:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8073:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8058:3:37"},"nodeType":"YulFunctionCall","src":"8058:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"8078:2:37","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8051:6:37"},"nodeType":"YulFunctionCall","src":"8051:30:37"},"nodeType":"YulExpressionStatement","src":"8051:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8101:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8112:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8097:3:37"},"nodeType":"YulFunctionCall","src":"8097:18:37"},{"hexValue":"4e6f7420617574686f72697a656420746f206372656174652061747465737461","kind":"string","nodeType":"YulLiteral","src":"8117:34:37","type":"","value":"Not authorized to create attesta"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8090:6:37"},"nodeType":"YulFunctionCall","src":"8090:62:37"},"nodeType":"YulExpressionStatement","src":"8090:62:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8172:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8183:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8168:3:37"},"nodeType":"YulFunctionCall","src":"8168:18:37"},{"hexValue":"74696f6e73","kind":"string","nodeType":"YulLiteral","src":"8188:7:37","type":"","value":"tions"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8161:6:37"},"nodeType":"YulFunctionCall","src":"8161:35:37"},"nodeType":"YulExpressionStatement","src":"8161:35:37"},{"nodeType":"YulAssignment","src":"8205:27:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8217:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8228:3:37","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8213:3:37"},"nodeType":"YulFunctionCall","src":"8213:19:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8205:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_99cc956d7924542614737dd71154e80a10f9ecd188c70fa99b2ffc8dde91e9c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7988:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8002:4:37","type":""}],"src":"7837:401:37"},{"body":{"nodeType":"YulBlock","src":"8417:168:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8434:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8445:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8427:6:37"},"nodeType":"YulFunctionCall","src":"8427:21:37"},"nodeType":"YulExpressionStatement","src":"8427:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8468:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8479:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8464:3:37"},"nodeType":"YulFunctionCall","src":"8464:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"8484:2:37","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8457:6:37"},"nodeType":"YulFunctionCall","src":"8457:30:37"},"nodeType":"YulExpressionStatement","src":"8457:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8507:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8518:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8503:3:37"},"nodeType":"YulFunctionCall","src":"8503:18:37"},{"hexValue":"536368656d61206e6f742063726561746564","kind":"string","nodeType":"YulLiteral","src":"8523:20:37","type":"","value":"Schema not created"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8496:6:37"},"nodeType":"YulFunctionCall","src":"8496:48:37"},"nodeType":"YulExpressionStatement","src":"8496:48:37"},{"nodeType":"YulAssignment","src":"8553:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8565:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8576:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8561:3:37"},"nodeType":"YulFunctionCall","src":"8561:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8553:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_a7590e47e33f92b1ed6dc67c39e9be7a8f7016e52755f75e79272ee5abf05ab9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8394:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8408:4:37","type":""}],"src":"8243:342:37"},{"body":{"nodeType":"YulBlock","src":"8764:167:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8781:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8792:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8774:6:37"},"nodeType":"YulFunctionCall","src":"8774:21:37"},"nodeType":"YulExpressionStatement","src":"8774:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8815:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8826:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8811:3:37"},"nodeType":"YulFunctionCall","src":"8811:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"8831:2:37","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8804:6:37"},"nodeType":"YulFunctionCall","src":"8804:30:37"},"nodeType":"YulExpressionStatement","src":"8804:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8854:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8865:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8850:3:37"},"nodeType":"YulFunctionCall","src":"8850:18:37"},{"hexValue":"496e76616c696420726563697069656e74","kind":"string","nodeType":"YulLiteral","src":"8870:19:37","type":"","value":"Invalid recipient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8843:6:37"},"nodeType":"YulFunctionCall","src":"8843:47:37"},"nodeType":"YulExpressionStatement","src":"8843:47:37"},{"nodeType":"YulAssignment","src":"8899:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8911:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"8922:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8907:3:37"},"nodeType":"YulFunctionCall","src":"8907:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8899:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8741:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8755:4:37","type":""}],"src":"8590:341:37"},{"body":{"nodeType":"YulBlock","src":"9110:166:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9127:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9138:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9120:6:37"},"nodeType":"YulFunctionCall","src":"9120:21:37"},"nodeType":"YulExpressionStatement","src":"9120:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9161:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9172:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9157:3:37"},"nodeType":"YulFunctionCall","src":"9157:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"9177:2:37","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9150:6:37"},"nodeType":"YulFunctionCall","src":"9150:30:37"},"nodeType":"YulExpressionStatement","src":"9150:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9200:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9211:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9196:3:37"},"nodeType":"YulFunctionCall","src":"9196:18:37"},{"hexValue":"496e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"9216:18:37","type":"","value":"Invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9189:6:37"},"nodeType":"YulFunctionCall","src":"9189:46:37"},"nodeType":"YulExpressionStatement","src":"9189:46:37"},{"nodeType":"YulAssignment","src":"9244:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9256:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9267:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9252:3:37"},"nodeType":"YulFunctionCall","src":"9252:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9244:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9087:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9101:4:37","type":""}],"src":"8936:340:37"},{"body":{"nodeType":"YulBlock","src":"9466:262:37","statements":[{"nodeType":"YulAssignment","src":"9476:27:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9488:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9499:3:37","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9484:3:37"},"nodeType":"YulFunctionCall","src":"9484:19:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9476:4:37"}]},{"nodeType":"YulVariableDeclaration","src":"9512:29:37","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9530:3:37","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9535:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9526:3:37"},"nodeType":"YulFunctionCall","src":"9526:11:37"},{"kind":"number","nodeType":"YulLiteral","src":"9539:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9522:3:37"},"nodeType":"YulFunctionCall","src":"9522:19:37"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9516:2:37","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9557:9:37"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9572:6:37"},{"name":"_1","nodeType":"YulIdentifier","src":"9580:2:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9568:3:37"},"nodeType":"YulFunctionCall","src":"9568:15:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9550:6:37"},"nodeType":"YulFunctionCall","src":"9550:34:37"},"nodeType":"YulExpressionStatement","src":"9550:34:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9604:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9615:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9600:3:37"},"nodeType":"YulFunctionCall","src":"9600:18:37"},{"name":"value1","nodeType":"YulIdentifier","src":"9620:6:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9593:6:37"},"nodeType":"YulFunctionCall","src":"9593:34:37"},"nodeType":"YulExpressionStatement","src":"9593:34:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9647:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9658:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9643:3:37"},"nodeType":"YulFunctionCall","src":"9643:18:37"},{"name":"value2","nodeType":"YulIdentifier","src":"9663:6:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9636:6:37"},"nodeType":"YulFunctionCall","src":"9636:34:37"},"nodeType":"YulExpressionStatement","src":"9636:34:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9690:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9701:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9686:3:37"},"nodeType":"YulFunctionCall","src":"9686:18:37"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"9710:6:37"},{"name":"_1","nodeType":"YulIdentifier","src":"9718:2:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9706:3:37"},"nodeType":"YulFunctionCall","src":"9706:15:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9679:6:37"},"nodeType":"YulFunctionCall","src":"9679:43:37"},"nodeType":"YulExpressionStatement","src":"9679:43:37"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9411:9:37","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9422:6:37","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9430:6:37","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9438:6:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9446:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9457:4:37","type":""}],"src":"9281:447:37"},{"body":{"nodeType":"YulBlock","src":"9904:774:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9921:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9932:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9914:6:37"},"nodeType":"YulFunctionCall","src":"9914:21:37"},"nodeType":"YulExpressionStatement","src":"9914:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9955:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"9966:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9951:3:37"},"nodeType":"YulFunctionCall","src":"9951:18:37"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9977:6:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9971:5:37"},"nodeType":"YulFunctionCall","src":"9971:13:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9944:6:37"},"nodeType":"YulFunctionCall","src":"9944:41:37"},"nodeType":"YulExpressionStatement","src":"9944:41:37"},{"nodeType":"YulVariableDeclaration","src":"9994:42:37","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10024:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"10032:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10020:3:37"},"nodeType":"YulFunctionCall","src":"10020:15:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10014:5:37"},"nodeType":"YulFunctionCall","src":"10014:22:37"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"9998:12:37","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10056:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10067:4:37","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10052:3:37"},"nodeType":"YulFunctionCall","src":"10052:20:37"},{"kind":"number","nodeType":"YulLiteral","src":"10074:4:37","type":"","value":"0x40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10045:6:37"},"nodeType":"YulFunctionCall","src":"10045:34:37"},"nodeType":"YulExpressionStatement","src":"10045:34:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10099:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10110:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10095:3:37"},"nodeType":"YulFunctionCall","src":"10095:18:37"},{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10125:12:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10119:5:37"},"nodeType":"YulFunctionCall","src":"10119:19:37"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10148:3:37","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10153:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10144:3:37"},"nodeType":"YulFunctionCall","src":"10144:11:37"},{"kind":"number","nodeType":"YulLiteral","src":"10157:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10140:3:37"},"nodeType":"YulFunctionCall","src":"10140:19:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10115:3:37"},"nodeType":"YulFunctionCall","src":"10115:45:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10088:6:37"},"nodeType":"YulFunctionCall","src":"10088:73:37"},"nodeType":"YulExpressionStatement","src":"10088:73:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10181:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10192:3:37","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10177:3:37"},"nodeType":"YulFunctionCall","src":"10177:19:37"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10212:12:37"},{"kind":"number","nodeType":"YulLiteral","src":"10226:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10208:3:37"},"nodeType":"YulFunctionCall","src":"10208:21:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10202:5:37"},"nodeType":"YulFunctionCall","src":"10202:28:37"},{"kind":"number","nodeType":"YulLiteral","src":"10232:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10198:3:37"},"nodeType":"YulFunctionCall","src":"10198:53:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10170:6:37"},"nodeType":"YulFunctionCall","src":"10170:82:37"},"nodeType":"YulExpressionStatement","src":"10170:82:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10272:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10283:3:37","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10268:3:37"},"nodeType":"YulFunctionCall","src":"10268:19:37"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10313:12:37"},{"kind":"number","nodeType":"YulLiteral","src":"10327:4:37","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10309:3:37"},"nodeType":"YulFunctionCall","src":"10309:23:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10303:5:37"},"nodeType":"YulFunctionCall","src":"10303:30:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10296:6:37"},"nodeType":"YulFunctionCall","src":"10296:38:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10289:6:37"},"nodeType":"YulFunctionCall","src":"10289:46:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10261:6:37"},"nodeType":"YulFunctionCall","src":"10261:75:37"},"nodeType":"YulExpressionStatement","src":"10261:75:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10356:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10367:4:37","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10352:3:37"},"nodeType":"YulFunctionCall","src":"10352:20:37"},{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10384:12:37"},{"kind":"number","nodeType":"YulLiteral","src":"10398:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10380:3:37"},"nodeType":"YulFunctionCall","src":"10380:21:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10374:5:37"},"nodeType":"YulFunctionCall","src":"10374:28:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10345:6:37"},"nodeType":"YulFunctionCall","src":"10345:58:37"},"nodeType":"YulExpressionStatement","src":"10345:58:37"},{"nodeType":"YulVariableDeclaration","src":"10412:51:37","value":{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10444:12:37"},{"kind":"number","nodeType":"YulLiteral","src":"10458:3:37","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10440:3:37"},"nodeType":"YulFunctionCall","src":"10440:22:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10434:5:37"},"nodeType":"YulFunctionCall","src":"10434:29:37"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"10416:14:37","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10483:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10494:3:37","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10479:3:37"},"nodeType":"YulFunctionCall","src":"10479:19:37"},{"kind":"number","nodeType":"YulLiteral","src":"10500:4:37","type":"","value":"0xc0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10472:6:37"},"nodeType":"YulFunctionCall","src":"10472:33:37"},"nodeType":"YulExpressionStatement","src":"10472:33:37"},{"nodeType":"YulVariableDeclaration","src":"10514:68:37","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"10546:14:37"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10566:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10577:3:37","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10562:3:37"},"nodeType":"YulFunctionCall","src":"10562:19:37"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10528:17:37"},"nodeType":"YulFunctionCall","src":"10528:54:37"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"10518:6:37","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10602:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"10613:3:37","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10598:3:37"},"nodeType":"YulFunctionCall","src":"10598:19:37"},{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10629:12:37"},{"kind":"number","nodeType":"YulLiteral","src":"10643:3:37","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10625:3:37"},"nodeType":"YulFunctionCall","src":"10625:22:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10619:5:37"},"nodeType":"YulFunctionCall","src":"10619:29:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10591:6:37"},"nodeType":"YulFunctionCall","src":"10591:58:37"},"nodeType":"YulExpressionStatement","src":"10591:58:37"},{"nodeType":"YulAssignment","src":"10658:14:37","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"10666:6:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10658:4:37"}]}]},"name":"abi_encode_tuple_t_struct$_AttestationRequest_$654_memory_ptr__to_t_struct$_AttestationRequest_$654_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9873:9:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9884:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9895:4:37","type":""}],"src":"9733:945:37"},{"body":{"nodeType":"YulBlock","src":"10764:103:37","statements":[{"body":{"nodeType":"YulBlock","src":"10810:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10819:1:37","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10822:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10812:6:37"},"nodeType":"YulFunctionCall","src":"10812:12:37"},"nodeType":"YulExpressionStatement","src":"10812:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10785:7:37"},{"name":"headStart","nodeType":"YulIdentifier","src":"10794:9:37"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10781:3:37"},"nodeType":"YulFunctionCall","src":"10781:23:37"},{"kind":"number","nodeType":"YulLiteral","src":"10806:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10777:3:37"},"nodeType":"YulFunctionCall","src":"10777:32:37"},"nodeType":"YulIf","src":"10774:52:37"},{"nodeType":"YulAssignment","src":"10835:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10851:9:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10845:5:37"},"nodeType":"YulFunctionCall","src":"10845:16:37"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10835:6:37"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10730:9:37","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10741:7:37","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10753:6:37","type":""}],"src":"10683:184:37"},{"body":{"nodeType":"YulBlock","src":"11046:238:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11063:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11074:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11056:6:37"},"nodeType":"YulFunctionCall","src":"11056:21:37"},"nodeType":"YulExpressionStatement","src":"11056:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11097:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11108:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11093:3:37"},"nodeType":"YulFunctionCall","src":"11093:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"11113:2:37","type":"","value":"48"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11086:6:37"},"nodeType":"YulFunctionCall","src":"11086:30:37"},"nodeType":"YulExpressionStatement","src":"11086:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11136:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11147:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11132:3:37"},"nodeType":"YulFunctionCall","src":"11132:18:37"},{"hexValue":"43616e6e6f74207265766f6b6520726f6c652066726f6d206d61696e20617474","kind":"string","nodeType":"YulLiteral","src":"11152:34:37","type":"","value":"Cannot revoke role from main att"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11125:6:37"},"nodeType":"YulFunctionCall","src":"11125:62:37"},"nodeType":"YulExpressionStatement","src":"11125:62:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11207:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11218:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11203:3:37"},"nodeType":"YulFunctionCall","src":"11203:18:37"},{"hexValue":"6573746174696f6e2063726561746f72","kind":"string","nodeType":"YulLiteral","src":"11223:18:37","type":"","value":"estation creator"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11196:6:37"},"nodeType":"YulFunctionCall","src":"11196:46:37"},"nodeType":"YulExpressionStatement","src":"11196:46:37"},{"nodeType":"YulAssignment","src":"11251:27:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11263:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11274:3:37","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11259:3:37"},"nodeType":"YulFunctionCall","src":"11259:19:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11251:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_b3ae426922f694fceb367a45d8bec40e467d2d775ec5cdb3e494c7a88dcc5de6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11023:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11037:4:37","type":""}],"src":"10872:412:37"},{"body":{"nodeType":"YulBlock","src":"11463:172:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11480:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11491:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11473:6:37"},"nodeType":"YulFunctionCall","src":"11473:21:37"},"nodeType":"YulExpressionStatement","src":"11473:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11514:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11525:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11510:3:37"},"nodeType":"YulFunctionCall","src":"11510:18:37"},{"kind":"number","nodeType":"YulLiteral","src":"11530:2:37","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11503:6:37"},"nodeType":"YulFunctionCall","src":"11503:30:37"},"nodeType":"YulExpressionStatement","src":"11503:30:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11553:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11564:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11549:3:37"},"nodeType":"YulFunctionCall","src":"11549:18:37"},{"hexValue":"536368656d6120616c72656164792063726561746564","kind":"string","nodeType":"YulLiteral","src":"11569:24:37","type":"","value":"Schema already created"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11542:6:37"},"nodeType":"YulFunctionCall","src":"11542:52:37"},"nodeType":"YulExpressionStatement","src":"11542:52:37"},{"nodeType":"YulAssignment","src":"11603:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11615:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11626:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11611:3:37"},"nodeType":"YulFunctionCall","src":"11611:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11603:4:37"}]}]},"name":"abi_encode_tuple_t_stringliteral_320bc07c8178160cb86581a0aa13b126e49a06b2a074c60803ef78499b8b2de0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11440:9:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11454:4:37","type":""}],"src":"11289:346:37"},{"body":{"nodeType":"YulBlock","src":"11835:227:37","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11852:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11863:2:37","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11845:6:37"},"nodeType":"YulFunctionCall","src":"11845:21:37"},"nodeType":"YulExpressionStatement","src":"11845:21:37"},{"nodeType":"YulAssignment","src":"11875:53:37","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11901:6:37"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11913:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11924:2:37","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11909:3:37"},"nodeType":"YulFunctionCall","src":"11909:18:37"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11883:17:37"},"nodeType":"YulFunctionCall","src":"11883:45:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11875:4:37"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11948:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"11959:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11944:3:37"},"nodeType":"YulFunctionCall","src":"11944:18:37"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11968:6:37"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11984:3:37","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11989:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11980:3:37"},"nodeType":"YulFunctionCall","src":"11980:11:37"},{"kind":"number","nodeType":"YulLiteral","src":"11993:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11976:3:37"},"nodeType":"YulFunctionCall","src":"11976:19:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11964:3:37"},"nodeType":"YulFunctionCall","src":"11964:32:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11937:6:37"},"nodeType":"YulFunctionCall","src":"11937:60:37"},"nodeType":"YulExpressionStatement","src":"11937:60:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12017:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"12028:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12013:3:37"},"nodeType":"YulFunctionCall","src":"12013:18:37"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12047:6:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12040:6:37"},"nodeType":"YulFunctionCall","src":"12040:14:37"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12033:6:37"},"nodeType":"YulFunctionCall","src":"12033:22:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12006:6:37"},"nodeType":"YulFunctionCall","src":"12006:50:37"},"nodeType":"YulExpressionStatement","src":"12006:50:37"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_contract$_ISchemaResolver_$1054_t_bool__to_t_string_memory_ptr_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11788:9:37","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11799:6:37","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11807:6:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11815:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11826:4:37","type":""}],"src":"11640:422:37"},{"body":{"nodeType":"YulBlock","src":"12168:102:37","statements":[{"nodeType":"YulAssignment","src":"12178:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12190:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"12201:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12186:3:37"},"nodeType":"YulFunctionCall","src":"12186:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12178:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12220:9:37"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12235:6:37"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12251:3:37","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12256:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12247:3:37"},"nodeType":"YulFunctionCall","src":"12247:11:37"},{"kind":"number","nodeType":"YulLiteral","src":"12260:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12243:3:37"},"nodeType":"YulFunctionCall","src":"12243:19:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12231:3:37"},"nodeType":"YulFunctionCall","src":"12231:32:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12213:6:37"},"nodeType":"YulFunctionCall","src":"12213:51:37"},"nodeType":"YulExpressionStatement","src":"12213:51:37"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12137:9:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12148:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12159:4:37","type":""}],"src":"12067:203:37"},{"body":{"nodeType":"YulBlock","src":"12404:145:37","statements":[{"nodeType":"YulAssignment","src":"12414:26:37","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12426:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"12437:2:37","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12422:3:37"},"nodeType":"YulFunctionCall","src":"12422:18:37"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12414:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12456:9:37"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12471:6:37"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12487:3:37","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12492:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12483:3:37"},"nodeType":"YulFunctionCall","src":"12483:11:37"},{"kind":"number","nodeType":"YulLiteral","src":"12496:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12479:3:37"},"nodeType":"YulFunctionCall","src":"12479:19:37"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12467:3:37"},"nodeType":"YulFunctionCall","src":"12467:32:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12449:6:37"},"nodeType":"YulFunctionCall","src":"12449:51:37"},"nodeType":"YulExpressionStatement","src":"12449:51:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12520:9:37"},{"kind":"number","nodeType":"YulLiteral","src":"12531:2:37","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12516:3:37"},"nodeType":"YulFunctionCall","src":"12516:18:37"},{"name":"value1","nodeType":"YulIdentifier","src":"12536:6:37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12509:6:37"},"nodeType":"YulFunctionCall","src":"12509:34:37"},"nodeType":"YulExpressionStatement","src":"12509:34:37"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12365:9:37","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12376:6:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12384:6:37","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12395:4:37","type":""}],"src":"12275:274:37"},{"body":{"nodeType":"YulBlock","src":"12691:150:37","statements":[{"nodeType":"YulVariableDeclaration","src":"12701:27:37","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12721:6:37"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12715:5:37"},"nodeType":"YulFunctionCall","src":"12715:13:37"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12705:6:37","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12776:6:37"},{"kind":"number","nodeType":"YulLiteral","src":"12784:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12772:3:37"},"nodeType":"YulFunctionCall","src":"12772:17:37"},{"name":"pos","nodeType":"YulIdentifier","src":"12791:3:37"},{"name":"length","nodeType":"YulIdentifier","src":"12796:6:37"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12737:34:37"},"nodeType":"YulFunctionCall","src":"12737:66:37"},"nodeType":"YulExpressionStatement","src":"12737:66:37"},{"nodeType":"YulAssignment","src":"12812:23:37","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12823:3:37"},{"name":"length","nodeType":"YulIdentifier","src":"12828:6:37"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12819:3:37"},"nodeType":"YulFunctionCall","src":"12819:16:37"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12812:3:37"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12667:3:37","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12672:6:37","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12683:3:37","type":""}],"src":"12554:287:37"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_1806() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0140)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := calldataload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(array, 32), add(_1, 32), _2)\n        mstore(add(add(array, _2), 32), 0)\n        value1 := array\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_be89daa06189757200215a4c2511aa872de4325ebdb77df3a283e69ff63e623f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Invalid attestation ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_uint64_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_struct$_Attestation_$608_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0140) { revert(0, 0) }\n        let value := allocate_memory_1806()\n        mstore(value, mload(_2))\n        mstore(add(value, 32), mload(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_uint64_fromMemory(add(_2, 64)))\n        mstore(add(value, 96), abi_decode_uint64_fromMemory(add(_2, 96)))\n        mstore(add(value, 128), abi_decode_uint64_fromMemory(add(_2, 128)))\n        mstore(add(value, 160), mload(add(_2, 160)))\n        mstore(add(value, 192), abi_decode_address_fromMemory(add(_2, 192)))\n        mstore(add(value, 224), abi_decode_address_fromMemory(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_bool_fromMemory(add(_2, _3)))\n        let _4 := 288\n        let offset_1 := mload(add(_2, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _4), abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Invalid address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_99cc956d7924542614737dd71154e80a10f9ecd188c70fa99b2ffc8dde91e9c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"Not authorized to create attesta\")\n        mstore(add(headStart, 96), \"tions\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a7590e47e33f92b1ed6dc67c39e9be7a8f7016e52755f75e79272ee5abf05ab9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Schema not created\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Invalid recipient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_struct$_AttestationRequest_$654_memory_ptr__to_t_struct$_AttestationRequest_$654_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), mload(value0))\n        let memberValue0 := mload(add(value0, 32))\n        mstore(add(headStart, 0x40), 0x40)\n        mstore(add(headStart, 96), and(mload(memberValue0), sub(shl(160, 1), 1)))\n        mstore(add(headStart, 128), and(mload(add(memberValue0, 32)), 0xffffffffffffffff))\n        mstore(add(headStart, 160), iszero(iszero(mload(add(memberValue0, 0x40)))))\n        mstore(add(headStart, 0xc0), mload(add(memberValue0, 96)))\n        let memberValue0_1 := mload(add(memberValue0, 128))\n        mstore(add(headStart, 224), 0xc0)\n        let tail_1 := abi_encode_string(memberValue0_1, add(headStart, 288))\n        mstore(add(headStart, 256), mload(add(memberValue0, 160)))\n        tail := tail_1\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_b3ae426922f694fceb367a45d8bec40e467d2d775ec5cdb3e494c7a88dcc5de6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"Cannot revoke role from main att\")\n        mstore(add(headStart, 96), \"estation creator\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_320bc07c8178160cb86581a0aa13b126e49a06b2a074c60803ef78499b8b2de0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Schema already created\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_contract$_ISchemaResolver_$1054_t_bool__to_t_string_memory_ptr_t_address_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        tail := abi_encode_string(value0, add(headStart, 96))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}","id":37,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1691":[{"length":32,"start":3480},{"length":32,"start":3521},{"length":32,"start":3845}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x114 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xBD462049 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0xE27FADAB EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x5956CE45 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x624B04BD EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0x677339CE EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x4A0145B6 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x8F46957 EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x1ECF2FBF EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x190 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0x119A JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F2 JUMP JUMPDEST PUSH2 0x4DC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x50C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x145 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0x550 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x219 CALLDATASIZE PUSH1 0x4 PUSH2 0x123F JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x265 CALLDATASIZE PUSH1 0x4 PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x77E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x79D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x1B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x2AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x7BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0x11F2 JUMP JUMPDEST PUSH2 0xA2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0xADD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0x1415 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH32 0xFE59EECE44EFC73D9BEC857E15B77961120D43BE620D135F2F6356BC328D55F1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x120F JUMP JUMPDEST PUSH2 0xB15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x3E1 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x125B9D985B1A5908185D1D195CDD185D1A5BDB881251 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4A6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14AD JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP DUP4 EQ DUP1 ISZERO PUSH2 0x4D5 JUMPI POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E7 DUP2 PUSH2 0xC55 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x537 DUP3 PUSH2 0x50C JUMP JUMPDEST PUSH2 0x540 DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x54A DUP4 DUP4 PUSH2 0xC62 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x579 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x583 DUP3 DUP3 PUSH2 0xD07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x5CE JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x5EB JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x5F9 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x641 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x661 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO ISZERO JUMPDEST PUSH2 0x69F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x496E76616C69642061646472657373 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH2 0x6A7 PUSH2 0xD83 JUMP JUMPDEST PUSH2 0x6AF PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR DUP4 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP2 DUP11 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH2 0x6E5 SWAP1 CALLER PUSH2 0xC62 JUMP JUMPDEST POP PUSH20 0xF0BC5CC2B4866DAAECB069430C60B24520077037 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH32 0xE25ADA2F8BC6473C574413DF8A42FC5776CB36009B41F9BA7F561ED55BB2B549 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 ISZERO PUSH2 0x775 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x786 PUSH2 0xD8D JUMP JUMPDEST PUSH2 0x78F DUP3 PUSH2 0xE32 JUMP JUMPDEST PUSH2 0x799 DUP3 DUP3 PUSH2 0xE3D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A7 PUSH2 0xEFA JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x827 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F206372656174652061747465737461 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x74696F6E73 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x14D8DA195B58481B9BDD0818DC99585D1959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x125B9D985B1A59081D1BDAD95B881251 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 ADD DUP3 MSTORE PUSH1 0x2 SLOAD DUP4 MSTORE DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 DUP5 DUP8 ADD MSTORE PUSH1 0x60 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP5 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD DUP3 SWAP1 MSTORE DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP2 SLOAD SWAP4 MLOAD PUSH4 0xF17325E7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP6 POP SWAP1 SWAP3 AND SWAP1 PUSH4 0xF17325E7 SWAP1 PUSH2 0x9A3 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E6 SWAP2 SWAP1 PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP4 SWAP1 PUSH32 0x63F86F3E95D67D75FED996A7DB68F9E7EABF0600ABBD54FCCABF34EC3B5FA4A7 SWAP1 PUSH1 0x0 SWAP1 LOG4 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA35 DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH20 0xF0BC5CC2B4866DAAECB069430C60B24520077036 NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207265766F6B6520726F6C652066726F6D206D61696E20617474 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x32B9BA30BA34B7B71031B932B0BA37B9 PUSH1 0x81 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x42B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB1E DUP3 PUSH2 0x50C JUMP JUMPDEST PUSH2 0xB27 DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x54A DUP4 DUP4 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3C DUP2 PUSH2 0xC55 JUMP JUMPDEST PUSH1 0x2 SLOAD ISZERO PUSH2 0xB85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D8DA195B5848185B1C9958591E4818DC99585D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16B0 PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC1AF44F PUSH1 0xE3 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x60D7A278 SWAP2 PUSH2 0xBDA SWAP2 DUP7 SWAP2 DUP7 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1640 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC1D SWAP2 SWAP1 PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 POP DUP2 SWAP1 PUSH32 0xED68F5AFEA10BE5233231E5D15186BF1C9C0B9F6D3A767404D90688BCCF293AF SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0xC5F DUP2 CALLER PUSH2 0xF43 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xC7D DUP5 DUP5 PUSH2 0xADD JUMP JUMPDEST PUSH2 0xCFD JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xCB3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x16F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD22 DUP5 DUP5 PUSH2 0xADD JUMP JUMPDEST ISZERO PUSH2 0xCFD JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x3E1 JUMP JUMPDEST PUSH2 0xD8B PUSH2 0xF7C JUMP JUMPDEST JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0xE14 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE08 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x799 DUP2 PUSH2 0xC55 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE97 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE94 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xEBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xEF0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST PUSH2 0x583 DUP4 DUP4 PUSH2 0xFC5 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF4D DUP3 DUP3 PUSH2 0xADD JUMP JUMPDEST PUSH2 0x799 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x42B JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFCE DUP3 PUSH2 0x101B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x1013 JUMPI PUSH2 0x583 DUP3 DUP3 PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x799 PUSH2 0x10F6 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x1051 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1690 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10D8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x10ED DUP6 DUP4 DUP4 PUSH2 0x1115 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD8B JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x112A JUMPI PUSH2 0x1125 DUP3 PUSH2 0x1171 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x1141 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x116A JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42B JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1181 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4D5 DUP2 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x11DD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x125D DUP2 PUSH2 0x11DD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x11DD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12A7 JUMPI PUSH2 0x12A7 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12D6 JUMPI PUSH2 0x12D6 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12F8 JUMPI PUSH2 0x12F8 PUSH2 0x126D JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1324 DUP2 PUSH2 0x11DD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1364 PUSH2 0x135F DUP3 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0x12AD JUMP JUMPDEST DUP2 DUP2 MSTORE DUP7 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP4 DUP4 ADD ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x13B7 DUP2 PUSH2 0x11DD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13E0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13C8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1401 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x13C5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4D5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x13E9 JUMP JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1440 DUP2 PUSH2 0x11DD JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x147F PUSH2 0x135F DUP3 PUSH2 0x12DE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A5 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x13C5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x14EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F4 PUSH2 0x1283 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x150E PUSH1 0x40 DUP5 ADD PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x151F PUSH1 0x60 DUP5 ADD PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1530 PUSH1 0x80 DUP5 ADD PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x154B PUSH1 0xC0 DUP5 ADD PUSH2 0x1445 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x155C PUSH1 0xE0 DUP5 ADD PUSH2 0x1445 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x156F DUP2 DUP6 ADD PUSH2 0x1450 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x1587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1593 DUP9 DUP3 DUP8 ADD PUSH2 0x1460 JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP1 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x160F PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0x13E9 JUMP JUMPDEST SWAP1 POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x100 DUP6 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1653 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x20 DUP4 ADD MSTORE POP SWAP1 ISZERO ISZERO PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1685 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x13C5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC6164647265737320757365 PUSH19 0x416464726573732C75696E7432353620746F6B PUSH6 0x6E49642C7569 PUSH15 0x743235362074696D657374616D702C PUSH2 0x6464 PUSH19 0x65737320617474657374657202DD7BC7DEC4DC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800A2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH2 0x65CE SWAP3 CALLDATASIZE 0xC6 DUP12 0xCD 0xD 0x2B GAS 0x4B EXTCODEHASH 0x4D 0x49 0xF 0xC1 0x25 SWAP11 0xBF 0xCB 0xAF 0xB3 MSTORE MULMOD 0xFC 0xCE 0x2E ADDMOD GASPRICE PUSH7 0x64736F6C634300 ADDMOD EQ STOP CALLER ","sourceMap":"691:3880:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3443:202:18;;;;;;;;;;-1:-1:-1;3443:202:18;;;;;:::i;:::-;;:::i;:::-;;;470:14:37;;463:22;445:41;;433:2;418:18;3443:202:18;;;;;;;;3412:336:33;;;;;;;;;;-1:-1:-1;3412:336:33;;;;;:::i;:::-;;:::i;3754:152::-;;;;;;;;;;-1:-1:-1;3754:152:33;;;;;:::i;:::-;;:::i;:::-;;4759:191:18;;;;;;;;;;-1:-1:-1;4759:191:18;;;;;:::i;:::-;;:::i;:::-;;;1216:25:37;;;1204:2;1189:18;4759:191:18;1070:177:37;5246:136:18;;;;;;;;;;-1:-1:-1;5246:136:18;;;;;:::i;:::-;;:::i;6348:245::-;;;;;;;;;;-1:-1:-1;6348:245:18;;;;;:::i;:::-;;:::i;1452:462:33:-;;;;;;;;;;-1:-1:-1;1452:462:33;;;;;:::i;:::-;;:::i;4192:144::-;;;;;;;;;;-1:-1:-1;4192:144:33;;;;;:::i;:::-;-1:-1:-1;;;;;4293:36:33;4270:4;4293:36;;;:27;:36;;;;;;;;;4192:144;4158:214:20;;;;;;:::i;:::-;;:::i;3705:134::-;;;;;;;;;;;;;:::i;4342:118:33:-;;;;;;;;;;-1:-1:-1;4429:24:33;;4342:118;;2378:1028;;;;;;;;;;-1:-1:-1;2378:1028:33;;;;;:::i;:::-;;:::i;3912:274::-;;;;;;;;;;-1:-1:-1;3912:274:33;;;;;:::i;:::-;;:::i;3732:207:18:-;;;;;;;;;;-1:-1:-1;3732:207:18;;;;;:::i;:::-;;:::i;2317:49::-;;;;;;;;;;-1:-1:-1;2317:49:18;2362:4;2317:49;;1819:58:20;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1819:58:20;;;;;;;;;;;;:::i;898:88:33:-;;;;;;;;;;;;949:37;898:88;;5662:138:18;;;;;;;;;;-1:-1:-1;5662:138:18;;;;;:::i;:::-;;:::i;1920:452:33:-;;;;;;;;;;;;;:::i;3443:202:18:-;3528:4;-1:-1:-1;;;;;;3551:47:18;;-1:-1:-1;;;3551:47:18;;:87;;-1:-1:-1;;;;;;;;;;1133:40:22;;;3602:36:18;3544:94;3443:202;-1:-1:-1;;3443:202:18:o;3412:336:33:-;3485:4;3509:13;3501:62;;;;-1:-1:-1;;;3501:62:33;;4917:2:37;3501:62:33;;;4899:21:37;4956:2;4936:18;;;4929:30;-1:-1:-1;;;4975:18:37;;;4968:52;5037:18;;3501:62:33;;;;;;;;;3573:30;3606:3;;:33;;-1:-1:-1;;;3606:33:33;;;;;1216:25:37;;;-1:-1:-1;;;;;3606:3:33;;;;:18;;1189::37;;3606:33:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3606:33:33;;;;;;;;;;;;:::i;:::-;3656:15;;3573:66;;-1:-1:-1;3656:32:33;;:85;;;;-1:-1:-1;3720:20:33;;;;-1:-1:-1;;;;;3692:49:33;;;;;:27;:49;;;;;;;;3656:85;3649:92;3412:336;-1:-1:-1;;;3412:336:33:o;3754:152::-;2362:4:18;3191:16;2362:4;3191:10;:16::i;:::-;-1:-1:-1;;;;;;3856:36:33::1;;::::0;;;:27:::1;:36;::::0;;;;:43;;-1:-1:-1;;3856:43:33::1;3895:4;3856:43;::::0;;3754:152::o;4759:191:18:-;4824:7;4919:14;;;-1:-1:-1;;;;;;;;;;;4919:14:18;;;;;:24;;;;4759:191::o;5246:136::-;5320:18;5333:4;5320:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5350:25:::1;5361:4;5367:7;5350:10;:25::i;:::-;;5246:136:::0;;;:::o;6348:245::-;-1:-1:-1;;;;;6441:34:18;;966:10:21;6441:34:18;6437:102;;6498:30;;-1:-1:-1;;;6498:30:18;;;;;;;;;;;6437:102;6549:37;6561:4;6567:18;6549:11;:37::i;:::-;;6348:245;;:::o;1452:462:33:-;8870:21:19;4302:15;;-1:-1:-1;;;4302:15:19;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:19;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:19;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:19;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:19;-1:-1:-1;;;5013:22:19;;;4979:67;-1:-1:-1;;;;;1548:18:33;::::1;::::0;;::::1;::::0;:51:::1;;-1:-1:-1::0;;;;;;1570:29:33;::::1;::::0;::::1;1548:51;1540:79;;;::::0;-1:-1:-1;;;1540:79:33;;7481:2:37;1540:79:33::1;::::0;::::1;7463:21:37::0;7520:2;7500:18;;;7493:30;-1:-1:-1;;;7539:18:37;;;7532:45;7594:18;;1540:79:33::1;7279:339:37::0;1540:79:33::1;1629:22;:20;:22::i;:::-;1661:24;:22;:24::i;:::-;1696:3;:16:::0;;-1:-1:-1;;;;;1696:16:33;;::::1;-1:-1:-1::0;;;;;;1696:16:33;;::::1;;::::0;;;1722:49;;;;::::1;::::0;;;::::1;;::::0;;1781:42:::1;::::0;1812:10:::1;1781;:42::i;:::-;-1:-1:-1::0;1058:42:33::1;1833:67;::::0;:27:::1;:67;::::0;;:74;;-1:-1:-1;;1833:74:33::1;1903:4;1833:74;::::0;;5066:101:19;;;;5100:23;;-1:-1:-1;;;;5100:23:19;;;5142:14;;-1:-1:-1;7776:50:37;;5142:14:19;;7764:2:37;7749:18;5142:14:19;;;;;;;5066:101;4092:1081;;;;;1452:462:33;;:::o;4158:214:20:-;2653:13;:11;:13::i;:::-;4273:36:::1;4291:17;4273;:36::i;:::-;4319:46;4341:17;4360:4;4319:21;:46::i;:::-;4158:214:::0;;:::o;3705:134::-;3774:7;2924:20;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;;3705:134:20;:::o;2378:1028:33:-;2531:10;2476:7;2503:39;;;:27;:39;;;;;;;;2495:89;;;;-1:-1:-1;;;2495:89:33;;8039:2:37;2495:89:33;;;8021:21:37;8078:2;8058:18;;;8051:30;8117:34;8097:18;;;8090:62;-1:-1:-1;;;8168:18:37;;;8161:35;8213:19;;2495:89:33;7837:401:37;2495:89:33;2602:24;;2594:69;;;;-1:-1:-1;;;2594:69:33;;8445:2:37;2594:69:33;;;8427:21:37;8484:2;8464:18;;;8457:30;-1:-1:-1;;;8503:18:37;;;8496:48;8561:18;;2594:69:33;8243:342:37;2594:69:33;-1:-1:-1;;;;;2681:23:33;;2673:53;;;;-1:-1:-1;;;2673:53:33;;8792:2:37;2673:53:33;;;8774:21:37;8831:2;8811:18;;;8804:30;-1:-1:-1;;;8850:18:37;;;8843:47;8907:18;;2673:53:33;8590:341:37;2673:53:33;2744:7;2755:1;2744:12;2736:41;;;;-1:-1:-1;;;2736:41:33;;9138:2:37;2736:41:33;;;9120:21:37;9177:2;9157:18;;;9150:30;-1:-1:-1;;;9196:18:37;;;9189:46;9252:18;;2736:41:33;8936:340:37;2736:41:33;2808:59;;;-1:-1:-1;;;;;9568:15:37;;2808:59:33;;;9550:34:37;9600:18;;;9593:34;;;2839:15:33;9643:18:37;;;9636:34;2856:10:33;9686:18:37;;;9679:43;2788:17:33;;9484:19:37;;2808:59:33;;;-1:-1:-1;;2808:59:33;;;;;;2914:330;;;;;2955:24;;2914:330;;2999:234;;;;;;;-1:-1:-1;;;;;2999:234:33;;;;;2878:33;2808:59;2999:234;;;;;;3124:4;2999:234;;;;;;;;;;;;;;;;;;;;;;2914:330;;;;;;3279:3;;:19;;-1:-1:-1;;;3279:19:33;;2808:59;;-1:-1:-1;2878:33:33;;3279:3;;:10;;:19;;2808:59;;3279:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3313:56;;3255:43;;-1:-1:-1;3358:10:33;;-1:-1:-1;;;;;3313:56:33;;;3255:43;;3313:56;;;;;3386:13;2378:1028;-1:-1:-1;;;;;2378:1028:33:o;3912:274::-;2362:4:18;3191:16;2362:4;3191:10;:16::i;:::-;-1:-1:-1;;;;;;;4023:49:33;::::1;::::0;4015:110:::1;;;::::0;-1:-1:-1;;;4015:110:33;;11074:2:37;4015:110:33::1;::::0;::::1;11056:21:37::0;11113:2;11093:18;;;11086:30;11152:34;11132:18;;;11125:62;-1:-1:-1;;;11203:18:37;;;11196:46;11259:19;;4015:110:33::1;10872:412:37::0;4015:110:33::1;-1:-1:-1::0;;;;;;4135:36:33::1;4174:5;4135:36:::0;;;:27:::1;:36;::::0;;;;:44;;-1:-1:-1;;4135:44:33::1;::::0;;3912:274::o;3732:207:18:-;3809:4;3901:14;;;-1:-1:-1;;;;;;;;;;;3901:14:18;;;;;;;;-1:-1:-1;;;;;3901:31:18;;;;;;;;;;;;;;;3732:207::o;5662:138::-;5737:18;5750:4;5737:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5767:26:::1;5779:4;5785:7;5767:11;:26::i;1920:452:33:-:0;2362:4:18;3191:16;2362:4;3191:10;:16::i;:::-;2017:24:33::1;::::0;:38;2009:73:::1;;;::::0;-1:-1:-1;;;2009:73:33;;11491:2:37;2009:73:33::1;::::0;::::1;11473:21:37::0;11530:2;11510:18;;;11503:30;-1:-1:-1;;;11549:18:37;;;11542:52;11611:18;;2009:73:33::1;11289:346:37::0;2009:73:33::1;2092:20;:95;;;;;;;;;;;;;;;;;2216:14;::::0;;:66:::1;::::0;-1:-1:-1;;;2216:66:33;;2092:95;;-1:-1:-1;2197:16:33::1;::::0;-1:-1:-1;;;;;2216:14:33;;::::1;::::0;:23:::1;::::0;:66:::1;::::0;2092:95;;2197:16;;2216:14;:66:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2292:24;:35:::0;;;2342:23:::1;::::0;2197:85;;-1:-1:-1;2197:85:33;;2342:23:::1;::::0;;;::::1;1999:373;;1920:452:::0;:::o;4148:103:18:-;4214:30;4225:4;966:10:21;4214::18;:30::i;:::-;4148:103;:::o;7270:387::-;7347:4;-1:-1:-1;;;;;;;;;;;7437:22:18;7445:4;7451:7;7437;:22::i;:::-;7432:219;;7475:8;:14;;;;;;;;;;;-1:-1:-1;;;;;7475:31:18;;;;;;;;;:38;;-1:-1:-1;;7475:38:18;7509:4;7475:38;;;7559:12;966:10:21;;887:96;7559:12:18;-1:-1:-1;;;;;7532:40:18;7550:7;-1:-1:-1;;;;;7532:40:18;7544:4;7532:40;;;;;;;;;;7593:4;7586:11;;;;;7432:219;7635:5;7628:12;;;;;7892:388;7970:4;-1:-1:-1;;;;;;;;;;;8059:22:18;8067:4;8073:7;8059;:22::i;:::-;8055:219;;;8131:5;8097:14;;;;;;;;;;;-1:-1:-1;;;;;8097:31:18;;;;;;;;;;:39;;-1:-1:-1;;8097:39:18;;;8155:40;966:10:21;;8097:14:18;;8155:40;;8131:5;8155:40;8216:4;8209:11;;;;;3231:65;6931:20:19;:18;:20::i;:::-;3231:65:18:o;4599:312:20:-;4679:4;-1:-1:-1;;;;;4688:6:20;4671:23;;;:120;;;4785:6;-1:-1:-1;;;;;4749:42:20;:32;-1:-1:-1;;;;;;;;;;;2035:53:25;-1:-1:-1;;;;;2035:53:25;;1957:138;4749:32:20;-1:-1:-1;;;;;4749:42:20;;;4671:120;4654:251;;;4865:29;;-1:-1:-1;;;4865:29:20;;;;;;;;;;;4466:103:33;2362:4:18;3191:16;2362:4;3191:10;:16::i;6052:538:20:-;6169:17;-1:-1:-1;;;;;6151:50:20;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6151:52:20;;;;;;;;-1:-1:-1;;6151:52:20;;;;;;;;;;;;:::i;:::-;;;6147:437;;6513:60;;-1:-1:-1;;;6513:60:20;;-1:-1:-1;;;;;12231:32:37;;6513:60:20;;;12213:51:37;12186:18;;6513:60:20;12067:203:37;6147:437:20;-1:-1:-1;;;;;;;;;;;6245:40:20;;6241:120;;6312:34;;-1:-1:-1;;;6312:34:20;;;;;1216:25:37;;;1189:18;;6312:34:20;1070:177:37;6241:120:20;6374:54;6404:17;6423:4;6374:29;:54::i;5028:213::-;5102:4;-1:-1:-1;;;;;5111:6:20;5094:23;;5090:145;;5195:29;;-1:-1:-1;;;5195:29:20;;;;;;;;;;;4381:197:18;4469:22;4477:4;4483:7;4469;:22::i;:::-;4464:108;;4514:47;;-1:-1:-1;;;4514:47:18;;-1:-1:-1;;;;;12467:32:37;;4514:47:18;;;12449:51:37;12516:18;;;12509:34;;;12422:18;;4514:47:18;12275:274:37;7084:141:19;8870:21;8560:40;-1:-1:-1;;;8560:40:19;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:19;;;;;;;;;;;2779:335:25;2870:37;2889:17;2870:18;:37::i;:::-;2922:27;;-1:-1:-1;;;;;2922:27:25;;;;;;;;2964:11;;:15;2960:148;;2995:53;3024:17;3043:4;2995:28;:53::i;2960:148::-;3079:18;:16;:18::i;2186:281::-;2263:17;-1:-1:-1;;;;;2263:29:25;;2296:1;2263:34;2259:119;;2320:47;;-1:-1:-1;;;2320:47:25;;-1:-1:-1;;;;;12231:32:37;;2320:47:25;;;12213:51:37;12186:18;;2320:47:25;12067:203:37;2259:119:25;-1:-1:-1;;;;;;;;;;;2387:73:25;;-1:-1:-1;;;;;;2387:73:25;-1:-1:-1;;;;;2387:73:25;;;;;;;;;;2186:281::o;4106:253:27:-;4189:12;4214;4228:23;4255:6;-1:-1:-1;;;;;4255:19:27;4275:4;4255:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4213:67;;;;4297:55;4324:6;4332:7;4341:10;4297:26;:55::i;:::-;4290:62;4106:253;-1:-1:-1;;;;;4106:253:27:o;6598:122:25:-;6648:9;:13;6644:70;;6684:19;;-1:-1:-1;;;6684:19:25;;;;;;;;;;;4625:582:27;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5045:17;;:22;:49;;;;-1:-1:-1;;;;;;5071:18:27;;;:23;5045:49;5041:119;;;5121:24;;-1:-1:-1;;;5121:24:27;;-1:-1:-1;;;;;12231:32:37;;5121:24:27;;;12213:51:37;12186:18;;5121:24:27;12067:203:37;5041:119:27;-1:-1:-1;5180:10:27;4625:582;-1:-1:-1;;4625:582:27:o;5743:516::-;5874:17;;:21;5870:383;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;-1:-1:-1;;;6225:17:27;;;;;;;;;;;14:286:37;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:37;;209:43;;199:71;;266:1;263;256:12;497:180;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:37;;497:180;-1:-1:-1;497:180:37:o;682:131::-;-1:-1:-1;;;;;757:31:37;;747:42;;737:70;;803:1;800;793:12;818:247;877:6;930:2;918:9;909:7;905:23;901:32;898:52;;;946:1;943;936:12;898:52;985:9;972:23;1004:31;1029:5;1004:31;:::i;1252:315::-;1320:6;1328;1381:2;1369:9;1360:7;1356:23;1352:32;1349:52;;;1397:1;1394;1387:12;1349:52;1433:9;1420:23;1410:33;;1493:2;1482:9;1478:18;1465:32;1506:31;1531:5;1506:31;:::i;:::-;1556:5;1546:15;;;1252:315;;;;;:::o;1572:388::-;1640:6;1648;1701:2;1689:9;1680:7;1676:23;1672:32;1669:52;;;1717:1;1714;1707:12;1669:52;1756:9;1743:23;1775:31;1800:5;1775:31;:::i;:::-;1825:5;-1:-1:-1;1882:2:37;1867:18;;1854:32;1895:33;1854:32;1895:33;:::i;1965:127::-;2026:10;2021:3;2017:20;2014:1;2007:31;2057:4;2054:1;2047:15;2081:4;2078:1;2071:15;2097:255;2169:2;2163:9;2211:6;2199:19;;2248:18;2233:34;;2269:22;;;2230:62;2227:88;;;2295:18;;:::i;:::-;2331:2;2324:22;2097:255;:::o;2357:275::-;2428:2;2422:9;2493:2;2474:13;;-1:-1:-1;;2470:27:37;2458:40;;2528:18;2513:34;;2549:22;;;2510:62;2507:88;;;2575:18;;:::i;:::-;2611:2;2604:22;2357:275;;-1:-1:-1;2357:275:37:o;2637:186::-;2685:4;2718:18;2710:6;2707:30;2704:56;;;2740:18;;:::i;:::-;-1:-1:-1;2806:2:37;2785:15;-1:-1:-1;;2781:29:37;2812:4;2777:40;;2637:186::o;2828:806::-;2905:6;2913;2966:2;2954:9;2945:7;2941:23;2937:32;2934:52;;;2982:1;2979;2972:12;2934:52;3021:9;3008:23;3040:31;3065:5;3040:31;:::i;:::-;3090:5;-1:-1:-1;3146:2:37;3131:18;;3118:32;3173:18;3162:30;;3159:50;;;3205:1;3202;3195:12;3159:50;3228:22;;3281:4;3273:13;;3269:27;-1:-1:-1;3259:55:37;;3310:1;3307;3300:12;3259:55;3346:2;3333:16;3371:48;3387:31;3415:2;3387:31;:::i;:::-;3371:48;:::i;:::-;3442:2;3435:5;3428:17;3482:7;3477:2;3472;3468;3464:11;3460:20;3457:33;3454:53;;;3503:1;3500;3493:12;3454:53;3558:2;3553;3549;3545:11;3540:2;3533:5;3529:14;3516:45;3602:1;3597:2;3592;3585:5;3581:14;3577:23;3570:34;3623:5;3613:15;;;;;2828:806;;;;;:::o;3639:315::-;3707:6;3715;3768:2;3756:9;3747:7;3743:23;3739:32;3736:52;;;3784:1;3781;3774:12;3736:52;3823:9;3810:23;3842:31;3867:5;3842:31;:::i;:::-;3892:5;3944:2;3929:18;;;;3916:32;;-1:-1:-1;;;3639:315:37:o;3959:250::-;4044:1;4054:113;4068:6;4065:1;4062:13;4054:113;;;4144:11;;;4138:18;4125:11;;;4118:39;4090:2;4083:10;4054:113;;;-1:-1:-1;;4201:1:37;4183:16;;4176:27;3959:250::o;4214:271::-;4256:3;4294:5;4288:12;4321:6;4316:3;4309:19;4337:76;4406:6;4399:4;4394:3;4390:14;4383:4;4376:5;4372:16;4337:76;:::i;:::-;4467:2;4446:15;-1:-1:-1;;4442:29:37;4433:39;;;;4474:4;4429:50;;4214:271;-1:-1:-1;;4214:271:37:o;4490:220::-;4639:2;4628:9;4621:21;4602:4;4659:45;4700:2;4689:9;4685:18;4677:6;4659:45;:::i;5066:175::-;5144:13;;5197:18;5186:30;;5176:41;;5166:69;;5231:1;5228;5221:12;5166:69;5066:175;;;:::o;5246:138::-;5325:13;;5347:31;5325:13;5347:31;:::i;5389:164::-;5465:13;;5514;;5507:21;5497:32;;5487:60;;5543:1;5540;5533:12;5558:441;5611:5;5664:3;5657:4;5649:6;5645:17;5641:27;5631:55;;5682:1;5679;5672:12;5631:55;5711:6;5705:13;5742:48;5758:31;5786:2;5758:31;:::i;5742:48::-;5815:2;5806:7;5799:19;5861:3;5854:4;5849:2;5841:6;5837:15;5833:26;5830:35;5827:55;;;5878:1;5875;5868:12;5827:55;5891:77;5965:2;5958:4;5949:7;5945:18;5938:4;5930:6;5926:17;5891:77;:::i;:::-;5986:7;5558:441;-1:-1:-1;;;;5558:441:37:o;6004:1270::-;6102:6;6155:2;6143:9;6134:7;6130:23;6126:32;6123:52;;;6171:1;6168;6161:12;6123:52;6204:9;6198:16;6233:18;6274:2;6266:6;6263:14;6260:34;;;6290:1;6287;6280:12;6260:34;6313:22;;;;6369:6;6351:16;;;6347:29;6344:49;;;6389:1;6386;6379:12;6344:49;6415:22;;:::i;:::-;6466:2;6460:9;6453:5;6446:24;6516:2;6512;6508:11;6502:18;6497:2;6490:5;6486:14;6479:42;6553:41;6590:2;6586;6582:11;6553:41;:::i;:::-;6548:2;6541:5;6537:14;6530:65;6627:41;6664:2;6660;6656:11;6627:41;:::i;:::-;6622:2;6615:5;6611:14;6604:65;6702:42;6739:3;6735:2;6731:12;6702:42;:::i;:::-;6696:3;6689:5;6685:15;6678:67;6792:3;6788:2;6784:12;6778:19;6772:3;6765:5;6761:15;6754:44;6831:43;6869:3;6865:2;6861:12;6831:43;:::i;:::-;6825:3;6818:5;6814:15;6807:68;6908:43;6946:3;6942:2;6938:12;6908:43;:::i;:::-;6902:3;6895:5;6891:15;6884:68;6971:3;7006:39;7041:2;7037;7033:11;7006:39;:::i;:::-;6990:14;;;6983:63;7065:3;7099:11;;;7093:18;7123:16;;;7120:36;;;7152:1;7149;7142:12;7120:36;7188:55;7235:7;7224:8;7220:2;7216:17;7188:55;:::i;:::-;7172:14;;;7165:79;;;;-1:-1:-1;7176:5:37;6004:1270;-1:-1:-1;;;;;6004:1270:37:o;9733:945::-;9932:2;9921:9;9914:21;9977:6;9971:13;9966:2;9955:9;9951:18;9944:41;9895:4;10032:2;10024:6;10020:15;10014:22;10074:4;10067;10056:9;10052:20;10045:34;10157:1;10153;10148:3;10144:11;10140:19;10125:12;10119:19;10115:45;10110:2;10099:9;10095:18;10088:73;10232:18;10226:2;10212:12;10208:21;10202:28;10198:53;10192:3;10181:9;10177:19;10170:82;10327:4;10313:12;10309:23;10303:30;10296:38;10289:46;10283:3;10272:9;10268:19;10261:75;10398:2;10384:12;10380:21;10374:28;10367:4;10356:9;10352:20;10345:58;10458:3;10444:12;10440:22;10434:29;10500:4;10494:3;10483:9;10479:19;10472:33;10528:54;10577:3;10566:9;10562:19;10546:14;10528:54;:::i;:::-;10514:68;;10643:3;10629:12;10625:22;10619:29;10613:3;10602:9;10598:19;10591:58;10666:6;10658:14;;;;9733:945;;;;:::o;10683:184::-;10753:6;10806:2;10794:9;10785:7;10781:23;10777:32;10774:52;;;10822:1;10819;10812:12;10774:52;-1:-1:-1;10845:16:37;;10683:184;-1:-1:-1;10683:184:37:o;11640:422::-;11863:2;11852:9;11845:21;11826:4;11883:45;11924:2;11913:9;11909:18;11901:6;11883:45;:::i;:::-;-1:-1:-1;;;;;11964:32:37;;;;11959:2;11944:18;;11937:60;-1:-1:-1;12040:14:37;;12033:22;12028:2;12013:18;;;12006:50;11875:53;11640:422;-1:-1:-1;11640:422:37:o;12554:287::-;12683:3;12721:6;12715:13;12737:66;12796:6;12791:3;12784:4;12776:6;12772:17;12737:66;:::i;:::-;12819:16;;;;;12554:287;-1:-1:-1;;12554:287:37:o"},"gasEstimates":{"creation":{"codeDepositCost":"1192600","executionCost":"infinite","totalCost":"infinite"},"external":{"ATTESTATION_CREATOR_ROLE()":"261","DEFAULT_ADMIN_ROLE()":"217","UPGRADE_INTERFACE_VERSION()":"infinite","createMissionEnrollmentAttestation(address,uint256)":"infinite","createMissionEnrollmentSchema()":"infinite","getMissionEnrollmentSchema()":"2337","getRoleAdmin(bytes32)":"infinite","grantAttestationCreatorRole(address)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","initialize(address,address)":"infinite","isApprovedAttestationCreator(address)":"2621","proxiableUUID()":"infinite","renounceRole(bytes32,address)":"29144","revokeAttestationCreatorRole(address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"450","upgradeToAndCall(address,bytes)":"infinite","verifyAttestation(bytes32)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite"}},"methodIdentifiers":{"ATTESTATION_CREATOR_ROLE()":"bd462049","DEFAULT_ADMIN_ROLE()":"a217fddf","UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","createMissionEnrollmentAttestation(address,uint256)":"624b04bd","createMissionEnrollmentSchema()":"e27fadab","getMissionEnrollmentSchema()":"5956ce45","getRoleAdmin(bytes32)":"248a9ca3","grantAttestationCreatorRole(address)":"1ecf2fbf","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address,address)":"485cc955","isApprovedAttestationCreator(address)":"4a0145b6","proxiableUUID()":"52d1902d","renounceRole(bytes32,address)":"36568abe","revokeAttestationCreatorRole(address)":"677339ce","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","upgradeToAndCall(address,bytes)":"4f1ef286","verifyAttestation(bytes32)":"08f46957"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"AttestationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"}],\"name\":\"SchemaCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTESTATION_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createMissionEnrollmentAttestation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createMissionEnrollmentSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMissionEnrollmentSchema\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAttestationCreatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_schemaRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isApprovedAttestationCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAttestationCreatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"}],\"name\":\"verifyAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AttestationService.sol\":\"AttestationService\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x242e0203b314c8539fd4ad3c1f0b7a9c1178fe55b223f4bc007eb9cbf271854c\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/AttestationService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport \\\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\\\";\\nimport \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Attestation} from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\n\\ncontract AttestationService is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    IEAS private eas;\\n    ISchemaRegistry private schemaRegistry;\\n\\n    bytes32 private _missionEnrollmentSchema;\\n    bytes32 public constant ATTESTATION_CREATOR_ROLE = keccak256(\\\"ATTESTATION_CREATOR_ROLE\\\");\\n    address private constant MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS = 0xF0bC5CC2B4866dAAeCb069430c60b24520077037;\\n\\n    mapping(address => bool) private approvedAttestationCreators;\\n\\n    event SchemaCreated(bytes32 indexed schemaId);\\n    event AttestationCreated(bytes32 indexed attestationId, address indexed recipient, address indexed attester);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _eas, address _schemaRegistry) public initializer {\\n        require(_eas != address(0) && _schemaRegistry != address(0), \\\"Invalid address\\\");\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        eas = IEAS(_eas);\\n        schemaRegistry = ISchemaRegistry(_schemaRegistry);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        approvedAttestationCreators[MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS] = true;\\n    }\\n\\n    function createMissionEnrollmentSchema() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_missionEnrollmentSchema == bytes32(0), \\\"Schema already created\\\");\\n        string memory schema = \\\"address userAddress,uint256 tokenId,uint256 timestamp,address attester\\\";\\n        bytes32 schemaId = schemaRegistry.register(schema, ISchemaResolver(address(0)), true);\\n        _missionEnrollmentSchema = schemaId;\\n        emit SchemaCreated(schemaId);\\n    }\\n\\n    function createMissionEnrollmentAttestation(address recipient, uint256 tokenId) external returns (bytes32) {\\n        require(approvedAttestationCreators[msg.sender], \\\"Not authorized to create attestations\\\");\\n        require(_missionEnrollmentSchema != bytes32(0), \\\"Schema not created\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(tokenId != 0, \\\"Invalid token ID\\\");\\n\\n        bytes memory data = abi.encode(recipient, tokenId, block.timestamp, msg.sender);\\n\\n        AttestationRequest memory request = AttestationRequest({\\n            schema: _missionEnrollmentSchema,\\n            data: AttestationRequestData({\\n                recipient: recipient,\\n                expirationTime: 0,\\n                revocable: true,\\n                refUID: bytes32(0),\\n                data: data,\\n                value: 0\\n            })\\n        });\\n\\n        bytes32 attestationId = eas.attest(request);\\n        emit AttestationCreated(attestationId, recipient, msg.sender);\\n        return attestationId;\\n    }\\n\\n    function verifyAttestation(bytes32 attestationId) external view returns (bool) {\\n        require(attestationId != bytes32(0), \\\"Invalid attestation ID\\\");\\n        Attestation memory attestation = eas.getAttestation(attestationId);\\n        return attestation.uid == attestationId && approvedAttestationCreators[attestation.attester];\\n    }\\n\\n    function grantAttestationCreatorRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        approvedAttestationCreators[account] = true;\\n    }\\n\\n    function revokeAttestationCreatorRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(account != MISSION_ENROLLMENT_DAQHRIS_ETH_ADDRESS, \\\"Cannot revoke role from main attestation creator\\\");\\n        approvedAttestationCreators[account] = false;\\n    }\\n\\n    function isApprovedAttestationCreator(address account) external view returns (bool) {\\n        return approvedAttestationCreators[account];\\n    }\\n\\n    function getMissionEnrollmentSchema() external view returns (bytes32) {\\n        return _missionEnrollmentSchema;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n}\\n\",\"keccak256\":\"0x2672a75c068d2849aac1b7f77eecb70afdcd6606b0d998d1043ca34d9b2fb927\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4154,"contract":"contracts/AttestationService.sol:AttestationService","label":"eas","offset":0,"slot":"0","type":"t_contract(IEAS)931"},{"astId":4157,"contract":"contracts/AttestationService.sol:AttestationService","label":"schemaRegistry","offset":0,"slot":"1","type":"t_contract(ISchemaRegistry)984"},{"astId":4159,"contract":"contracts/AttestationService.sol:AttestationService","label":"_missionEnrollmentSchema","offset":0,"slot":"2","type":"t_bytes32"},{"astId":4171,"contract":"contracts/AttestationService.sol:AttestationService","label":"approvedAttestationCreators","offset":0,"slot":"3","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IEAS)931":{"encoding":"inplace","label":"contract IEAS","numberOfBytes":"20"},"t_contract(ISchemaRegistry)984":{"encoding":"inplace","label":"contract ISchemaRegistry","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Client.sol":{"Client":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208d9319921603ccdf00294bd5e6a0aefbacbbcf8c74370053c77f95a9e5421f3e64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SWAP4 NOT SWAP3 AND SUB 0xCC 0xDF STOP 0x29 0x4B 0xD5 0xE6 LOG0 0xAE 0xFB 0xAC 0xBB 0xCF DUP13 PUSH21 0x370053C77F95A9E5421F3E64736F6C634300081400 CALLER ","sourceMap":"320:3263:34:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;320:3263:34;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208d9319921603ccdf00294bd5e6a0aefbacbbcf8c74370053c77f95a9e5421f3e64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SWAP4 NOT SWAP3 AND SUB 0xCC 0xDF STOP 0x29 0x4B 0xD5 0xE6 LOG0 0xAE 0xFB 0xAC 0xBB 0xCF DUP13 PUSH21 0x370053C77F95A9E5421F3E64736F6C634300081400 CALLER ","sourceMap":"320:3263:34:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_argsToBytes(struct Client.EVMExtraArgsV1 memory)":"infinite","_argsToBytes(struct Client.EVMExtraArgsV2 memory)":"infinite","namehash(bytes memory)":"infinite","reverseNode(address)":"infinite","slice(bytes memory,uint256,uint256)":"infinite","verifyOnchainIdentity(address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Client.sol\":\"Client\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  // Logged when an operator is added or removed.\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\\n\\n  function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns (bytes32);\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function setApprovalForAll(address operator, bool approved) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n\\n  function recordExists(bytes32 node) external view returns (bool);\\n\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcc1d60392693813028a258e400d16dd9632261c8e26ca33061c9d8286edcfc43\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n  IERC165,\\n  IABIResolver,\\n  IAddressResolver,\\n  IAddrResolver,\\n  IContentHashResolver,\\n  IDNSRecordResolver,\\n  IDNSZoneResolver,\\n  IInterfaceResolver,\\n  INameResolver,\\n  IPubkeyResolver,\\n  ITextResolver,\\n  IExtendedResolver\\n{\\n  /* Deprecated events */\\n  event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n  function setApprovalForAll(address, bool) external;\\n\\n  function approve(bytes32 node, address delegate, bool approved) external;\\n\\n  function isApprovedForAll(address account, address operator) external;\\n\\n  function isApprovedFor(address owner, bytes32 node, address delegate) external;\\n\\n  function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n\\n  function setAddr(bytes32 node, address addr) external;\\n\\n  function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n  function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n  function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n  function setName(bytes32 node, string calldata _name) external;\\n\\n  function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n  function setText(bytes32 node, string calldata key, string calldata value) external;\\n\\n  function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n\\n  function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n\\n  function multicallWithNodeCheck(bytes32 nodehash, bytes[] calldata data) external returns (bytes[] memory results);\\n\\n  /* Deprecated functions */\\n  function content(bytes32 node) external view returns (bytes32);\\n\\n  function multihash(bytes32 node) external view returns (bytes memory);\\n\\n  function setContent(bytes32 node, bytes32 hash) external;\\n\\n  function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xda9ca352faee1eb4841e910c4e8eb223dc24dcd8ab2e3b00047e7e669b72af56\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x56e138d363d3ce001205e96492a8ac0a35114e76fd1cef4e428823904de9a0a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n  event AddrChanged(bytes32 indexed node, address a);\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xbcd9810777380ca702291fc3e74690c492fc49f6fa0f78256fbc7a3e01315732\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n  event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress);\\n\\n  function addr(bytes32 node, uint256 coinType) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa6bc0f0833a1c4052674cd41d245c8c23908e0ccb090c9ef0adffb21907fdf54\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x43e90f6c6f3ba68d48bc98c3d2d5b26d8ca1047dfbf074f6a4cb88f77dca396d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf01e1226dc438f32be21a5feb2528942dffecd96ab0c4eb1a582c476050d4f4d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n  // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n  event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n  /**\\n   * zonehash obtains the hash for the zone.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x704bc5fd3ba96b2449fd1daeaf2c6d4579f839e6c6a908a321f7e8eb9a40d7a4\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n  function resolve(bytes memory name, bytes memory data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x603c4bd5b9219a7d6a6248e7687a848966bf27c3dc10ca2315f168d8e069d804\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n  event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 165 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xbbe45357ac199d06362207c454ffa7580bd187b13007aea9c1f061da4e99c45d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xce8c74368be656cc2880b1ba3147198eeb36f244d0887b16caf4fe5eef7438b7\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x The X coordinate of the curve point for the public key.\\n   * @return y The Y coordinate of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x32cf06260cfe504394b1ee106a403ead28eb649ed36c8ef4047ef5979f90b21c\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1a38ad6fcdd080f359defb1ce17d10a83eca14c278f170b3be45f6c43899b312\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\\\";\\n\\nbytes4 constant EVM_EXTRA_ARGS_V1_TAG = 0x12345678;\\nbytes4 constant EVM_EXTRA_ARGS_V2_TAG = 0x87654321;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  // Cross-chain functionality removed\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV2 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n\\n  /// @notice Verifies if an address has a valid ENS name associated with it\\n  /// @param addr The address to verify\\n  /// @param ensRegistry The address of the ENS registry contract\\n  /// @return bool Returns true if the address has a valid ENS name, false otherwise\\n  function verifyOnchainIdentity(address addr, address ensRegistry) internal view returns (bool) {\\n    ENS ens = ENS(ensRegistry);\\n    bytes32 node = reverseNode(addr);\\n    address resolver = ens.resolver(node);\\n    if (resolver == address(0)) {\\n      return false;\\n    }\\n    Resolver resolverContract = Resolver(resolver);\\n    string memory name = resolverContract.name(node);\\n    return bytes(name).length > 0;\\n  }\\n\\n  function reverseNode(address addr) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\n          bytes32(0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2),\\n          keccak256(abi.encodePacked(addr))\\n        )\\n      );\\n  }\\n\\n  function namehash(bytes memory name) internal pure returns (bytes32) {\\n    bytes32 node = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint i = 0;\\n    while (i < name.length) {\\n      uint labelLen = uint8(name[i]);\\n      i++;\\n      if (i + labelLen > name.length) break;\\n      bytes32 labelHash = keccak256(abi.encodePacked(slice(name, i, labelLen)));\\n      node = keccak256(abi.encodePacked(node, labelHash));\\n      i += labelLen;\\n    }\\n    return node;\\n  }\\n\\n  function slice(bytes memory data, uint start, uint len) internal pure returns (bytes memory) {\\n    bytes memory b = new bytes(len);\\n    for (uint i = 0; i < len; i++) {\\n      b[i] = data[i + start];\\n    }\\n    return b;\\n  }\\n}\\n\",\"keccak256\":\"0xc55d193eba7d006776f71a5a909ae2e7773cbdd3c94ddb2d82a0f11a0795ff4a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/AttestationUtils.sol":{"AttestationUtils":{"abi":[{"inputs":[],"name":"InvalidReceiver","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[],"name":"InvalidTokenId","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036a3e04aa6263323ddaa1cff1d7aadaec15964f0437383f8ef0692a6a8a5595964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE LOG3 0xE0 0x4A 0xA6 0x26 CALLER 0x23 0xDD 0xAA SHR SELFDESTRUCT SAR PUSH27 0xADAEC15964F0437383F8EF0692A6A8A5595964736F6C6343000814 STOP CALLER ","sourceMap":"215:1598:35:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1598:35;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036a3e04aa6263323ddaa1cff1d7aadaec15964f0437383f8ef0692a6a8a5595964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE LOG3 0xE0 0x4A 0xA6 0x26 CALLER 0x23 0xDD 0xAA SHR SELFDESTRUCT SAR PUSH27 0xADAEC15964F0437383F8EF0692A6A8A5595964736F6C6343000814 STOP CALLER ","sourceMap":"215:1598:35:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_registerSchema(struct AttestationUtils.EAS memory,string memory)":"infinite","createENSSchema(struct AttestationUtils.EAS memory)":"infinite","createPOAPSchema(struct AttestationUtils.EAS memory)":"infinite","submitAttestation(struct AttestationUtils.EAS memory,bytes32,address,uint256,bytes calldata)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSchema\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/AttestationUtils.sol\":\"AttestationUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x242e0203b314c8539fd4ad3c1f0b7a9c1178fe55b223f4bc007eb9cbf271854c\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"},\"contracts/utils/AttestationUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport \\\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\\\";\\n\\nlibrary AttestationUtils {\\n  struct EAS {\\n    IEAS eas;\\n    ISchemaRegistry schemaRegistry;\\n  }\\n\\n  error InvalidSchema();\\n  error InvalidReceiver();\\n  error InvalidTokenId();\\n  error InvalidSignature();\\n\\n  function submitAttestation(\\n    EAS memory eas,\\n    bytes32 schema,\\n    address receiver,\\n    uint256 tokenId,\\n    bytes calldata signature\\n  ) internal returns (bytes32) {\\n    if (schema == bytes32(0)) revert InvalidSchema();\\n    if (receiver == address(0)) revert InvalidReceiver();\\n    if (tokenId == 0) revert InvalidTokenId();\\n    if (signature.length == 0) revert InvalidSignature();\\n\\n    bytes memory data = abi.encodePacked(tokenId, signature);\\n\\n    AttestationRequest memory request = AttestationRequest({\\n      schema: schema,\\n      data: AttestationRequestData({\\n        recipient: receiver,\\n        expirationTime: 0,\\n        revocable: true,\\n        refUID: bytes32(0),\\n        data: data,\\n        value: 0\\n      })\\n    });\\n\\n    return eas.eas.attest(request);\\n  }\\n\\n  function createENSSchema(EAS memory eas) internal returns (bytes32) {\\n    string memory schema = \\\"address userAddress,string ensName,uint256 registrationDate\\\";\\n    return _registerSchema(eas, schema);\\n  }\\n\\n  function createPOAPSchema(EAS memory eas) internal returns (bytes32) {\\n    string memory schema = \\\"address userAddress,uint256 poapTokenId,string eventName,uint256 eventDate\\\";\\n    return _registerSchema(eas, schema);\\n  }\\n\\n  function _registerSchema(EAS memory eas, string memory schema) private returns (bytes32) {\\n    return eas.schemaRegistry.register(schema, ISchemaResolver(address(0)), true);\\n  }\\n}\\n\",\"keccak256\":\"0x677f82b93e7612729617e223bf05be14f11ec1f0cc31a929858b33c6fa4fe689\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/EthereumProviderUtils.sol":{"EthereumProviderUtils":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fcc822bb2557c243f0686317cbf849780815a05f4bd5aeedb0dd87a090e3a5ec64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0xC8 0x22 0xBB 0x25 JUMPI 0xC2 NUMBER CREATE PUSH9 0x6317CBF849780815A0 PUSH0 0x4B 0xD5 0xAE 0xED 0xB0 0xDD DUP8 LOG0 SWAP1 0xE3 0xA5 0xEC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"57:314:36:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;57:314:36;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fcc822bb2557c243f0686317cbf849780815a05f4bd5aeedb0dd87a090e3a5ec64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0xC8 0x22 0xBB 0x25 JUMPI 0xC2 NUMBER CREATE PUSH9 0x6317CBF849780815A0 PUSH0 0x4B 0xD5 0xAE 0xED 0xB0 0xDD DUP8 LOG0 SWAP1 0xE3 0xA5 0xEC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"57:314:36:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"convertProviderToSigner(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/EthereumProviderUtils.sol\":\"EthereumProviderUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/EthereumProviderUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary EthereumProviderUtils {\\n  // This function is a placeholder and should be implemented with actual logic\\n  function convertProviderToSigner(address provider) internal pure returns (address) {\\n    // TODO: Implement the logic to convert a provider to a signer\\n    return provider; // Placeholder return\\n  }\\n}\\n\",\"keccak256\":\"0xaf6144340e79bdaa8b6230f04bed43266e231b833fbbf3311a84abb4716aac85\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}