{
	"compiler": {
		"version": "0.8.27+commit.40a35a09"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "name",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "resource",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "record",
						"type": "bytes"
					}
				],
				"name": "DNSRecordChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "name",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "resource",
						"type": "uint16"
					}
				],
				"name": "DNSRecordDeleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "lastzonehash",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "zonehash",
						"type": "bytes"
					}
				],
				"name": "DNSZonehashChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "newVersion",
						"type": "uint64"
					}
				],
				"name": "VersionChanged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "clearRecords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					},
					{
						"internalType": "uint16",
						"name": "resource",
						"type": "uint16"
					}
				],
				"name": "dnsRecord",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					}
				],
				"name": "hasDNSRecords",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "recordVersions",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "setDNSRecords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "hash",
						"type": "bytes"
					}
				],
				"name": "setZonehash",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "zonehash",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"clearRecords(bytes32)": {
					"params": {
						"node": "The node to update."
					}
				},
				"dnsRecord(bytes32,bytes32,uint16)": {
					"params": {
						"name": "the keccak-256 hash of the fully-qualified name for which to fetch the record",
						"node": "the namehash of the node for which to fetch the record",
						"resource": "the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"
					},
					"returns": {
						"_0": "the DNS record in wire format if present, otherwise empty"
					}
				},
				"hasDNSRecords(bytes32,bytes32)": {
					"params": {
						"name": "the namehash of the node for which to check the records",
						"node": "the namehash of the node for which to check the records"
					}
				},
				"setDNSRecords(bytes32,bytes)": {
					"params": {
						"data": "the DNS wire format records to set",
						"node": "the namehash of the node for which to set the records"
					}
				},
				"setZonehash(bytes32,bytes)": {
					"params": {
						"hash": "The zonehash to set",
						"node": "The node to update."
					}
				},
				"zonehash(bytes32)": {
					"params": {
						"node": "The ENS node to query."
					},
					"returns": {
						"_0": "The associated contenthash."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"clearRecords(bytes32)": {
					"notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
				},
				"dnsRecord(bytes32,bytes32,uint16)": {
					"notice": "Obtain a DNS record."
				},
				"hasDNSRecords(bytes32,bytes32)": {
					"notice": "Check if a given node has records."
				},
				"setDNSRecords(bytes32,bytes)": {
					"notice": "Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first."
				},
				"setZonehash(bytes32,bytes)": {
					"notice": "setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry."
				},
				"zonehash(bytes32)": {
					"notice": "zonehash obtains the hash for the zone."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"package/contracts/resolvers/profiles/DNSResolver.sol": "DNSResolver"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@ensdomains/buffer/contracts/Buffer.sol": {
			"keccak256": "0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c",
			"license": "BSD-2-Clause",
			"urls": [
				"bzz-raw://78a722152d40d778a97595e5224fac1d138f4e659dcb1a926148909ef4c4bdca",
				"dweb:/ipfs/QmRxScF53x5ywsChLNpMUCdg2TSoCWTfo8G65Mo3sGY55b"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b",
			"license": "MIT",
			"urls": [
				"bzz-raw://d10e1d9b26042424789246603906ad06143bf9a928f4e99de8b5e3bdc662f549",
				"dweb:/ipfs/Qmejonoaj5MLekPus229rJQHcC6E9dz2xorjHJR84fMfmn"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4",
			"license": "MIT",
			"urls": [
				"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6",
				"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx"
			]
		},
		"package/contracts/dnssec-oracle/RRUtils.sol": {
			"keccak256": "0x25540b3e0f20bb98dc5aa8be284505ecb4b7e954c49d9ad9407e4de8ed17c13c",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3a8018454d4eba6cdb9442887bc1e64824d4737d9af8507a4ec5be9a4996d1c",
				"dweb:/ipfs/QmcjSWkspKCdvV1WkPBVDfqnGHy3KoCRvARwUKhVEu11mK"
			]
		},
		"package/contracts/resolvers/ResolverBase.sol": {
			"keccak256": "0xd658518ab7ba2f0dac8bb87b55f87546aebb9270dac00ca8d185a21e0cad84d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd09d9eb153b95b9087ce336af2ac6010a83f1d355e400255011d95ffd14eb6a",
				"dweb:/ipfs/QmPZwBi5RBbpNCcrjbpbasDF6kEX7PtybtTx29Kyaa9Dcv"
			]
		},
		"package/contracts/resolvers/profiles/DNSResolver.sol": {
			"keccak256": "0x4cd6d07803219194527274feae6d60a55206819256944b3fab52155b016917ef",
			"license": "MIT",
			"urls": [
				"bzz-raw://9acd726ee63f0d85f975e85d565fc696e45e129789768f72bbf9f91979d8048a",
				"dweb:/ipfs/QmcLqKZQhEikBcC1RZQ4E5HtwpRSGvx8Q5Z2kyHr3KiBiC"
			]
		},
		"package/contracts/resolvers/profiles/IDNSRecordResolver.sol": {
			"keccak256": "0xf01e1226dc438f32be21a5feb2528942dffecd96ab0c4eb1a582c476050d4f4d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4c70ec59ae9d902f117cf1a35dc51dbfcf46a80ca20a0165b1389bb9e70bdf2f",
				"dweb:/ipfs/QmZF5WW7THenMr9CMJHuFoB7gxb7r8BpnibmdBcPT2ZEhR"
			]
		},
		"package/contracts/resolvers/profiles/IDNSZoneResolver.sol": {
			"keccak256": "0x704bc5fd3ba96b2449fd1daeaf2c6d4579f839e6c6a908a321f7e8eb9a40d7a4",
			"license": "MIT",
			"urls": [
				"bzz-raw://b269396e0de96220b38c8af016d0dff90925f3b582a23a44e9bb2409079da25a",
				"dweb:/ipfs/Qmd384Gkh4BcHShQtu49zxhBW5gkCLrkM7gDgBq6r89Cfq"
			]
		},
		"package/contracts/resolvers/profiles/IVersionableResolver.sol": {
			"keccak256": "0x13c536aaead9efa1c25afcdc6b096834e4a13902633b0577370932d1918a4d82",
			"license": "MIT",
			"urls": [
				"bzz-raw://ffc7ef55b8ea9cea5370db8b164c37db2bcc57ba6979f9241864c578f7805bc0",
				"dweb:/ipfs/QmXSFaDsUHNskxqt6w9r76ZXc3gGtBGT1nGUCSu8TrHonR"
			]
		},
		"package/contracts/utils/BytesUtils.sol": {
			"keccak256": "0xee3d14e0fba9c94d86fd9f21394aac1b78e0234ec879d8c522248f604e8f6a0f",
			"license": "MIT",
			"urls": [
				"bzz-raw://68d45fe829823e3a79b20db39050ca0bbb4c88574a330bcc801fde26fde9d2a3",
				"dweb:/ipfs/QmPyj2Us1MDuL49wMCHfSaxNABL3Pb6b5XG8TWuhHyYqG8"
			]
		}
	},
	"version": 1
}