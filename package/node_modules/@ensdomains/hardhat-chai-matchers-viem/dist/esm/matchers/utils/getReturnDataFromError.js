import { decodeErrorResult } from "viem";
import { getKnownPanicReason } from "../../constants.js";
export const getRawErrorData = (err) => {
    if (typeof err !== "object" ||
        !err ||
        !("walk" in err) ||
        typeof err["walk"] !== "function")
        return undefined;
    const error = err.walk();
    const hex = typeof error.data === "object" ? error.data.data : error.data;
    return hex;
};
const tryDecodeReturnData = ({ abi, data }) => {
    try {
        return decodeErrorResult({ abi, data });
    }
    catch {
        return null;
    }
};
export const getReturnDataFromError = (subject, error) => {
    const hex = getRawErrorData(error);
    if (!hex)
        return { kind: "unknown-local" };
    if (hex === "0x")
        return { kind: "empty" };
    const decodedReturnData = tryDecodeReturnData({
        abi: subject.abi,
        data: hex,
    });
    if (!decodedReturnData)
        return { kind: "unknown-contract" };
    if (decodedReturnData.errorName === "Panic") {
        const code = decodedReturnData.args[0];
        return {
            kind: "panic",
            code,
            description: getKnownPanicReason(code),
        };
    }
    if (decodedReturnData.errorName === "Error") {
        return {
            kind: "error",
            reason: decodedReturnData.args[0],
        };
    }
    return {
        kind: "custom",
        name: decodedReturnData.errorName,
        args: decodedReturnData.args,
    };
};
//# sourceMappingURL=getReturnDataFromError.js.map