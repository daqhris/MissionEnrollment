import { Abi } from "viem";
export declare const getRawErrorData: (err: unknown) => `0x${string}` | undefined;
export declare const getReturnDataFromError: (subject: {
    abi: Abi;
}, error: unknown) => {
    readonly kind: "unknown-local";
    readonly code?: undefined;
    readonly description?: undefined;
    readonly reason?: undefined;
    readonly name?: undefined;
    readonly args?: undefined;
} | {
    readonly kind: "empty";
    readonly code?: undefined;
    readonly description?: undefined;
    readonly reason?: undefined;
    readonly name?: undefined;
    readonly args?: undefined;
} | {
    readonly kind: "unknown-contract";
    readonly code?: undefined;
    readonly description?: undefined;
    readonly reason?: undefined;
    readonly name?: undefined;
    readonly args?: undefined;
} | {
    readonly kind: "panic";
    readonly code: bigint;
    readonly description: "An `assert` condition failed" | "Arithmetic operation resulted in underflow or overflow" | "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`)" | "Attempted to convert to an invalid type" | "Attempted to access a storage byte array that is incorrectly encoded" | "Performed `.pop()` on an empty array" | "Array index is out of bounds" | "Allocated too much memory or created an array which is too large" | "Attempted to call a zero-initialized variable of internal function type" | "Unknown panic code";
    readonly reason?: undefined;
    readonly name?: undefined;
    readonly args?: undefined;
} | {
    readonly kind: "error";
    readonly reason: string;
    readonly code?: undefined;
    readonly description?: undefined;
    readonly name?: undefined;
    readonly args?: undefined;
} | {
    readonly kind: "custom";
    readonly name: string;
    readonly args: readonly unknown[] | undefined;
    readonly code?: undefined;
    readonly description?: undefined;
    readonly reason?: undefined;
};
//# sourceMappingURL=getReturnDataFromError.d.ts.map