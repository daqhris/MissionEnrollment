import { useMemo, useCallback } from 'react';
import { useChainId, useAccount } from 'wagmi';
import { cn } from '../../../styles/theme.js';
import '../../../transaction/index.js';
import { useOnchainKit } from '../../../useOnchainKit.js';
import '../../../wallet/index.js';
import { useNFTLifecycleContext } from '../NFTLifecycleProvider.js';
import { useNFTContext } from '../NFTProvider.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { ConnectWallet } from '../../../wallet/components/ConnectWallet.js';
import { Transaction } from '../../../transaction/components/Transaction.js';
import { TransactionButton } from '../../../transaction/components/TransactionButton.js';
import { TransactionSponsor } from '../../../transaction/components/TransactionSponsor.js';
import { TransactionStatus } from '../../../transaction/components/TransactionStatus.js';
import { TransactionStatusLabel } from '../../../transaction/components/TransactionStatusLabel.js';
import { TransactionStatusAction } from '../../../transaction/components/TransactionStatusAction.js';
function NFTMintButton({
  className,
  label = 'Mint'
}) {
  const chainId = useChainId();
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const _useNFTContext = useNFTContext(),
    contractAddress = _useNFTContext.contractAddress,
    tokenId = _useNFTContext.tokenId,
    isEligibleToMint = _useNFTContext.isEligibleToMint,
    buildMintTransaction = _useNFTContext.buildMintTransaction,
    quantity = _useNFTContext.quantity;
  const _useNFTLifecycleConte = useNFTLifecycleContext(),
    updateLifecycleStatus = _useNFTLifecycleConte.updateLifecycleStatus;
  const _useOnchainKit = useOnchainKit(),
    _useOnchainKit$config = _useOnchainKit.config,
    _useOnchainKit$config2 = _useOnchainKit$config === void 0 ? {
      paymaster: undefined
    } : _useOnchainKit$config,
    paymaster = _useOnchainKit$config2.paymaster;
  const capabilities = useMemo(() => {
    if (paymaster) {
      return {
        paymasterService: {
          url: paymaster
        }
      };
    }
    return undefined;
  }, [paymaster]);
  const handleOnStatus = useCallback(transactionStatus => {
    if (transactionStatus.statusName === 'transactionPending') {
      updateLifecycleStatus({
        statusName: 'transactionPending'
      });
    }
    if (transactionStatus.statusName === 'transactionLegacyExecuted' || transactionStatus.statusName === 'success' || transactionStatus.statusName === 'error') {
      updateLifecycleStatus(transactionStatus);
    }
  }, [updateLifecycleStatus]);
  const transactionButtonLabel = useMemo(() => {
    if (isEligibleToMint === false) {
      return 'Mint ended';
    }
    return label;
  }, [isEligibleToMint, label]);
  if (!buildMintTransaction) {
    return null;
  }
  if (!address) {
    return /*#__PURE__*/jsx("div", {
      className: cn('py-2', className),
      children: /*#__PURE__*/jsx(ConnectWallet, {
        className: "w-full"
      })
    });
  }
  return /*#__PURE__*/jsx("div", {
    className: cn('py-2', className),
    children: /*#__PURE__*/jsxs(Transaction, {
      capabilities: capabilities,
      chainId: chainId,
      calls: () => buildMintTransaction({
        contractAddress,
        tokenId,
        takerAddress: address,
        quantity
      }),
      onStatus: handleOnStatus,
      children: [/*#__PURE__*/jsx(TransactionButton, {
        text: transactionButtonLabel,
        disabled: transactionButtonLabel !== label
      }), /*#__PURE__*/jsx(TransactionSponsor, {}), /*#__PURE__*/jsxs(TransactionStatus, {
        children: [/*#__PURE__*/jsx(TransactionStatusLabel, {}), /*#__PURE__*/jsx(TransactionStatusAction, {})]
      })]
    })
  });
}
export { NFTMintButton };
//# sourceMappingURL=NFTMintButton.js.map
